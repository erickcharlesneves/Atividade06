
ATIVIDADE-AULA06-FILAS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d82c  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005e4  0800da30  0800da30  0000ea30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e014  0800e014  00010318  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800e014  0800e014  0000f014  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e01c  0800e01c  00010318  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e01c  0800e01c  0000f01c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e020  0800e020  0000f020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800e024  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200001d8  0800e1fc  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000278  0800e29c  00010278  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00005250  20000318  0800e33c  00010318  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20005568  0800e33c  00010568  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00010318  2**0
                  CONTENTS, READONLY
 14 .debug_info   000241d4  00000000  00000000  00010346  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000046b7  00000000  00000000  0003451a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001c00  00000000  00000000  00038bd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000015c9  00000000  00000000  0003a7d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000055f1  00000000  00000000  0003bda1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002106e  00000000  00000000  00041392  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001154e8  00000000  00000000  00062400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  001778e8  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00008adc  00000000  00000000  0017792c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000073  00000000  00000000  00180408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000318 	.word	0x20000318
 800021c:	00000000 	.word	0x00000000
 8000220:	0800da14 	.word	0x0800da14

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000031c 	.word	0x2000031c
 800023c:	0800da14 	.word	0x0800da14

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	@ 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_uldivmod>:
 8000668:	b953      	cbnz	r3, 8000680 <__aeabi_uldivmod+0x18>
 800066a:	b94a      	cbnz	r2, 8000680 <__aeabi_uldivmod+0x18>
 800066c:	2900      	cmp	r1, #0
 800066e:	bf08      	it	eq
 8000670:	2800      	cmpeq	r0, #0
 8000672:	bf1c      	itt	ne
 8000674:	f04f 31ff 	movne.w	r1, #4294967295
 8000678:	f04f 30ff 	movne.w	r0, #4294967295
 800067c:	f000 b9c0 	b.w	8000a00 <__aeabi_idiv0>
 8000680:	f1ad 0c08 	sub.w	ip, sp, #8
 8000684:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000688:	f000 f83e 	bl	8000708 <__udivmoddi4>
 800068c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000690:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000694:	b004      	add	sp, #16
 8000696:	4770      	bx	lr

08000698 <__aeabi_d2lz>:
 8000698:	b508      	push	{r3, lr}
 800069a:	4602      	mov	r2, r0
 800069c:	460b      	mov	r3, r1
 800069e:	ec43 2b17 	vmov	d7, r2, r3
 80006a2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80006a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006aa:	d403      	bmi.n	80006b4 <__aeabi_d2lz+0x1c>
 80006ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80006b0:	f000 b80a 	b.w	80006c8 <__aeabi_d2ulz>
 80006b4:	eeb1 7b47 	vneg.f64	d7, d7
 80006b8:	ec51 0b17 	vmov	r0, r1, d7
 80006bc:	f000 f804 	bl	80006c8 <__aeabi_d2ulz>
 80006c0:	4240      	negs	r0, r0
 80006c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c6:	bd08      	pop	{r3, pc}

080006c8 <__aeabi_d2ulz>:
 80006c8:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 80006f8 <__aeabi_d2ulz+0x30>
 80006cc:	ec41 0b17 	vmov	d7, r0, r1
 80006d0:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 8000700 <__aeabi_d2ulz+0x38>
 80006d4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006d8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80006dc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80006e0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80006e4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80006e8:	ee16 1a10 	vmov	r1, s12
 80006ec:	ee17 0a90 	vmov	r0, s15
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	f3af 8000 	nop.w
 80006f8:	00000000 	.word	0x00000000
 80006fc:	3df00000 	.word	0x3df00000
 8000700:	00000000 	.word	0x00000000
 8000704:	41f00000 	.word	0x41f00000

08000708 <__udivmoddi4>:
 8000708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800070c:	9d08      	ldr	r5, [sp, #32]
 800070e:	468e      	mov	lr, r1
 8000710:	4604      	mov	r4, r0
 8000712:	4688      	mov	r8, r1
 8000714:	2b00      	cmp	r3, #0
 8000716:	d14a      	bne.n	80007ae <__udivmoddi4+0xa6>
 8000718:	428a      	cmp	r2, r1
 800071a:	4617      	mov	r7, r2
 800071c:	d962      	bls.n	80007e4 <__udivmoddi4+0xdc>
 800071e:	fab2 f682 	clz	r6, r2
 8000722:	b14e      	cbz	r6, 8000738 <__udivmoddi4+0x30>
 8000724:	f1c6 0320 	rsb	r3, r6, #32
 8000728:	fa01 f806 	lsl.w	r8, r1, r6
 800072c:	fa20 f303 	lsr.w	r3, r0, r3
 8000730:	40b7      	lsls	r7, r6
 8000732:	ea43 0808 	orr.w	r8, r3, r8
 8000736:	40b4      	lsls	r4, r6
 8000738:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800073c:	fa1f fc87 	uxth.w	ip, r7
 8000740:	fbb8 f1fe 	udiv	r1, r8, lr
 8000744:	0c23      	lsrs	r3, r4, #16
 8000746:	fb0e 8811 	mls	r8, lr, r1, r8
 800074a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800074e:	fb01 f20c 	mul.w	r2, r1, ip
 8000752:	429a      	cmp	r2, r3
 8000754:	d909      	bls.n	800076a <__udivmoddi4+0x62>
 8000756:	18fb      	adds	r3, r7, r3
 8000758:	f101 30ff 	add.w	r0, r1, #4294967295
 800075c:	f080 80ea 	bcs.w	8000934 <__udivmoddi4+0x22c>
 8000760:	429a      	cmp	r2, r3
 8000762:	f240 80e7 	bls.w	8000934 <__udivmoddi4+0x22c>
 8000766:	3902      	subs	r1, #2
 8000768:	443b      	add	r3, r7
 800076a:	1a9a      	subs	r2, r3, r2
 800076c:	b2a3      	uxth	r3, r4
 800076e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000772:	fb0e 2210 	mls	r2, lr, r0, r2
 8000776:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800077a:	fb00 fc0c 	mul.w	ip, r0, ip
 800077e:	459c      	cmp	ip, r3
 8000780:	d909      	bls.n	8000796 <__udivmoddi4+0x8e>
 8000782:	18fb      	adds	r3, r7, r3
 8000784:	f100 32ff 	add.w	r2, r0, #4294967295
 8000788:	f080 80d6 	bcs.w	8000938 <__udivmoddi4+0x230>
 800078c:	459c      	cmp	ip, r3
 800078e:	f240 80d3 	bls.w	8000938 <__udivmoddi4+0x230>
 8000792:	443b      	add	r3, r7
 8000794:	3802      	subs	r0, #2
 8000796:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800079a:	eba3 030c 	sub.w	r3, r3, ip
 800079e:	2100      	movs	r1, #0
 80007a0:	b11d      	cbz	r5, 80007aa <__udivmoddi4+0xa2>
 80007a2:	40f3      	lsrs	r3, r6
 80007a4:	2200      	movs	r2, #0
 80007a6:	e9c5 3200 	strd	r3, r2, [r5]
 80007aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ae:	428b      	cmp	r3, r1
 80007b0:	d905      	bls.n	80007be <__udivmoddi4+0xb6>
 80007b2:	b10d      	cbz	r5, 80007b8 <__udivmoddi4+0xb0>
 80007b4:	e9c5 0100 	strd	r0, r1, [r5]
 80007b8:	2100      	movs	r1, #0
 80007ba:	4608      	mov	r0, r1
 80007bc:	e7f5      	b.n	80007aa <__udivmoddi4+0xa2>
 80007be:	fab3 f183 	clz	r1, r3
 80007c2:	2900      	cmp	r1, #0
 80007c4:	d146      	bne.n	8000854 <__udivmoddi4+0x14c>
 80007c6:	4573      	cmp	r3, lr
 80007c8:	d302      	bcc.n	80007d0 <__udivmoddi4+0xc8>
 80007ca:	4282      	cmp	r2, r0
 80007cc:	f200 8105 	bhi.w	80009da <__udivmoddi4+0x2d2>
 80007d0:	1a84      	subs	r4, r0, r2
 80007d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80007d6:	2001      	movs	r0, #1
 80007d8:	4690      	mov	r8, r2
 80007da:	2d00      	cmp	r5, #0
 80007dc:	d0e5      	beq.n	80007aa <__udivmoddi4+0xa2>
 80007de:	e9c5 4800 	strd	r4, r8, [r5]
 80007e2:	e7e2      	b.n	80007aa <__udivmoddi4+0xa2>
 80007e4:	2a00      	cmp	r2, #0
 80007e6:	f000 8090 	beq.w	800090a <__udivmoddi4+0x202>
 80007ea:	fab2 f682 	clz	r6, r2
 80007ee:	2e00      	cmp	r6, #0
 80007f0:	f040 80a4 	bne.w	800093c <__udivmoddi4+0x234>
 80007f4:	1a8a      	subs	r2, r1, r2
 80007f6:	0c03      	lsrs	r3, r0, #16
 80007f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007fc:	b280      	uxth	r0, r0
 80007fe:	b2bc      	uxth	r4, r7
 8000800:	2101      	movs	r1, #1
 8000802:	fbb2 fcfe 	udiv	ip, r2, lr
 8000806:	fb0e 221c 	mls	r2, lr, ip, r2
 800080a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800080e:	fb04 f20c 	mul.w	r2, r4, ip
 8000812:	429a      	cmp	r2, r3
 8000814:	d907      	bls.n	8000826 <__udivmoddi4+0x11e>
 8000816:	18fb      	adds	r3, r7, r3
 8000818:	f10c 38ff 	add.w	r8, ip, #4294967295
 800081c:	d202      	bcs.n	8000824 <__udivmoddi4+0x11c>
 800081e:	429a      	cmp	r2, r3
 8000820:	f200 80e0 	bhi.w	80009e4 <__udivmoddi4+0x2dc>
 8000824:	46c4      	mov	ip, r8
 8000826:	1a9b      	subs	r3, r3, r2
 8000828:	fbb3 f2fe 	udiv	r2, r3, lr
 800082c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000830:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000834:	fb02 f404 	mul.w	r4, r2, r4
 8000838:	429c      	cmp	r4, r3
 800083a:	d907      	bls.n	800084c <__udivmoddi4+0x144>
 800083c:	18fb      	adds	r3, r7, r3
 800083e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000842:	d202      	bcs.n	800084a <__udivmoddi4+0x142>
 8000844:	429c      	cmp	r4, r3
 8000846:	f200 80ca 	bhi.w	80009de <__udivmoddi4+0x2d6>
 800084a:	4602      	mov	r2, r0
 800084c:	1b1b      	subs	r3, r3, r4
 800084e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000852:	e7a5      	b.n	80007a0 <__udivmoddi4+0x98>
 8000854:	f1c1 0620 	rsb	r6, r1, #32
 8000858:	408b      	lsls	r3, r1
 800085a:	fa22 f706 	lsr.w	r7, r2, r6
 800085e:	431f      	orrs	r7, r3
 8000860:	fa0e f401 	lsl.w	r4, lr, r1
 8000864:	fa20 f306 	lsr.w	r3, r0, r6
 8000868:	fa2e fe06 	lsr.w	lr, lr, r6
 800086c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000870:	4323      	orrs	r3, r4
 8000872:	fa00 f801 	lsl.w	r8, r0, r1
 8000876:	fa1f fc87 	uxth.w	ip, r7
 800087a:	fbbe f0f9 	udiv	r0, lr, r9
 800087e:	0c1c      	lsrs	r4, r3, #16
 8000880:	fb09 ee10 	mls	lr, r9, r0, lr
 8000884:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000888:	fb00 fe0c 	mul.w	lr, r0, ip
 800088c:	45a6      	cmp	lr, r4
 800088e:	fa02 f201 	lsl.w	r2, r2, r1
 8000892:	d909      	bls.n	80008a8 <__udivmoddi4+0x1a0>
 8000894:	193c      	adds	r4, r7, r4
 8000896:	f100 3aff 	add.w	sl, r0, #4294967295
 800089a:	f080 809c 	bcs.w	80009d6 <__udivmoddi4+0x2ce>
 800089e:	45a6      	cmp	lr, r4
 80008a0:	f240 8099 	bls.w	80009d6 <__udivmoddi4+0x2ce>
 80008a4:	3802      	subs	r0, #2
 80008a6:	443c      	add	r4, r7
 80008a8:	eba4 040e 	sub.w	r4, r4, lr
 80008ac:	fa1f fe83 	uxth.w	lr, r3
 80008b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80008b4:	fb09 4413 	mls	r4, r9, r3, r4
 80008b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80008bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80008c0:	45a4      	cmp	ip, r4
 80008c2:	d908      	bls.n	80008d6 <__udivmoddi4+0x1ce>
 80008c4:	193c      	adds	r4, r7, r4
 80008c6:	f103 3eff 	add.w	lr, r3, #4294967295
 80008ca:	f080 8082 	bcs.w	80009d2 <__udivmoddi4+0x2ca>
 80008ce:	45a4      	cmp	ip, r4
 80008d0:	d97f      	bls.n	80009d2 <__udivmoddi4+0x2ca>
 80008d2:	3b02      	subs	r3, #2
 80008d4:	443c      	add	r4, r7
 80008d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80008da:	eba4 040c 	sub.w	r4, r4, ip
 80008de:	fba0 ec02 	umull	lr, ip, r0, r2
 80008e2:	4564      	cmp	r4, ip
 80008e4:	4673      	mov	r3, lr
 80008e6:	46e1      	mov	r9, ip
 80008e8:	d362      	bcc.n	80009b0 <__udivmoddi4+0x2a8>
 80008ea:	d05f      	beq.n	80009ac <__udivmoddi4+0x2a4>
 80008ec:	b15d      	cbz	r5, 8000906 <__udivmoddi4+0x1fe>
 80008ee:	ebb8 0203 	subs.w	r2, r8, r3
 80008f2:	eb64 0409 	sbc.w	r4, r4, r9
 80008f6:	fa04 f606 	lsl.w	r6, r4, r6
 80008fa:	fa22 f301 	lsr.w	r3, r2, r1
 80008fe:	431e      	orrs	r6, r3
 8000900:	40cc      	lsrs	r4, r1
 8000902:	e9c5 6400 	strd	r6, r4, [r5]
 8000906:	2100      	movs	r1, #0
 8000908:	e74f      	b.n	80007aa <__udivmoddi4+0xa2>
 800090a:	fbb1 fcf2 	udiv	ip, r1, r2
 800090e:	0c01      	lsrs	r1, r0, #16
 8000910:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000914:	b280      	uxth	r0, r0
 8000916:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800091a:	463b      	mov	r3, r7
 800091c:	4638      	mov	r0, r7
 800091e:	463c      	mov	r4, r7
 8000920:	46b8      	mov	r8, r7
 8000922:	46be      	mov	lr, r7
 8000924:	2620      	movs	r6, #32
 8000926:	fbb1 f1f7 	udiv	r1, r1, r7
 800092a:	eba2 0208 	sub.w	r2, r2, r8
 800092e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000932:	e766      	b.n	8000802 <__udivmoddi4+0xfa>
 8000934:	4601      	mov	r1, r0
 8000936:	e718      	b.n	800076a <__udivmoddi4+0x62>
 8000938:	4610      	mov	r0, r2
 800093a:	e72c      	b.n	8000796 <__udivmoddi4+0x8e>
 800093c:	f1c6 0220 	rsb	r2, r6, #32
 8000940:	fa2e f302 	lsr.w	r3, lr, r2
 8000944:	40b7      	lsls	r7, r6
 8000946:	40b1      	lsls	r1, r6
 8000948:	fa20 f202 	lsr.w	r2, r0, r2
 800094c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000950:	430a      	orrs	r2, r1
 8000952:	fbb3 f8fe 	udiv	r8, r3, lr
 8000956:	b2bc      	uxth	r4, r7
 8000958:	fb0e 3318 	mls	r3, lr, r8, r3
 800095c:	0c11      	lsrs	r1, r2, #16
 800095e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000962:	fb08 f904 	mul.w	r9, r8, r4
 8000966:	40b0      	lsls	r0, r6
 8000968:	4589      	cmp	r9, r1
 800096a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800096e:	b280      	uxth	r0, r0
 8000970:	d93e      	bls.n	80009f0 <__udivmoddi4+0x2e8>
 8000972:	1879      	adds	r1, r7, r1
 8000974:	f108 3cff 	add.w	ip, r8, #4294967295
 8000978:	d201      	bcs.n	800097e <__udivmoddi4+0x276>
 800097a:	4589      	cmp	r9, r1
 800097c:	d81f      	bhi.n	80009be <__udivmoddi4+0x2b6>
 800097e:	eba1 0109 	sub.w	r1, r1, r9
 8000982:	fbb1 f9fe 	udiv	r9, r1, lr
 8000986:	fb09 f804 	mul.w	r8, r9, r4
 800098a:	fb0e 1119 	mls	r1, lr, r9, r1
 800098e:	b292      	uxth	r2, r2
 8000990:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000994:	4542      	cmp	r2, r8
 8000996:	d229      	bcs.n	80009ec <__udivmoddi4+0x2e4>
 8000998:	18ba      	adds	r2, r7, r2
 800099a:	f109 31ff 	add.w	r1, r9, #4294967295
 800099e:	d2c4      	bcs.n	800092a <__udivmoddi4+0x222>
 80009a0:	4542      	cmp	r2, r8
 80009a2:	d2c2      	bcs.n	800092a <__udivmoddi4+0x222>
 80009a4:	f1a9 0102 	sub.w	r1, r9, #2
 80009a8:	443a      	add	r2, r7
 80009aa:	e7be      	b.n	800092a <__udivmoddi4+0x222>
 80009ac:	45f0      	cmp	r8, lr
 80009ae:	d29d      	bcs.n	80008ec <__udivmoddi4+0x1e4>
 80009b0:	ebbe 0302 	subs.w	r3, lr, r2
 80009b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80009b8:	3801      	subs	r0, #1
 80009ba:	46e1      	mov	r9, ip
 80009bc:	e796      	b.n	80008ec <__udivmoddi4+0x1e4>
 80009be:	eba7 0909 	sub.w	r9, r7, r9
 80009c2:	4449      	add	r1, r9
 80009c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80009c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80009cc:	fb09 f804 	mul.w	r8, r9, r4
 80009d0:	e7db      	b.n	800098a <__udivmoddi4+0x282>
 80009d2:	4673      	mov	r3, lr
 80009d4:	e77f      	b.n	80008d6 <__udivmoddi4+0x1ce>
 80009d6:	4650      	mov	r0, sl
 80009d8:	e766      	b.n	80008a8 <__udivmoddi4+0x1a0>
 80009da:	4608      	mov	r0, r1
 80009dc:	e6fd      	b.n	80007da <__udivmoddi4+0xd2>
 80009de:	443b      	add	r3, r7
 80009e0:	3a02      	subs	r2, #2
 80009e2:	e733      	b.n	800084c <__udivmoddi4+0x144>
 80009e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80009e8:	443b      	add	r3, r7
 80009ea:	e71c      	b.n	8000826 <__udivmoddi4+0x11e>
 80009ec:	4649      	mov	r1, r9
 80009ee:	e79c      	b.n	800092a <__udivmoddi4+0x222>
 80009f0:	eba1 0109 	sub.w	r1, r1, r9
 80009f4:	46c4      	mov	ip, r8
 80009f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80009fa:	fb09 f804 	mul.w	r8, r9, r4
 80009fe:	e7c4      	b.n	800098a <__udivmoddi4+0x282>

08000a00 <__aeabi_idiv0>:
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a08:	f000 ff2d 	bl	8001866 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a0c:	f000 f852 	bl	8000ab4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a10:	f000 f9c0 	bl	8000d94 <MX_GPIO_Init>
  MX_ETH_Init();
 8000a14:	f000 f912 	bl	8000c3c <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000a18:	f000 f95e 	bl	8000cd8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000a1c:	f000 f98c 	bl	8000d38 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 8000a20:	f000 f8ba 	bl	8000b98 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000a24:	f004 ff9c 	bl	8005960 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of SemLiberaProdutor */
  SemLiberaProdutorHandle = osSemaphoreNew(1, 0, &SemLiberaProdutor_attributes);
 8000a28:	4a16      	ldr	r2, [pc, #88]	@ (8000a84 <main+0x80>)
 8000a2a:	2100      	movs	r1, #0
 8000a2c:	2001      	movs	r0, #1
 8000a2e:	f005 f8d5 	bl	8005bdc <osSemaphoreNew>
 8000a32:	4603      	mov	r3, r0
 8000a34:	4a14      	ldr	r2, [pc, #80]	@ (8000a88 <main+0x84>)
 8000a36:	6013      	str	r3, [r2, #0]

  /* creation of SemLiberaConsumidor */
  SemLiberaConsumidorHandle = osSemaphoreNew(1, 0, &SemLiberaConsumidor_attributes);
 8000a38:	4a14      	ldr	r2, [pc, #80]	@ (8000a8c <main+0x88>)
 8000a3a:	2100      	movs	r1, #0
 8000a3c:	2001      	movs	r0, #1
 8000a3e:	f005 f8cd 	bl	8005bdc <osSemaphoreNew>
 8000a42:	4603      	mov	r3, r0
 8000a44:	4a12      	ldr	r2, [pc, #72]	@ (8000a90 <main+0x8c>)
 8000a46:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of FilaRobson */
  FilaRobsonHandle = osMessageQueueNew (1024, sizeof(uint16_t), &FilaRobson_attributes);
 8000a48:	4a12      	ldr	r2, [pc, #72]	@ (8000a94 <main+0x90>)
 8000a4a:	2102      	movs	r1, #2
 8000a4c:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8000a50:	f005 fa1e 	bl	8005e90 <osMessageQueueNew>
 8000a54:	4603      	mov	r3, r0
 8000a56:	4a10      	ldr	r2, [pc, #64]	@ (8000a98 <main+0x94>)
 8000a58:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Tarefa_produtor */
  Tarefa_produtorHandle = osThreadNew(Tarefa_produtora_fun, NULL, &Tarefa_produtor_attributes);
 8000a5a:	4a10      	ldr	r2, [pc, #64]	@ (8000a9c <main+0x98>)
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	4810      	ldr	r0, [pc, #64]	@ (8000aa0 <main+0x9c>)
 8000a60:	f004 ffe8 	bl	8005a34 <osThreadNew>
 8000a64:	4603      	mov	r3, r0
 8000a66:	4a0f      	ldr	r2, [pc, #60]	@ (8000aa4 <main+0xa0>)
 8000a68:	6013      	str	r3, [r2, #0]

  /* creation of Tarefa_consumid */
  Tarefa_consumidHandle = osThreadNew(Tarefa_consumidora_fun, NULL, &Tarefa_consumid_attributes);
 8000a6a:	4a0f      	ldr	r2, [pc, #60]	@ (8000aa8 <main+0xa4>)
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	480f      	ldr	r0, [pc, #60]	@ (8000aac <main+0xa8>)
 8000a70:	f004 ffe0 	bl	8005a34 <osThreadNew>
 8000a74:	4603      	mov	r3, r0
 8000a76:	4a0e      	ldr	r2, [pc, #56]	@ (8000ab0 <main+0xac>)
 8000a78:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000a7a:	f004 ffa5 	bl	80059c8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a7e:	bf00      	nop
 8000a80:	e7fd      	b.n	8000a7e <main+0x7a>
 8000a82:	bf00      	nop
 8000a84:	0800dbb4 	.word	0x0800dbb4
 8000a88:	200009d8 	.word	0x200009d8
 8000a8c:	0800dbc4 	.word	0x0800dbc4
 8000a90:	200009dc 	.word	0x200009dc
 8000a94:	0800db9c 	.word	0x0800db9c
 8000a98:	200009d4 	.word	0x200009d4
 8000a9c:	0800db54 	.word	0x0800db54
 8000aa0:	08000f35 	.word	0x08000f35
 8000aa4:	200009cc 	.word	0x200009cc
 8000aa8:	0800db78 	.word	0x0800db78
 8000aac:	08001005 	.word	0x08001005
 8000ab0:	200009d0 	.word	0x200009d0

08000ab4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b094      	sub	sp, #80	@ 0x50
 8000ab8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aba:	f107 031c 	add.w	r3, r7, #28
 8000abe:	2234      	movs	r2, #52	@ 0x34
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f009 fc31 	bl	800a32a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ac8:	f107 0308 	add.w	r3, r7, #8
 8000acc:	2200      	movs	r2, #0
 8000ace:	601a      	str	r2, [r3, #0]
 8000ad0:	605a      	str	r2, [r3, #4]
 8000ad2:	609a      	str	r2, [r3, #8]
 8000ad4:	60da      	str	r2, [r3, #12]
 8000ad6:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000ad8:	f002 fa90 	bl	8002ffc <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000adc:	4b2c      	ldr	r3, [pc, #176]	@ (8000b90 <SystemClock_Config+0xdc>)
 8000ade:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ae0:	4a2b      	ldr	r2, [pc, #172]	@ (8000b90 <SystemClock_Config+0xdc>)
 8000ae2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ae6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ae8:	4b29      	ldr	r3, [pc, #164]	@ (8000b90 <SystemClock_Config+0xdc>)
 8000aea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000af0:	607b      	str	r3, [r7, #4]
 8000af2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000af4:	4b27      	ldr	r3, [pc, #156]	@ (8000b94 <SystemClock_Config+0xe0>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000afc:	4a25      	ldr	r2, [pc, #148]	@ (8000b94 <SystemClock_Config+0xe0>)
 8000afe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b02:	6013      	str	r3, [r2, #0]
 8000b04:	4b23      	ldr	r3, [pc, #140]	@ (8000b94 <SystemClock_Config+0xe0>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000b0c:	603b      	str	r3, [r7, #0]
 8000b0e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b10:	2301      	movs	r3, #1
 8000b12:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000b14:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000b18:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b1a:	2302      	movs	r3, #2
 8000b1c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b1e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000b22:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b24:	2304      	movs	r3, #4
 8000b26:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000b28:	2360      	movs	r3, #96	@ 0x60
 8000b2a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b2c:	2302      	movs	r3, #2
 8000b2e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b30:	2304      	movs	r3, #4
 8000b32:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b34:	2302      	movs	r3, #2
 8000b36:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b38:	f107 031c 	add.w	r3, r7, #28
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f002 fabd 	bl	80030bc <HAL_RCC_OscConfig>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000b48:	f000 faee 	bl	8001128 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000b4c:	f002 fa66 	bl	800301c <HAL_PWREx_EnableOverDrive>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000b56:	f000 fae7 	bl	8001128 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b5a:	230f      	movs	r3, #15
 8000b5c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b5e:	2302      	movs	r3, #2
 8000b60:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b62:	2300      	movs	r3, #0
 8000b64:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b66:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b6a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000b70:	f107 0308 	add.w	r3, r7, #8
 8000b74:	2103      	movs	r1, #3
 8000b76:	4618      	mov	r0, r3
 8000b78:	f002 fd4e 	bl	8003618 <HAL_RCC_ClockConfig>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000b82:	f000 fad1 	bl	8001128 <Error_Handler>
  }
}
 8000b86:	bf00      	nop
 8000b88:	3750      	adds	r7, #80	@ 0x50
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	40023800 	.word	0x40023800
 8000b94:	40007000 	.word	0x40007000

08000b98 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b084      	sub	sp, #16
 8000b9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b9e:	463b      	mov	r3, r7
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	605a      	str	r2, [r3, #4]
 8000ba6:	609a      	str	r2, [r3, #8]
 8000ba8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000baa:	4b21      	ldr	r3, [pc, #132]	@ (8000c30 <MX_ADC1_Init+0x98>)
 8000bac:	4a21      	ldr	r2, [pc, #132]	@ (8000c34 <MX_ADC1_Init+0x9c>)
 8000bae:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000bb0:	4b1f      	ldr	r3, [pc, #124]	@ (8000c30 <MX_ADC1_Init+0x98>)
 8000bb2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000bb6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000bb8:	4b1d      	ldr	r3, [pc, #116]	@ (8000c30 <MX_ADC1_Init+0x98>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000bbe:	4b1c      	ldr	r3, [pc, #112]	@ (8000c30 <MX_ADC1_Init+0x98>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000bc4:	4b1a      	ldr	r3, [pc, #104]	@ (8000c30 <MX_ADC1_Init+0x98>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000bca:	4b19      	ldr	r3, [pc, #100]	@ (8000c30 <MX_ADC1_Init+0x98>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000bd2:	4b17      	ldr	r3, [pc, #92]	@ (8000c30 <MX_ADC1_Init+0x98>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bd8:	4b15      	ldr	r3, [pc, #84]	@ (8000c30 <MX_ADC1_Init+0x98>)
 8000bda:	4a17      	ldr	r2, [pc, #92]	@ (8000c38 <MX_ADC1_Init+0xa0>)
 8000bdc:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000bde:	4b14      	ldr	r3, [pc, #80]	@ (8000c30 <MX_ADC1_Init+0x98>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000be4:	4b12      	ldr	r3, [pc, #72]	@ (8000c30 <MX_ADC1_Init+0x98>)
 8000be6:	2201      	movs	r2, #1
 8000be8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000bea:	4b11      	ldr	r3, [pc, #68]	@ (8000c30 <MX_ADC1_Init+0x98>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000bf2:	4b0f      	ldr	r3, [pc, #60]	@ (8000c30 <MX_ADC1_Init+0x98>)
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000bf8:	480d      	ldr	r0, [pc, #52]	@ (8000c30 <MX_ADC1_Init+0x98>)
 8000bfa:	f000 fe85 	bl	8001908 <HAL_ADC_Init>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d001      	beq.n	8000c08 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000c04:	f000 fa90 	bl	8001128 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000c10:	2300      	movs	r3, #0
 8000c12:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c14:	463b      	mov	r3, r7
 8000c16:	4619      	mov	r1, r3
 8000c18:	4805      	ldr	r0, [pc, #20]	@ (8000c30 <MX_ADC1_Init+0x98>)
 8000c1a:	f001 f853 	bl	8001cc4 <HAL_ADC_ConfigChannel>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000c24:	f000 fa80 	bl	8001128 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c28:	bf00      	nop
 8000c2a:	3710      	adds	r7, #16
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	2000036c 	.word	0x2000036c
 8000c34:	40012000 	.word	0x40012000
 8000c38:	0f000001 	.word	0x0f000001

08000c3c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000c40:	4b1f      	ldr	r3, [pc, #124]	@ (8000cc0 <MX_ETH_Init+0x84>)
 8000c42:	4a20      	ldr	r2, [pc, #128]	@ (8000cc4 <MX_ETH_Init+0x88>)
 8000c44:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000c46:	4b20      	ldr	r3, [pc, #128]	@ (8000cc8 <MX_ETH_Init+0x8c>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000c4c:	4b1e      	ldr	r3, [pc, #120]	@ (8000cc8 <MX_ETH_Init+0x8c>)
 8000c4e:	2280      	movs	r2, #128	@ 0x80
 8000c50:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000c52:	4b1d      	ldr	r3, [pc, #116]	@ (8000cc8 <MX_ETH_Init+0x8c>)
 8000c54:	22e1      	movs	r2, #225	@ 0xe1
 8000c56:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000c58:	4b1b      	ldr	r3, [pc, #108]	@ (8000cc8 <MX_ETH_Init+0x8c>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000c5e:	4b1a      	ldr	r3, [pc, #104]	@ (8000cc8 <MX_ETH_Init+0x8c>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000c64:	4b18      	ldr	r3, [pc, #96]	@ (8000cc8 <MX_ETH_Init+0x8c>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000c6a:	4b15      	ldr	r3, [pc, #84]	@ (8000cc0 <MX_ETH_Init+0x84>)
 8000c6c:	4a16      	ldr	r2, [pc, #88]	@ (8000cc8 <MX_ETH_Init+0x8c>)
 8000c6e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000c70:	4b13      	ldr	r3, [pc, #76]	@ (8000cc0 <MX_ETH_Init+0x84>)
 8000c72:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000c76:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000c78:	4b11      	ldr	r3, [pc, #68]	@ (8000cc0 <MX_ETH_Init+0x84>)
 8000c7a:	4a14      	ldr	r2, [pc, #80]	@ (8000ccc <MX_ETH_Init+0x90>)
 8000c7c:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000c7e:	4b10      	ldr	r3, [pc, #64]	@ (8000cc0 <MX_ETH_Init+0x84>)
 8000c80:	4a13      	ldr	r2, [pc, #76]	@ (8000cd0 <MX_ETH_Init+0x94>)
 8000c82:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000c84:	4b0e      	ldr	r3, [pc, #56]	@ (8000cc0 <MX_ETH_Init+0x84>)
 8000c86:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000c8a:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000c8c:	480c      	ldr	r0, [pc, #48]	@ (8000cc0 <MX_ETH_Init+0x84>)
 8000c8e:	f001 fb4f 	bl	8002330 <HAL_ETH_Init>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000c98:	f000 fa46 	bl	8001128 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000c9c:	2238      	movs	r2, #56	@ 0x38
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	480c      	ldr	r0, [pc, #48]	@ (8000cd4 <MX_ETH_Init+0x98>)
 8000ca2:	f009 fb42 	bl	800a32a <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000ca6:	4b0b      	ldr	r3, [pc, #44]	@ (8000cd4 <MX_ETH_Init+0x98>)
 8000ca8:	2221      	movs	r2, #33	@ 0x21
 8000caa:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000cac:	4b09      	ldr	r3, [pc, #36]	@ (8000cd4 <MX_ETH_Init+0x98>)
 8000cae:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8000cb2:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000cb4:	4b07      	ldr	r3, [pc, #28]	@ (8000cd4 <MX_ETH_Init+0x98>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000cba:	bf00      	nop
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	200003b4 	.word	0x200003b4
 8000cc4:	40028000 	.word	0x40028000
 8000cc8:	200009e0 	.word	0x200009e0
 8000ccc:	20000278 	.word	0x20000278
 8000cd0:	200001d8 	.word	0x200001d8
 8000cd4:	20000334 	.word	0x20000334

08000cd8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000cdc:	4b14      	ldr	r3, [pc, #80]	@ (8000d30 <MX_USART3_UART_Init+0x58>)
 8000cde:	4a15      	ldr	r2, [pc, #84]	@ (8000d34 <MX_USART3_UART_Init+0x5c>)
 8000ce0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000ce2:	4b13      	ldr	r3, [pc, #76]	@ (8000d30 <MX_USART3_UART_Init+0x58>)
 8000ce4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ce8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000cea:	4b11      	ldr	r3, [pc, #68]	@ (8000d30 <MX_USART3_UART_Init+0x58>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000cf0:	4b0f      	ldr	r3, [pc, #60]	@ (8000d30 <MX_USART3_UART_Init+0x58>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000cf6:	4b0e      	ldr	r3, [pc, #56]	@ (8000d30 <MX_USART3_UART_Init+0x58>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000cfc:	4b0c      	ldr	r3, [pc, #48]	@ (8000d30 <MX_USART3_UART_Init+0x58>)
 8000cfe:	220c      	movs	r2, #12
 8000d00:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d02:	4b0b      	ldr	r3, [pc, #44]	@ (8000d30 <MX_USART3_UART_Init+0x58>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d08:	4b09      	ldr	r3, [pc, #36]	@ (8000d30 <MX_USART3_UART_Init+0x58>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d0e:	4b08      	ldr	r3, [pc, #32]	@ (8000d30 <MX_USART3_UART_Init+0x58>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d14:	4b06      	ldr	r3, [pc, #24]	@ (8000d30 <MX_USART3_UART_Init+0x58>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d1a:	4805      	ldr	r0, [pc, #20]	@ (8000d30 <MX_USART3_UART_Init+0x58>)
 8000d1c:	f003 fdca 	bl	80048b4 <HAL_UART_Init>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000d26:	f000 f9ff 	bl	8001128 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d2a:	bf00      	nop
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	20000464 	.word	0x20000464
 8000d34:	40004800 	.word	0x40004800

08000d38 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000d3c:	4b14      	ldr	r3, [pc, #80]	@ (8000d90 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d3e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000d42:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000d44:	4b12      	ldr	r3, [pc, #72]	@ (8000d90 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d46:	2206      	movs	r2, #6
 8000d48:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000d4a:	4b11      	ldr	r3, [pc, #68]	@ (8000d90 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d4c:	2202      	movs	r2, #2
 8000d4e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000d50:	4b0f      	ldr	r3, [pc, #60]	@ (8000d90 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000d56:	4b0e      	ldr	r3, [pc, #56]	@ (8000d90 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d58:	2202      	movs	r2, #2
 8000d5a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000d5c:	4b0c      	ldr	r3, [pc, #48]	@ (8000d90 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d5e:	2201      	movs	r2, #1
 8000d60:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000d62:	4b0b      	ldr	r3, [pc, #44]	@ (8000d90 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000d68:	4b09      	ldr	r3, [pc, #36]	@ (8000d90 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000d6e:	4b08      	ldr	r3, [pc, #32]	@ (8000d90 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d70:	2201      	movs	r2, #1
 8000d72:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000d74:	4b06      	ldr	r3, [pc, #24]	@ (8000d90 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000d7a:	4805      	ldr	r0, [pc, #20]	@ (8000d90 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000d7c:	f002 f804 	bl	8002d88 <HAL_PCD_Init>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000d86:	f000 f9cf 	bl	8001128 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000d8a:	bf00      	nop
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	200004ec 	.word	0x200004ec

08000d94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b08c      	sub	sp, #48	@ 0x30
 8000d98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d9a:	f107 031c 	add.w	r3, r7, #28
 8000d9e:	2200      	movs	r2, #0
 8000da0:	601a      	str	r2, [r3, #0]
 8000da2:	605a      	str	r2, [r3, #4]
 8000da4:	609a      	str	r2, [r3, #8]
 8000da6:	60da      	str	r2, [r3, #12]
 8000da8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000daa:	4b4b      	ldr	r3, [pc, #300]	@ (8000ed8 <MX_GPIO_Init+0x144>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dae:	4a4a      	ldr	r2, [pc, #296]	@ (8000ed8 <MX_GPIO_Init+0x144>)
 8000db0:	f043 0304 	orr.w	r3, r3, #4
 8000db4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000db6:	4b48      	ldr	r3, [pc, #288]	@ (8000ed8 <MX_GPIO_Init+0x144>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dba:	f003 0304 	and.w	r3, r3, #4
 8000dbe:	61bb      	str	r3, [r7, #24]
 8000dc0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dc2:	4b45      	ldr	r3, [pc, #276]	@ (8000ed8 <MX_GPIO_Init+0x144>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dc6:	4a44      	ldr	r2, [pc, #272]	@ (8000ed8 <MX_GPIO_Init+0x144>)
 8000dc8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000dcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dce:	4b42      	ldr	r3, [pc, #264]	@ (8000ed8 <MX_GPIO_Init+0x144>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000dd6:	617b      	str	r3, [r7, #20]
 8000dd8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dda:	4b3f      	ldr	r3, [pc, #252]	@ (8000ed8 <MX_GPIO_Init+0x144>)
 8000ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dde:	4a3e      	ldr	r2, [pc, #248]	@ (8000ed8 <MX_GPIO_Init+0x144>)
 8000de0:	f043 0301 	orr.w	r3, r3, #1
 8000de4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000de6:	4b3c      	ldr	r3, [pc, #240]	@ (8000ed8 <MX_GPIO_Init+0x144>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dea:	f003 0301 	and.w	r3, r3, #1
 8000dee:	613b      	str	r3, [r7, #16]
 8000df0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000df2:	4b39      	ldr	r3, [pc, #228]	@ (8000ed8 <MX_GPIO_Init+0x144>)
 8000df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000df6:	4a38      	ldr	r2, [pc, #224]	@ (8000ed8 <MX_GPIO_Init+0x144>)
 8000df8:	f043 0302 	orr.w	r3, r3, #2
 8000dfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dfe:	4b36      	ldr	r3, [pc, #216]	@ (8000ed8 <MX_GPIO_Init+0x144>)
 8000e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e02:	f003 0302 	and.w	r3, r3, #2
 8000e06:	60fb      	str	r3, [r7, #12]
 8000e08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e0a:	4b33      	ldr	r3, [pc, #204]	@ (8000ed8 <MX_GPIO_Init+0x144>)
 8000e0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e0e:	4a32      	ldr	r2, [pc, #200]	@ (8000ed8 <MX_GPIO_Init+0x144>)
 8000e10:	f043 0308 	orr.w	r3, r3, #8
 8000e14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e16:	4b30      	ldr	r3, [pc, #192]	@ (8000ed8 <MX_GPIO_Init+0x144>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e1a:	f003 0308 	and.w	r3, r3, #8
 8000e1e:	60bb      	str	r3, [r7, #8]
 8000e20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e22:	4b2d      	ldr	r3, [pc, #180]	@ (8000ed8 <MX_GPIO_Init+0x144>)
 8000e24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e26:	4a2c      	ldr	r2, [pc, #176]	@ (8000ed8 <MX_GPIO_Init+0x144>)
 8000e28:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e2e:	4b2a      	ldr	r3, [pc, #168]	@ (8000ed8 <MX_GPIO_Init+0x144>)
 8000e30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000e36:	607b      	str	r3, [r7, #4]
 8000e38:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000e40:	4826      	ldr	r0, [pc, #152]	@ (8000edc <MX_GPIO_Init+0x148>)
 8000e42:	f001 ff6f 	bl	8002d24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000e46:	2200      	movs	r2, #0
 8000e48:	2140      	movs	r1, #64	@ 0x40
 8000e4a:	4825      	ldr	r0, [pc, #148]	@ (8000ee0 <MX_GPIO_Init+0x14c>)
 8000e4c:	f001 ff6a 	bl	8002d24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000e50:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e56:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000e5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000e60:	f107 031c 	add.w	r3, r7, #28
 8000e64:	4619      	mov	r1, r3
 8000e66:	481f      	ldr	r0, [pc, #124]	@ (8000ee4 <MX_GPIO_Init+0x150>)
 8000e68:	f001 fdb0 	bl	80029cc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000e6c:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000e70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e72:	2301      	movs	r3, #1
 8000e74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e76:	2300      	movs	r3, #0
 8000e78:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e7e:	f107 031c 	add.w	r3, r7, #28
 8000e82:	4619      	mov	r1, r3
 8000e84:	4815      	ldr	r0, [pc, #84]	@ (8000edc <MX_GPIO_Init+0x148>)
 8000e86:	f001 fda1 	bl	80029cc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000e8a:	2340      	movs	r3, #64	@ 0x40
 8000e8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e92:	2300      	movs	r3, #0
 8000e94:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e96:	2300      	movs	r3, #0
 8000e98:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000e9a:	f107 031c 	add.w	r3, r7, #28
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	480f      	ldr	r0, [pc, #60]	@ (8000ee0 <MX_GPIO_Init+0x14c>)
 8000ea2:	f001 fd93 	bl	80029cc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000ea6:	2380      	movs	r3, #128	@ 0x80
 8000ea8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000eb2:	f107 031c 	add.w	r3, r7, #28
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	4809      	ldr	r0, [pc, #36]	@ (8000ee0 <MX_GPIO_Init+0x14c>)
 8000eba:	f001 fd87 	bl	80029cc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	2105      	movs	r1, #5
 8000ec2:	2028      	movs	r0, #40	@ 0x28
 8000ec4:	f001 fa0a 	bl	80022dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000ec8:	2028      	movs	r0, #40	@ 0x28
 8000eca:	f001 fa23 	bl	8002314 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000ece:	bf00      	nop
 8000ed0:	3730      	adds	r7, #48	@ 0x30
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	40023800 	.word	0x40023800
 8000edc:	40020400 	.word	0x40020400
 8000ee0:	40021800 	.word	0x40021800
 8000ee4:	40020800 	.word	0x40020800

08000ee8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	4603      	mov	r3, r0
 8000ef0:	80fb      	strh	r3, [r7, #6]

	if (GPIO_Pin == GPIO_PIN_13) {
 8000ef2:	88fb      	ldrh	r3, [r7, #6]
 8000ef4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000ef8:	d111      	bne.n	8000f1e <HAL_GPIO_EXTI_Callback+0x36>

		char *str1 = "Interrupcao Ativa\n";
 8000efa:	4b0b      	ldr	r3, [pc, #44]	@ (8000f28 <HAL_GPIO_EXTI_Callback+0x40>)
 8000efc:	60fb      	str	r3, [r7, #12]
		HAL_UART_Transmit(&huart3, (uint8_t *) str1,strlen (str1), HAL_MAX_DELAY);
 8000efe:	68f8      	ldr	r0, [r7, #12]
 8000f00:	f7ff f9ee 	bl	80002e0 <strlen>
 8000f04:	4603      	mov	r3, r0
 8000f06:	b29a      	uxth	r2, r3
 8000f08:	f04f 33ff 	mov.w	r3, #4294967295
 8000f0c:	68f9      	ldr	r1, [r7, #12]
 8000f0e:	4807      	ldr	r0, [pc, #28]	@ (8000f2c <HAL_GPIO_EXTI_Callback+0x44>)
 8000f10:	f003 fd1e 	bl	8004950 <HAL_UART_Transmit>

		osSemaphoreRelease(SemLiberaProdutorHandle);
 8000f14:	4b06      	ldr	r3, [pc, #24]	@ (8000f30 <HAL_GPIO_EXTI_Callback+0x48>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f004 ff61 	bl	8005de0 <osSemaphoreRelease>
	}
}
 8000f1e:	bf00      	nop
 8000f20:	3710      	adds	r7, #16
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	0800da84 	.word	0x0800da84
 8000f2c:	20000464 	.word	0x20000464
 8000f30:	200009d8 	.word	0x200009d8

08000f34 <Tarefa_produtora_fun>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Tarefa_produtora_fun */
void Tarefa_produtora_fun(void *argument)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b086      	sub	sp, #24
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	char *str1 = "Entrando na tarefa produtora...\n";
 8000f3c:	4b2a      	ldr	r3, [pc, #168]	@ (8000fe8 <Tarefa_produtora_fun+0xb4>)
 8000f3e:	613b      	str	r3, [r7, #16]
	char *str2 = "Saindo da tarefa produtora...\n";
 8000f40:	4b2a      	ldr	r3, [pc, #168]	@ (8000fec <Tarefa_produtora_fun+0xb8>)
 8000f42:	60fb      	str	r3, [r7, #12]
	int valor_adc;
  /* Infinite loop */
  for(;;)
  {

	if(osSemaphoreAcquire(SemLiberaProdutorHandle, osWaitForever) == osOK) {
 8000f44:	4b2a      	ldr	r3, [pc, #168]	@ (8000ff0 <Tarefa_produtora_fun+0xbc>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f04f 31ff 	mov.w	r1, #4294967295
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f004 fee1 	bl	8005d14 <osSemaphoreAcquire>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d142      	bne.n	8000fde <Tarefa_produtora_fun+0xaa>

		HAL_UART_Transmit(&huart3, (uint8_t *) str1, strlen(str1), HAL_MAX_DELAY);
 8000f58:	6938      	ldr	r0, [r7, #16]
 8000f5a:	f7ff f9c1 	bl	80002e0 <strlen>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	b29a      	uxth	r2, r3
 8000f62:	f04f 33ff 	mov.w	r3, #4294967295
 8000f66:	6939      	ldr	r1, [r7, #16]
 8000f68:	4822      	ldr	r0, [pc, #136]	@ (8000ff4 <Tarefa_produtora_fun+0xc0>)
 8000f6a:	f003 fcf1 	bl	8004950 <HAL_UART_Transmit>

		for (int i=0; i<1024; i++) {
 8000f6e:	2300      	movs	r3, #0
 8000f70:	617b      	str	r3, [r7, #20]
 8000f72:	e020      	b.n	8000fb6 <Tarefa_produtora_fun+0x82>
			HAL_ADC_Start(&hadc1);
 8000f74:	4820      	ldr	r0, [pc, #128]	@ (8000ff8 <Tarefa_produtora_fun+0xc4>)
 8000f76:	f000 fd0b 	bl	8001990 <HAL_ADC_Start>
			if (HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK) {
 8000f7a:	2164      	movs	r1, #100	@ 0x64
 8000f7c:	481e      	ldr	r0, [pc, #120]	@ (8000ff8 <Tarefa_produtora_fun+0xc4>)
 8000f7e:	f000 fe09 	bl	8001b94 <HAL_ADC_PollForConversion>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d10d      	bne.n	8000fa4 <Tarefa_produtora_fun+0x70>
				valor_adc = HAL_ADC_GetValue(&hadc1);
 8000f88:	481b      	ldr	r0, [pc, #108]	@ (8000ff8 <Tarefa_produtora_fun+0xc4>)
 8000f8a:	f000 fe8e 	bl	8001caa <HAL_ADC_GetValue>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	60bb      	str	r3, [r7, #8]
				osMessageQueuePut(FilaRobsonHandle, &valor_adc, 0, osWaitForever);
 8000f92:	4b1a      	ldr	r3, [pc, #104]	@ (8000ffc <Tarefa_produtora_fun+0xc8>)
 8000f94:	6818      	ldr	r0, [r3, #0]
 8000f96:	f107 0108 	add.w	r1, r7, #8
 8000f9a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	f004 fffc 	bl	8005f9c <osMessageQueuePut>
			}
			HAL_ADC_Stop(&hadc1);
 8000fa4:	4814      	ldr	r0, [pc, #80]	@ (8000ff8 <Tarefa_produtora_fun+0xc4>)
 8000fa6:	f000 fdc1 	bl	8001b2c <HAL_ADC_Stop>
			osDelay(1);
 8000faa:	2001      	movs	r0, #1
 8000fac:	f004 fde8 	bl	8005b80 <osDelay>
		for (int i=0; i<1024; i++) {
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	617b      	str	r3, [r7, #20]
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000fbc:	dbda      	blt.n	8000f74 <Tarefa_produtora_fun+0x40>
		}

		HAL_UART_Transmit(&huart3, (uint8_t *) str2, strlen(str2), HAL_MAX_DELAY);
 8000fbe:	68f8      	ldr	r0, [r7, #12]
 8000fc0:	f7ff f98e 	bl	80002e0 <strlen>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	b29a      	uxth	r2, r3
 8000fc8:	f04f 33ff 	mov.w	r3, #4294967295
 8000fcc:	68f9      	ldr	r1, [r7, #12]
 8000fce:	4809      	ldr	r0, [pc, #36]	@ (8000ff4 <Tarefa_produtora_fun+0xc0>)
 8000fd0:	f003 fcbe 	bl	8004950 <HAL_UART_Transmit>

		osSemaphoreRelease(SemLiberaConsumidorHandle);
 8000fd4:	4b0a      	ldr	r3, [pc, #40]	@ (8001000 <Tarefa_produtora_fun+0xcc>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f004 ff01 	bl	8005de0 <osSemaphoreRelease>
	}
    osDelay(1000);
 8000fde:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000fe2:	f004 fdcd 	bl	8005b80 <osDelay>
	if(osSemaphoreAcquire(SemLiberaProdutorHandle, osWaitForever) == osOK) {
 8000fe6:	e7ad      	b.n	8000f44 <Tarefa_produtora_fun+0x10>
 8000fe8:	0800da98 	.word	0x0800da98
 8000fec:	0800dabc 	.word	0x0800dabc
 8000ff0:	200009d8 	.word	0x200009d8
 8000ff4:	20000464 	.word	0x20000464
 8000ff8:	2000036c 	.word	0x2000036c
 8000ffc:	200009d4 	.word	0x200009d4
 8001000:	200009dc 	.word	0x200009dc

08001004 <Tarefa_consumidora_fun>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Tarefa_consumidora_fun */
void Tarefa_consumidora_fun(void *argument)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b0a8      	sub	sp, #160	@ 0xa0
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Tarefa_consumidora_fun */
	char *str1 = "Entrando na tarefa consumidora...\n";
 800100c:	4b37      	ldr	r3, [pc, #220]	@ (80010ec <Tarefa_consumidora_fun+0xe8>)
 800100e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
	char *str2 = "Saindo da tarefa consumidora...\n";
 8001012:	4b37      	ldr	r3, [pc, #220]	@ (80010f0 <Tarefa_consumidora_fun+0xec>)
 8001014:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

	uint16_t recebido;
	uint32_t soma = 0;
 8001018:	2300      	movs	r3, #0
 800101a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

  /* Infinite loop */
  for(;;)
  {

	if (osSemaphoreAcquire(SemLiberaConsumidorHandle, osWaitForever) == osOK) {
 800101e:	4b35      	ldr	r3, [pc, #212]	@ (80010f4 <Tarefa_consumidora_fun+0xf0>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f04f 31ff 	mov.w	r1, #4294967295
 8001026:	4618      	mov	r0, r3
 8001028:	f004 fe74 	bl	8005d14 <osSemaphoreAcquire>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d156      	bne.n	80010e0 <Tarefa_consumidora_fun+0xdc>

		HAL_UART_Transmit(&huart3, (uint8_t *) str1, strlen(str1), HAL_MAX_DELAY);
 8001032:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 8001036:	f7ff f953 	bl	80002e0 <strlen>
 800103a:	4603      	mov	r3, r0
 800103c:	b29a      	uxth	r2, r3
 800103e:	f04f 33ff 	mov.w	r3, #4294967295
 8001042:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 8001046:	482c      	ldr	r0, [pc, #176]	@ (80010f8 <Tarefa_consumidora_fun+0xf4>)
 8001048:	f003 fc82 	bl	8004950 <HAL_UART_Transmit>

		soma = 0;
 800104c:	2300      	movs	r3, #0
 800104e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
		for (int i=0; i<1024; i++) {
 8001052:	2300      	movs	r3, #0
 8001054:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001058:	e015      	b.n	8001086 <Tarefa_consumidora_fun+0x82>
			osMessageQueueGet(FilaRobsonHandle, &recebido, NULL, osWaitForever);
 800105a:	4b28      	ldr	r3, [pc, #160]	@ (80010fc <Tarefa_consumidora_fun+0xf8>)
 800105c:	6818      	ldr	r0, [r3, #0]
 800105e:	f107 018c 	add.w	r1, r7, #140	@ 0x8c
 8001062:	f04f 33ff 	mov.w	r3, #4294967295
 8001066:	2200      	movs	r2, #0
 8001068:	f005 f80c 	bl	8006084 <osMessageQueueGet>
			soma += recebido;
 800106c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 8001070:	461a      	mov	r2, r3
 8001072:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001076:	4413      	add	r3, r2
 8001078:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
		for (int i=0; i<1024; i++) {
 800107c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001080:	3301      	adds	r3, #1
 8001082:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001086:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800108a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800108e:	dbe4      	blt.n	800105a <Tarefa_consumidora_fun+0x56>
		}

		media = soma / 1024;
 8001090:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001094:	0a9b      	lsrs	r3, r3, #10
 8001096:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e

		snprintf(msg, sizeof(msg), "Media das amostras: %u\n", media);
 800109a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800109e:	f107 000c 	add.w	r0, r7, #12
 80010a2:	4a17      	ldr	r2, [pc, #92]	@ (8001100 <Tarefa_consumidora_fun+0xfc>)
 80010a4:	2180      	movs	r1, #128	@ 0x80
 80010a6:	f009 f8a5 	bl	800a1f4 <sniprintf>
		HAL_UART_Transmit(&huart3, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 80010aa:	f107 030c 	add.w	r3, r7, #12
 80010ae:	4618      	mov	r0, r3
 80010b0:	f7ff f916 	bl	80002e0 <strlen>
 80010b4:	4603      	mov	r3, r0
 80010b6:	b29a      	uxth	r2, r3
 80010b8:	f107 010c 	add.w	r1, r7, #12
 80010bc:	f04f 33ff 	mov.w	r3, #4294967295
 80010c0:	480d      	ldr	r0, [pc, #52]	@ (80010f8 <Tarefa_consumidora_fun+0xf4>)
 80010c2:	f003 fc45 	bl	8004950 <HAL_UART_Transmit>

		HAL_UART_Transmit(&huart3, (uint8_t *) str2, strlen(str2), HAL_MAX_DELAY);
 80010c6:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 80010ca:	f7ff f909 	bl	80002e0 <strlen>
 80010ce:	4603      	mov	r3, r0
 80010d0:	b29a      	uxth	r2, r3
 80010d2:	f04f 33ff 	mov.w	r3, #4294967295
 80010d6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80010da:	4807      	ldr	r0, [pc, #28]	@ (80010f8 <Tarefa_consumidora_fun+0xf4>)
 80010dc:	f003 fc38 	bl	8004950 <HAL_UART_Transmit>
	}
    osDelay(1000);
 80010e0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80010e4:	f004 fd4c 	bl	8005b80 <osDelay>
	if (osSemaphoreAcquire(SemLiberaConsumidorHandle, osWaitForever) == osOK) {
 80010e8:	e799      	b.n	800101e <Tarefa_consumidora_fun+0x1a>
 80010ea:	bf00      	nop
 80010ec:	0800dadc 	.word	0x0800dadc
 80010f0:	0800db00 	.word	0x0800db00
 80010f4:	200009dc 	.word	0x200009dc
 80010f8:	20000464 	.word	0x20000464
 80010fc:	200009d4 	.word	0x200009d4
 8001100:	0800db24 	.word	0x0800db24

08001104 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a04      	ldr	r2, [pc, #16]	@ (8001124 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d101      	bne.n	800111a <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8001116:	f000 fbb3 	bl	8001880 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800111a:	bf00      	nop
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	40010000 	.word	0x40010000

08001128 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800112c:	b672      	cpsid	i
}
 800112e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001130:	bf00      	nop
 8001132:	e7fd      	b.n	8001130 <Error_Handler+0x8>

08001134 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800113a:	4b11      	ldr	r3, [pc, #68]	@ (8001180 <HAL_MspInit+0x4c>)
 800113c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800113e:	4a10      	ldr	r2, [pc, #64]	@ (8001180 <HAL_MspInit+0x4c>)
 8001140:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001144:	6413      	str	r3, [r2, #64]	@ 0x40
 8001146:	4b0e      	ldr	r3, [pc, #56]	@ (8001180 <HAL_MspInit+0x4c>)
 8001148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800114a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800114e:	607b      	str	r3, [r7, #4]
 8001150:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001152:	4b0b      	ldr	r3, [pc, #44]	@ (8001180 <HAL_MspInit+0x4c>)
 8001154:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001156:	4a0a      	ldr	r2, [pc, #40]	@ (8001180 <HAL_MspInit+0x4c>)
 8001158:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800115c:	6453      	str	r3, [r2, #68]	@ 0x44
 800115e:	4b08      	ldr	r3, [pc, #32]	@ (8001180 <HAL_MspInit+0x4c>)
 8001160:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001162:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001166:	603b      	str	r3, [r7, #0]
 8001168:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800116a:	2200      	movs	r2, #0
 800116c:	210f      	movs	r1, #15
 800116e:	f06f 0001 	mvn.w	r0, #1
 8001172:	f001 f8b3 	bl	80022dc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001176:	bf00      	nop
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	40023800 	.word	0x40023800

08001184 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b08a      	sub	sp, #40	@ 0x28
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800118c:	f107 0314 	add.w	r3, r7, #20
 8001190:	2200      	movs	r2, #0
 8001192:	601a      	str	r2, [r3, #0]
 8001194:	605a      	str	r2, [r3, #4]
 8001196:	609a      	str	r2, [r3, #8]
 8001198:	60da      	str	r2, [r3, #12]
 800119a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a15      	ldr	r2, [pc, #84]	@ (80011f8 <HAL_ADC_MspInit+0x74>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d123      	bne.n	80011ee <HAL_ADC_MspInit+0x6a>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80011a6:	4b15      	ldr	r3, [pc, #84]	@ (80011fc <HAL_ADC_MspInit+0x78>)
 80011a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011aa:	4a14      	ldr	r2, [pc, #80]	@ (80011fc <HAL_ADC_MspInit+0x78>)
 80011ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80011b2:	4b12      	ldr	r3, [pc, #72]	@ (80011fc <HAL_ADC_MspInit+0x78>)
 80011b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011ba:	613b      	str	r3, [r7, #16]
 80011bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011be:	4b0f      	ldr	r3, [pc, #60]	@ (80011fc <HAL_ADC_MspInit+0x78>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c2:	4a0e      	ldr	r2, [pc, #56]	@ (80011fc <HAL_ADC_MspInit+0x78>)
 80011c4:	f043 0301 	orr.w	r3, r3, #1
 80011c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ca:	4b0c      	ldr	r3, [pc, #48]	@ (80011fc <HAL_ADC_MspInit+0x78>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ce:	f003 0301 	and.w	r3, r3, #1
 80011d2:	60fb      	str	r3, [r7, #12]
 80011d4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80011d6:	2301      	movs	r3, #1
 80011d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011da:	2303      	movs	r3, #3
 80011dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011de:	2300      	movs	r3, #0
 80011e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011e2:	f107 0314 	add.w	r3, r7, #20
 80011e6:	4619      	mov	r1, r3
 80011e8:	4805      	ldr	r0, [pc, #20]	@ (8001200 <HAL_ADC_MspInit+0x7c>)
 80011ea:	f001 fbef 	bl	80029cc <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80011ee:	bf00      	nop
 80011f0:	3728      	adds	r7, #40	@ 0x28
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	40012000 	.word	0x40012000
 80011fc:	40023800 	.word	0x40023800
 8001200:	40020000 	.word	0x40020000

08001204 <HAL_ETH_MspInit>:
  * This function configures the hardware resources used in this example
  * @param heth: ETH handle pointer
  * @retval None
  */
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b08e      	sub	sp, #56	@ 0x38
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800120c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001210:	2200      	movs	r2, #0
 8001212:	601a      	str	r2, [r3, #0]
 8001214:	605a      	str	r2, [r3, #4]
 8001216:	609a      	str	r2, [r3, #8]
 8001218:	60da      	str	r2, [r3, #12]
 800121a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a4e      	ldr	r2, [pc, #312]	@ (800135c <HAL_ETH_MspInit+0x158>)
 8001222:	4293      	cmp	r3, r2
 8001224:	f040 8096 	bne.w	8001354 <HAL_ETH_MspInit+0x150>
  {
    /* USER CODE BEGIN ETH_MspInit 0 */

    /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001228:	4b4d      	ldr	r3, [pc, #308]	@ (8001360 <HAL_ETH_MspInit+0x15c>)
 800122a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800122c:	4a4c      	ldr	r2, [pc, #304]	@ (8001360 <HAL_ETH_MspInit+0x15c>)
 800122e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001232:	6313      	str	r3, [r2, #48]	@ 0x30
 8001234:	4b4a      	ldr	r3, [pc, #296]	@ (8001360 <HAL_ETH_MspInit+0x15c>)
 8001236:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001238:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800123c:	623b      	str	r3, [r7, #32]
 800123e:	6a3b      	ldr	r3, [r7, #32]
 8001240:	4b47      	ldr	r3, [pc, #284]	@ (8001360 <HAL_ETH_MspInit+0x15c>)
 8001242:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001244:	4a46      	ldr	r2, [pc, #280]	@ (8001360 <HAL_ETH_MspInit+0x15c>)
 8001246:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800124a:	6313      	str	r3, [r2, #48]	@ 0x30
 800124c:	4b44      	ldr	r3, [pc, #272]	@ (8001360 <HAL_ETH_MspInit+0x15c>)
 800124e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001250:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001254:	61fb      	str	r3, [r7, #28]
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	4b41      	ldr	r3, [pc, #260]	@ (8001360 <HAL_ETH_MspInit+0x15c>)
 800125a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800125c:	4a40      	ldr	r2, [pc, #256]	@ (8001360 <HAL_ETH_MspInit+0x15c>)
 800125e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001262:	6313      	str	r3, [r2, #48]	@ 0x30
 8001264:	4b3e      	ldr	r3, [pc, #248]	@ (8001360 <HAL_ETH_MspInit+0x15c>)
 8001266:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001268:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800126c:	61bb      	str	r3, [r7, #24]
 800126e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001270:	4b3b      	ldr	r3, [pc, #236]	@ (8001360 <HAL_ETH_MspInit+0x15c>)
 8001272:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001274:	4a3a      	ldr	r2, [pc, #232]	@ (8001360 <HAL_ETH_MspInit+0x15c>)
 8001276:	f043 0304 	orr.w	r3, r3, #4
 800127a:	6313      	str	r3, [r2, #48]	@ 0x30
 800127c:	4b38      	ldr	r3, [pc, #224]	@ (8001360 <HAL_ETH_MspInit+0x15c>)
 800127e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001280:	f003 0304 	and.w	r3, r3, #4
 8001284:	617b      	str	r3, [r7, #20]
 8001286:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001288:	4b35      	ldr	r3, [pc, #212]	@ (8001360 <HAL_ETH_MspInit+0x15c>)
 800128a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800128c:	4a34      	ldr	r2, [pc, #208]	@ (8001360 <HAL_ETH_MspInit+0x15c>)
 800128e:	f043 0301 	orr.w	r3, r3, #1
 8001292:	6313      	str	r3, [r2, #48]	@ 0x30
 8001294:	4b32      	ldr	r3, [pc, #200]	@ (8001360 <HAL_ETH_MspInit+0x15c>)
 8001296:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001298:	f003 0301 	and.w	r3, r3, #1
 800129c:	613b      	str	r3, [r7, #16]
 800129e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012a0:	4b2f      	ldr	r3, [pc, #188]	@ (8001360 <HAL_ETH_MspInit+0x15c>)
 80012a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a4:	4a2e      	ldr	r2, [pc, #184]	@ (8001360 <HAL_ETH_MspInit+0x15c>)
 80012a6:	f043 0302 	orr.w	r3, r3, #2
 80012aa:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ac:	4b2c      	ldr	r3, [pc, #176]	@ (8001360 <HAL_ETH_MspInit+0x15c>)
 80012ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012b0:	f003 0302 	and.w	r3, r3, #2
 80012b4:	60fb      	str	r3, [r7, #12]
 80012b6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80012b8:	4b29      	ldr	r3, [pc, #164]	@ (8001360 <HAL_ETH_MspInit+0x15c>)
 80012ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012bc:	4a28      	ldr	r2, [pc, #160]	@ (8001360 <HAL_ETH_MspInit+0x15c>)
 80012be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80012c2:	6313      	str	r3, [r2, #48]	@ 0x30
 80012c4:	4b26      	ldr	r3, [pc, #152]	@ (8001360 <HAL_ETH_MspInit+0x15c>)
 80012c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80012cc:	60bb      	str	r3, [r7, #8]
 80012ce:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80012d0:	2332      	movs	r3, #50	@ 0x32
 80012d2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d4:	2302      	movs	r3, #2
 80012d6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d8:	2300      	movs	r3, #0
 80012da:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012dc:	2303      	movs	r3, #3
 80012de:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80012e0:	230b      	movs	r3, #11
 80012e2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012e8:	4619      	mov	r1, r3
 80012ea:	481e      	ldr	r0, [pc, #120]	@ (8001364 <HAL_ETH_MspInit+0x160>)
 80012ec:	f001 fb6e 	bl	80029cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80012f0:	2386      	movs	r3, #134	@ 0x86
 80012f2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f4:	2302      	movs	r3, #2
 80012f6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f8:	2300      	movs	r3, #0
 80012fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012fc:	2303      	movs	r3, #3
 80012fe:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001300:	230b      	movs	r3, #11
 8001302:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001304:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001308:	4619      	mov	r1, r3
 800130a:	4817      	ldr	r0, [pc, #92]	@ (8001368 <HAL_ETH_MspInit+0x164>)
 800130c:	f001 fb5e 	bl	80029cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001310:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001314:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001316:	2302      	movs	r3, #2
 8001318:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131a:	2300      	movs	r3, #0
 800131c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800131e:	2303      	movs	r3, #3
 8001320:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001322:	230b      	movs	r3, #11
 8001324:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001326:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800132a:	4619      	mov	r1, r3
 800132c:	480f      	ldr	r0, [pc, #60]	@ (800136c <HAL_ETH_MspInit+0x168>)
 800132e:	f001 fb4d 	bl	80029cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001332:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8001336:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001338:	2302      	movs	r3, #2
 800133a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133c:	2300      	movs	r3, #0
 800133e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001340:	2303      	movs	r3, #3
 8001342:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001344:	230b      	movs	r3, #11
 8001346:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001348:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800134c:	4619      	mov	r1, r3
 800134e:	4808      	ldr	r0, [pc, #32]	@ (8001370 <HAL_ETH_MspInit+0x16c>)
 8001350:	f001 fb3c 	bl	80029cc <HAL_GPIO_Init>

    /* USER CODE END ETH_MspInit 1 */

  }

}
 8001354:	bf00      	nop
 8001356:	3738      	adds	r7, #56	@ 0x38
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	40028000 	.word	0x40028000
 8001360:	40023800 	.word	0x40023800
 8001364:	40020800 	.word	0x40020800
 8001368:	40020000 	.word	0x40020000
 800136c:	40020400 	.word	0x40020400
 8001370:	40021800 	.word	0x40021800

08001374 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b0ae      	sub	sp, #184	@ 0xb8
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800137c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001380:	2200      	movs	r2, #0
 8001382:	601a      	str	r2, [r3, #0]
 8001384:	605a      	str	r2, [r3, #4]
 8001386:	609a      	str	r2, [r3, #8]
 8001388:	60da      	str	r2, [r3, #12]
 800138a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800138c:	f107 0314 	add.w	r3, r7, #20
 8001390:	2290      	movs	r2, #144	@ 0x90
 8001392:	2100      	movs	r1, #0
 8001394:	4618      	mov	r0, r3
 8001396:	f008 ffc8 	bl	800a32a <memset>
  if(huart->Instance==USART3)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4a22      	ldr	r2, [pc, #136]	@ (8001428 <HAL_UART_MspInit+0xb4>)
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d13c      	bne.n	800141e <HAL_UART_MspInit+0xaa>

    /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80013a4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80013a8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80013aa:	2300      	movs	r3, #0
 80013ac:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013ae:	f107 0314 	add.w	r3, r7, #20
 80013b2:	4618      	mov	r0, r3
 80013b4:	f002 fb88 	bl	8003ac8 <HAL_RCCEx_PeriphCLKConfig>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80013be:	f7ff feb3 	bl	8001128 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80013c2:	4b1a      	ldr	r3, [pc, #104]	@ (800142c <HAL_UART_MspInit+0xb8>)
 80013c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013c6:	4a19      	ldr	r2, [pc, #100]	@ (800142c <HAL_UART_MspInit+0xb8>)
 80013c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80013cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80013ce:	4b17      	ldr	r3, [pc, #92]	@ (800142c <HAL_UART_MspInit+0xb8>)
 80013d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013d2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80013d6:	613b      	str	r3, [r7, #16]
 80013d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013da:	4b14      	ldr	r3, [pc, #80]	@ (800142c <HAL_UART_MspInit+0xb8>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013de:	4a13      	ldr	r2, [pc, #76]	@ (800142c <HAL_UART_MspInit+0xb8>)
 80013e0:	f043 0308 	orr.w	r3, r3, #8
 80013e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013e6:	4b11      	ldr	r3, [pc, #68]	@ (800142c <HAL_UART_MspInit+0xb8>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ea:	f003 0308 	and.w	r3, r3, #8
 80013ee:	60fb      	str	r3, [r7, #12]
 80013f0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80013f2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80013f6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013fa:	2302      	movs	r3, #2
 80013fc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001400:	2300      	movs	r3, #0
 8001402:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001406:	2303      	movs	r3, #3
 8001408:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800140c:	2307      	movs	r3, #7
 800140e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001412:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001416:	4619      	mov	r1, r3
 8001418:	4805      	ldr	r0, [pc, #20]	@ (8001430 <HAL_UART_MspInit+0xbc>)
 800141a:	f001 fad7 	bl	80029cc <HAL_GPIO_Init>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 800141e:	bf00      	nop
 8001420:	37b8      	adds	r7, #184	@ 0xb8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	40004800 	.word	0x40004800
 800142c:	40023800 	.word	0x40023800
 8001430:	40020c00 	.word	0x40020c00

08001434 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b0ae      	sub	sp, #184	@ 0xb8
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800143c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001440:	2200      	movs	r2, #0
 8001442:	601a      	str	r2, [r3, #0]
 8001444:	605a      	str	r2, [r3, #4]
 8001446:	609a      	str	r2, [r3, #8]
 8001448:	60da      	str	r2, [r3, #12]
 800144a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800144c:	f107 0314 	add.w	r3, r7, #20
 8001450:	2290      	movs	r2, #144	@ 0x90
 8001452:	2100      	movs	r1, #0
 8001454:	4618      	mov	r0, r3
 8001456:	f008 ff68 	bl	800a32a <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001462:	d159      	bne.n	8001518 <HAL_PCD_MspInit+0xe4>

    /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001464:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001468:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800146a:	2300      	movs	r3, #0
 800146c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001470:	f107 0314 	add.w	r3, r7, #20
 8001474:	4618      	mov	r0, r3
 8001476:	f002 fb27 	bl	8003ac8 <HAL_RCCEx_PeriphCLKConfig>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001480:	f7ff fe52 	bl	8001128 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001484:	4b26      	ldr	r3, [pc, #152]	@ (8001520 <HAL_PCD_MspInit+0xec>)
 8001486:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001488:	4a25      	ldr	r2, [pc, #148]	@ (8001520 <HAL_PCD_MspInit+0xec>)
 800148a:	f043 0301 	orr.w	r3, r3, #1
 800148e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001490:	4b23      	ldr	r3, [pc, #140]	@ (8001520 <HAL_PCD_MspInit+0xec>)
 8001492:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001494:	f003 0301 	and.w	r3, r3, #1
 8001498:	613b      	str	r3, [r7, #16]
 800149a:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800149c:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 80014a0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a4:	2302      	movs	r3, #2
 80014a6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014aa:	2300      	movs	r3, #0
 80014ac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014b0:	2303      	movs	r3, #3
 80014b2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80014b6:	230a      	movs	r3, #10
 80014b8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014bc:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80014c0:	4619      	mov	r1, r3
 80014c2:	4818      	ldr	r0, [pc, #96]	@ (8001524 <HAL_PCD_MspInit+0xf0>)
 80014c4:	f001 fa82 	bl	80029cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80014c8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80014cc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014d0:	2300      	movs	r3, #0
 80014d2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d6:	2300      	movs	r3, #0
 80014d8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80014dc:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80014e0:	4619      	mov	r1, r3
 80014e2:	4810      	ldr	r0, [pc, #64]	@ (8001524 <HAL_PCD_MspInit+0xf0>)
 80014e4:	f001 fa72 	bl	80029cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80014e8:	4b0d      	ldr	r3, [pc, #52]	@ (8001520 <HAL_PCD_MspInit+0xec>)
 80014ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80014ec:	4a0c      	ldr	r2, [pc, #48]	@ (8001520 <HAL_PCD_MspInit+0xec>)
 80014ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014f2:	6353      	str	r3, [r2, #52]	@ 0x34
 80014f4:	4b0a      	ldr	r3, [pc, #40]	@ (8001520 <HAL_PCD_MspInit+0xec>)
 80014f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80014f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014fc:	60fb      	str	r3, [r7, #12]
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	4b07      	ldr	r3, [pc, #28]	@ (8001520 <HAL_PCD_MspInit+0xec>)
 8001502:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001504:	4a06      	ldr	r2, [pc, #24]	@ (8001520 <HAL_PCD_MspInit+0xec>)
 8001506:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800150a:	6453      	str	r3, [r2, #68]	@ 0x44
 800150c:	4b04      	ldr	r3, [pc, #16]	@ (8001520 <HAL_PCD_MspInit+0xec>)
 800150e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001510:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001514:	60bb      	str	r3, [r7, #8]
 8001516:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8001518:	bf00      	nop
 800151a:	37b8      	adds	r7, #184	@ 0xb8
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	40023800 	.word	0x40023800
 8001524:	40020000 	.word	0x40020000

08001528 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b08c      	sub	sp, #48	@ 0x30
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001530:	2300      	movs	r3, #0
 8001532:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001534:	2300      	movs	r3, #0
 8001536:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001538:	4b2e      	ldr	r3, [pc, #184]	@ (80015f4 <HAL_InitTick+0xcc>)
 800153a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800153c:	4a2d      	ldr	r2, [pc, #180]	@ (80015f4 <HAL_InitTick+0xcc>)
 800153e:	f043 0301 	orr.w	r3, r3, #1
 8001542:	6453      	str	r3, [r2, #68]	@ 0x44
 8001544:	4b2b      	ldr	r3, [pc, #172]	@ (80015f4 <HAL_InitTick+0xcc>)
 8001546:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001548:	f003 0301 	and.w	r3, r3, #1
 800154c:	60bb      	str	r3, [r7, #8]
 800154e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001550:	f107 020c 	add.w	r2, r7, #12
 8001554:	f107 0310 	add.w	r3, r7, #16
 8001558:	4611      	mov	r1, r2
 800155a:	4618      	mov	r0, r3
 800155c:	f002 fa82 	bl	8003a64 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001560:	f002 fa6c 	bl	8003a3c <HAL_RCC_GetPCLK2Freq>
 8001564:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001566:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001568:	4a23      	ldr	r2, [pc, #140]	@ (80015f8 <HAL_InitTick+0xd0>)
 800156a:	fba2 2303 	umull	r2, r3, r2, r3
 800156e:	0c9b      	lsrs	r3, r3, #18
 8001570:	3b01      	subs	r3, #1
 8001572:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001574:	4b21      	ldr	r3, [pc, #132]	@ (80015fc <HAL_InitTick+0xd4>)
 8001576:	4a22      	ldr	r2, [pc, #136]	@ (8001600 <HAL_InitTick+0xd8>)
 8001578:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800157a:	4b20      	ldr	r3, [pc, #128]	@ (80015fc <HAL_InitTick+0xd4>)
 800157c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001580:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001582:	4a1e      	ldr	r2, [pc, #120]	@ (80015fc <HAL_InitTick+0xd4>)
 8001584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001586:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001588:	4b1c      	ldr	r3, [pc, #112]	@ (80015fc <HAL_InitTick+0xd4>)
 800158a:	2200      	movs	r2, #0
 800158c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800158e:	4b1b      	ldr	r3, [pc, #108]	@ (80015fc <HAL_InitTick+0xd4>)
 8001590:	2200      	movs	r2, #0
 8001592:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001594:	4b19      	ldr	r3, [pc, #100]	@ (80015fc <HAL_InitTick+0xd4>)
 8001596:	2200      	movs	r2, #0
 8001598:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800159a:	4818      	ldr	r0, [pc, #96]	@ (80015fc <HAL_InitTick+0xd4>)
 800159c:	f002 febc 	bl	8004318 <HAL_TIM_Base_Init>
 80015a0:	4603      	mov	r3, r0
 80015a2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80015a6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d11b      	bne.n	80015e6 <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80015ae:	4813      	ldr	r0, [pc, #76]	@ (80015fc <HAL_InitTick+0xd4>)
 80015b0:	f002 ff14 	bl	80043dc <HAL_TIM_Base_Start_IT>
 80015b4:	4603      	mov	r3, r0
 80015b6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80015ba:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d111      	bne.n	80015e6 <HAL_InitTick+0xbe>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80015c2:	2019      	movs	r0, #25
 80015c4:	f000 fea6 	bl	8002314 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2b0f      	cmp	r3, #15
 80015cc:	d808      	bhi.n	80015e0 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80015ce:	2200      	movs	r2, #0
 80015d0:	6879      	ldr	r1, [r7, #4]
 80015d2:	2019      	movs	r0, #25
 80015d4:	f000 fe82 	bl	80022dc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80015d8:	4a0a      	ldr	r2, [pc, #40]	@ (8001604 <HAL_InitTick+0xdc>)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6013      	str	r3, [r2, #0]
 80015de:	e002      	b.n	80015e6 <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 80015e0:	2301      	movs	r3, #1
 80015e2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80015e6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3730      	adds	r7, #48	@ 0x30
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	40023800 	.word	0x40023800
 80015f8:	431bde83 	.word	0x431bde83
 80015fc:	200009e8 	.word	0x200009e8
 8001600:	40010000 	.word	0x40010000
 8001604:	20000004 	.word	0x20000004

08001608 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800160c:	bf00      	nop
 800160e:	e7fd      	b.n	800160c <NMI_Handler+0x4>

08001610 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001614:	bf00      	nop
 8001616:	e7fd      	b.n	8001614 <HardFault_Handler+0x4>

08001618 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800161c:	bf00      	nop
 800161e:	e7fd      	b.n	800161c <MemManage_Handler+0x4>

08001620 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001624:	bf00      	nop
 8001626:	e7fd      	b.n	8001624 <BusFault_Handler+0x4>

08001628 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800162c:	bf00      	nop
 800162e:	e7fd      	b.n	800162c <UsageFault_Handler+0x4>

08001630 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001634:	bf00      	nop
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
	...

08001640 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001644:	4802      	ldr	r0, [pc, #8]	@ (8001650 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001646:	f002 ff41 	bl	80044cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800164a:	bf00      	nop
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	200009e8 	.word	0x200009e8

08001654 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8001658:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800165c:	f001 fb7c 	bl	8002d58 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001660:	bf00      	nop
 8001662:	bd80      	pop	{r7, pc}

08001664 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  return 1;
 8001668:	2301      	movs	r3, #1
}
 800166a:	4618      	mov	r0, r3
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr

08001674 <_kill>:

int _kill(int pid, int sig)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
 800167c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800167e:	f008 ff05 	bl	800a48c <__errno>
 8001682:	4603      	mov	r3, r0
 8001684:	2216      	movs	r2, #22
 8001686:	601a      	str	r2, [r3, #0]
  return -1;
 8001688:	f04f 33ff 	mov.w	r3, #4294967295
}
 800168c:	4618      	mov	r0, r3
 800168e:	3708      	adds	r7, #8
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}

08001694 <_exit>:

void _exit (int status)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800169c:	f04f 31ff 	mov.w	r1, #4294967295
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	f7ff ffe7 	bl	8001674 <_kill>
  while (1) {}    /* Make sure we hang here */
 80016a6:	bf00      	nop
 80016a8:	e7fd      	b.n	80016a6 <_exit+0x12>

080016aa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016aa:	b580      	push	{r7, lr}
 80016ac:	b086      	sub	sp, #24
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	60f8      	str	r0, [r7, #12]
 80016b2:	60b9      	str	r1, [r7, #8]
 80016b4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016b6:	2300      	movs	r3, #0
 80016b8:	617b      	str	r3, [r7, #20]
 80016ba:	e00a      	b.n	80016d2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80016bc:	f3af 8000 	nop.w
 80016c0:	4601      	mov	r1, r0
 80016c2:	68bb      	ldr	r3, [r7, #8]
 80016c4:	1c5a      	adds	r2, r3, #1
 80016c6:	60ba      	str	r2, [r7, #8]
 80016c8:	b2ca      	uxtb	r2, r1
 80016ca:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	3301      	adds	r3, #1
 80016d0:	617b      	str	r3, [r7, #20]
 80016d2:	697a      	ldr	r2, [r7, #20]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	429a      	cmp	r2, r3
 80016d8:	dbf0      	blt.n	80016bc <_read+0x12>
  }

  return len;
 80016da:	687b      	ldr	r3, [r7, #4]
}
 80016dc:	4618      	mov	r0, r3
 80016de:	3718      	adds	r7, #24
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}

080016e4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b086      	sub	sp, #24
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	60f8      	str	r0, [r7, #12]
 80016ec:	60b9      	str	r1, [r7, #8]
 80016ee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016f0:	2300      	movs	r3, #0
 80016f2:	617b      	str	r3, [r7, #20]
 80016f4:	e009      	b.n	800170a <_write+0x26>
  {
    __io_putchar(*ptr++);
 80016f6:	68bb      	ldr	r3, [r7, #8]
 80016f8:	1c5a      	adds	r2, r3, #1
 80016fa:	60ba      	str	r2, [r7, #8]
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	4618      	mov	r0, r3
 8001700:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	3301      	adds	r3, #1
 8001708:	617b      	str	r3, [r7, #20]
 800170a:	697a      	ldr	r2, [r7, #20]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	429a      	cmp	r2, r3
 8001710:	dbf1      	blt.n	80016f6 <_write+0x12>
  }
  return len;
 8001712:	687b      	ldr	r3, [r7, #4]
}
 8001714:	4618      	mov	r0, r3
 8001716:	3718      	adds	r7, #24
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}

0800171c <_close>:

int _close(int file)
{
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001724:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001728:	4618      	mov	r0, r3
 800172a:	370c      	adds	r7, #12
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr

08001734 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
 800173c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001744:	605a      	str	r2, [r3, #4]
  return 0;
 8001746:	2300      	movs	r3, #0
}
 8001748:	4618      	mov	r0, r3
 800174a:	370c      	adds	r7, #12
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr

08001754 <_isatty>:

int _isatty(int file)
{
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800175c:	2301      	movs	r3, #1
}
 800175e:	4618      	mov	r0, r3
 8001760:	370c      	adds	r7, #12
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr

0800176a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800176a:	b480      	push	{r7}
 800176c:	b085      	sub	sp, #20
 800176e:	af00      	add	r7, sp, #0
 8001770:	60f8      	str	r0, [r7, #12]
 8001772:	60b9      	str	r1, [r7, #8]
 8001774:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001776:	2300      	movs	r3, #0
}
 8001778:	4618      	mov	r0, r3
 800177a:	3714      	adds	r7, #20
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr

08001784 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b086      	sub	sp, #24
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800178c:	4a14      	ldr	r2, [pc, #80]	@ (80017e0 <_sbrk+0x5c>)
 800178e:	4b15      	ldr	r3, [pc, #84]	@ (80017e4 <_sbrk+0x60>)
 8001790:	1ad3      	subs	r3, r2, r3
 8001792:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001798:	4b13      	ldr	r3, [pc, #76]	@ (80017e8 <_sbrk+0x64>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d102      	bne.n	80017a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017a0:	4b11      	ldr	r3, [pc, #68]	@ (80017e8 <_sbrk+0x64>)
 80017a2:	4a12      	ldr	r2, [pc, #72]	@ (80017ec <_sbrk+0x68>)
 80017a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017a6:	4b10      	ldr	r3, [pc, #64]	@ (80017e8 <_sbrk+0x64>)
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4413      	add	r3, r2
 80017ae:	693a      	ldr	r2, [r7, #16]
 80017b0:	429a      	cmp	r2, r3
 80017b2:	d207      	bcs.n	80017c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017b4:	f008 fe6a 	bl	800a48c <__errno>
 80017b8:	4603      	mov	r3, r0
 80017ba:	220c      	movs	r2, #12
 80017bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017be:	f04f 33ff 	mov.w	r3, #4294967295
 80017c2:	e009      	b.n	80017d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017c4:	4b08      	ldr	r3, [pc, #32]	@ (80017e8 <_sbrk+0x64>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017ca:	4b07      	ldr	r3, [pc, #28]	@ (80017e8 <_sbrk+0x64>)
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	4413      	add	r3, r2
 80017d2:	4a05      	ldr	r2, [pc, #20]	@ (80017e8 <_sbrk+0x64>)
 80017d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017d6:	68fb      	ldr	r3, [r7, #12]
}
 80017d8:	4618      	mov	r0, r3
 80017da:	3718      	adds	r7, #24
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	20080000 	.word	0x20080000
 80017e4:	00000400 	.word	0x00000400
 80017e8:	20000a34 	.word	0x20000a34
 80017ec:	20005568 	.word	0x20005568

080017f0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017f4:	4b06      	ldr	r3, [pc, #24]	@ (8001810 <SystemInit+0x20>)
 80017f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017fa:	4a05      	ldr	r2, [pc, #20]	@ (8001810 <SystemInit+0x20>)
 80017fc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001800:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001804:	bf00      	nop
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop
 8001810:	e000ed00 	.word	0xe000ed00

08001814 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001814:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800184c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001818:	f7ff ffea 	bl	80017f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800181c:	480c      	ldr	r0, [pc, #48]	@ (8001850 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800181e:	490d      	ldr	r1, [pc, #52]	@ (8001854 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001820:	4a0d      	ldr	r2, [pc, #52]	@ (8001858 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001822:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001824:	e002      	b.n	800182c <LoopCopyDataInit>

08001826 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001826:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001828:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800182a:	3304      	adds	r3, #4

0800182c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800182c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800182e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001830:	d3f9      	bcc.n	8001826 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001832:	4a0a      	ldr	r2, [pc, #40]	@ (800185c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001834:	4c0a      	ldr	r4, [pc, #40]	@ (8001860 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001836:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001838:	e001      	b.n	800183e <LoopFillZerobss>

0800183a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800183a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800183c:	3204      	adds	r2, #4

0800183e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800183e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001840:	d3fb      	bcc.n	800183a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001842:	f008 fe29 	bl	800a498 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001846:	f7ff f8dd 	bl	8000a04 <main>
  bx  lr    
 800184a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800184c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001850:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001854:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001858:	0800e024 	.word	0x0800e024
  ldr r2, =_sbss
 800185c:	20000318 	.word	0x20000318
  ldr r4, =_ebss
 8001860:	20005568 	.word	0x20005568

08001864 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001864:	e7fe      	b.n	8001864 <ADC_IRQHandler>

08001866 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001866:	b580      	push	{r7, lr}
 8001868:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800186a:	2003      	movs	r0, #3
 800186c:	f000 fd2b 	bl	80022c6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001870:	200f      	movs	r0, #15
 8001872:	f7ff fe59 	bl	8001528 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001876:	f7ff fc5d 	bl	8001134 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800187a:	2300      	movs	r3, #0
}
 800187c:	4618      	mov	r0, r3
 800187e:	bd80      	pop	{r7, pc}

08001880 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001884:	4b06      	ldr	r3, [pc, #24]	@ (80018a0 <HAL_IncTick+0x20>)
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	461a      	mov	r2, r3
 800188a:	4b06      	ldr	r3, [pc, #24]	@ (80018a4 <HAL_IncTick+0x24>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4413      	add	r3, r2
 8001890:	4a04      	ldr	r2, [pc, #16]	@ (80018a4 <HAL_IncTick+0x24>)
 8001892:	6013      	str	r3, [r2, #0]
}
 8001894:	bf00      	nop
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop
 80018a0:	20000008 	.word	0x20000008
 80018a4:	20000a38 	.word	0x20000a38

080018a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  return uwTick;
 80018ac:	4b03      	ldr	r3, [pc, #12]	@ (80018bc <HAL_GetTick+0x14>)
 80018ae:	681b      	ldr	r3, [r3, #0]
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	20000a38 	.word	0x20000a38

080018c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b084      	sub	sp, #16
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018c8:	f7ff ffee 	bl	80018a8 <HAL_GetTick>
 80018cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018d8:	d005      	beq.n	80018e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018da:	4b0a      	ldr	r3, [pc, #40]	@ (8001904 <HAL_Delay+0x44>)
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	461a      	mov	r2, r3
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	4413      	add	r3, r2
 80018e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018e6:	bf00      	nop
 80018e8:	f7ff ffde 	bl	80018a8 <HAL_GetTick>
 80018ec:	4602      	mov	r2, r0
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	68fa      	ldr	r2, [r7, #12]
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d8f7      	bhi.n	80018e8 <HAL_Delay+0x28>
  {
  }
}
 80018f8:	bf00      	nop
 80018fa:	bf00      	nop
 80018fc:	3710      	adds	r7, #16
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	20000008 	.word	0x20000008

08001908 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b084      	sub	sp, #16
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001910:	2300      	movs	r3, #0
 8001912:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d101      	bne.n	800191e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	e031      	b.n	8001982 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001922:	2b00      	cmp	r3, #0
 8001924:	d109      	bne.n	800193a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001926:	6878      	ldr	r0, [r7, #4]
 8001928:	f7ff fc2c 	bl	8001184 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2200      	movs	r2, #0
 8001930:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2200      	movs	r2, #0
 8001936:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800193e:	f003 0310 	and.w	r3, r3, #16
 8001942:	2b00      	cmp	r3, #0
 8001944:	d116      	bne.n	8001974 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800194a:	4b10      	ldr	r3, [pc, #64]	@ (800198c <HAL_ADC_Init+0x84>)
 800194c:	4013      	ands	r3, r2
 800194e:	f043 0202 	orr.w	r2, r3, #2
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001956:	6878      	ldr	r0, [r7, #4]
 8001958:	f000 fb0e 	bl	8001f78 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2200      	movs	r2, #0
 8001960:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001966:	f023 0303 	bic.w	r3, r3, #3
 800196a:	f043 0201 	orr.w	r2, r3, #1
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	641a      	str	r2, [r3, #64]	@ 0x40
 8001972:	e001      	b.n	8001978 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001974:	2301      	movs	r3, #1
 8001976:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2200      	movs	r2, #0
 800197c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001980:	7bfb      	ldrb	r3, [r7, #15]
}
 8001982:	4618      	mov	r0, r3
 8001984:	3710      	adds	r7, #16
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	ffffeefd 	.word	0xffffeefd

08001990 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001990:	b480      	push	{r7}
 8001992:	b085      	sub	sp, #20
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8001998:	2300      	movs	r3, #0
 800199a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80019a2:	2b01      	cmp	r3, #1
 80019a4:	d101      	bne.n	80019aa <HAL_ADC_Start+0x1a>
 80019a6:	2302      	movs	r3, #2
 80019a8:	e0ad      	b.n	8001b06 <HAL_ADC_Start+0x176>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2201      	movs	r2, #1
 80019ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	f003 0301 	and.w	r3, r3, #1
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d018      	beq.n	80019f2 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	689a      	ldr	r2, [r3, #8]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f042 0201 	orr.w	r2, r2, #1
 80019ce:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80019d0:	4b50      	ldr	r3, [pc, #320]	@ (8001b14 <HAL_ADC_Start+0x184>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a50      	ldr	r2, [pc, #320]	@ (8001b18 <HAL_ADC_Start+0x188>)
 80019d6:	fba2 2303 	umull	r2, r3, r2, r3
 80019da:	0c9a      	lsrs	r2, r3, #18
 80019dc:	4613      	mov	r3, r2
 80019de:	005b      	lsls	r3, r3, #1
 80019e0:	4413      	add	r3, r2
 80019e2:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80019e4:	e002      	b.n	80019ec <HAL_ADC_Start+0x5c>
    {
      counter--;
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	3b01      	subs	r3, #1
 80019ea:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d1f9      	bne.n	80019e6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	f003 0301 	and.w	r3, r3, #1
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d175      	bne.n	8001aec <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001a04:	4b45      	ldr	r3, [pc, #276]	@ (8001b1c <HAL_ADC_Start+0x18c>)
 8001a06:	4013      	ands	r3, r2
 8001a08:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d007      	beq.n	8001a2e <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a22:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001a26:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a32:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001a3a:	d106      	bne.n	8001a4a <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a40:	f023 0206 	bic.w	r2, r3, #6
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	645a      	str	r2, [r3, #68]	@ 0x44
 8001a48:	e002      	b.n	8001a50 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2200      	movs	r2, #0
 8001a54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001a60:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001a62:	4b2f      	ldr	r3, [pc, #188]	@ (8001b20 <HAL_ADC_Start+0x190>)
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	f003 031f 	and.w	r3, r3, #31
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d10f      	bne.n	8001a8e <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d143      	bne.n	8001b04 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	689a      	ldr	r2, [r3, #8]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001a8a:	609a      	str	r2, [r3, #8]
 8001a8c:	e03a      	b.n	8001b04 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a24      	ldr	r2, [pc, #144]	@ (8001b24 <HAL_ADC_Start+0x194>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d10e      	bne.n	8001ab6 <HAL_ADC_Start+0x126>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d107      	bne.n	8001ab6 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	689a      	ldr	r2, [r3, #8]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001ab4:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8001ab6:	4b1a      	ldr	r3, [pc, #104]	@ (8001b20 <HAL_ADC_Start+0x190>)
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f003 0310 	and.w	r3, r3, #16
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d120      	bne.n	8001b04 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a18      	ldr	r2, [pc, #96]	@ (8001b28 <HAL_ADC_Start+0x198>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d11b      	bne.n	8001b04 <HAL_ADC_Start+0x174>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d114      	bne.n	8001b04 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	689a      	ldr	r2, [r3, #8]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001ae8:	609a      	str	r2, [r3, #8]
 8001aea:	e00b      	b.n	8001b04 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001af0:	f043 0210 	orr.w	r2, r3, #16
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001afc:	f043 0201 	orr.w	r2, r3, #1
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001b04:	2300      	movs	r3, #0
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	3714      	adds	r7, #20
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr
 8001b12:	bf00      	nop
 8001b14:	20000000 	.word	0x20000000
 8001b18:	431bde83 	.word	0x431bde83
 8001b1c:	fffff8fe 	.word	0xfffff8fe
 8001b20:	40012300 	.word	0x40012300
 8001b24:	40012000 	.word	0x40012000
 8001b28:	40012200 	.word	0x40012200

08001b2c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001b3a:	2b01      	cmp	r3, #1
 8001b3c:	d101      	bne.n	8001b42 <HAL_ADC_Stop+0x16>
 8001b3e:	2302      	movs	r3, #2
 8001b40:	e01f      	b.n	8001b82 <HAL_ADC_Stop+0x56>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2201      	movs	r2, #1
 8001b46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	689a      	ldr	r2, [r3, #8]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f022 0201 	bic.w	r2, r2, #1
 8001b58:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	f003 0301 	and.w	r3, r3, #1
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d107      	bne.n	8001b78 <HAL_ADC_Stop+0x4c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001b6c:	4b08      	ldr	r3, [pc, #32]	@ (8001b90 <HAL_ADC_Stop+0x64>)
 8001b6e:	4013      	ands	r3, r2
 8001b70:	f043 0201 	orr.w	r2, r3, #1
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001b80:	2300      	movs	r3, #0
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	370c      	adds	r7, #12
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	ffffeefe 	.word	0xffffeefe

08001b94 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b084      	sub	sp, #16
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001bb0:	d113      	bne.n	8001bda <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001bbc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001bc0:	d10b      	bne.n	8001bda <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bc6:	f043 0220 	orr.w	r2, r3, #32
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e063      	b.n	8001ca2 <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001bda:	f7ff fe65 	bl	80018a8 <HAL_GetTick>
 8001bde:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001be0:	e021      	b.n	8001c26 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001be8:	d01d      	beq.n	8001c26 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d007      	beq.n	8001c00 <HAL_ADC_PollForConversion+0x6c>
 8001bf0:	f7ff fe5a 	bl	80018a8 <HAL_GetTick>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	683a      	ldr	r2, [r7, #0]
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d212      	bcs.n	8001c26 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 0302 	and.w	r3, r3, #2
 8001c0a:	2b02      	cmp	r3, #2
 8001c0c:	d00b      	beq.n	8001c26 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c12:	f043 0204 	orr.w	r2, r3, #4
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
          
          return HAL_TIMEOUT;
 8001c22:	2303      	movs	r3, #3
 8001c24:	e03d      	b.n	8001ca2 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f003 0302 	and.w	r3, r3, #2
 8001c30:	2b02      	cmp	r3, #2
 8001c32:	d1d6      	bne.n	8001be2 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f06f 0212 	mvn.w	r2, #18
 8001c3c:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c42:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d123      	bne.n	8001ca0 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d11f      	bne.n	8001ca0 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c66:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d006      	beq.n	8001c7c <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d111      	bne.n	8001ca0 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c80:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	641a      	str	r2, [r3, #64]	@ 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c8c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d105      	bne.n	8001ca0 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c98:	f043 0201 	orr.w	r2, r3, #1
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001ca0:	2300      	movs	r3, #0
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3710      	adds	r7, #16
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}

08001caa <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001caa:	b480      	push	{r7}
 8001cac:	b083      	sub	sp, #12
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	370c      	adds	r7, #12
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr

08001cc4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b085      	sub	sp, #20
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
 8001ccc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d101      	bne.n	8001ce0 <HAL_ADC_ConfigChannel+0x1c>
 8001cdc:	2302      	movs	r3, #2
 8001cde:	e13a      	b.n	8001f56 <HAL_ADC_ConfigChannel+0x292>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	2b09      	cmp	r3, #9
 8001cee:	d93a      	bls.n	8001d66 <HAL_ADC_ConfigChannel+0xa2>
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001cf8:	d035      	beq.n	8001d66 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	68d9      	ldr	r1, [r3, #12]
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	b29b      	uxth	r3, r3
 8001d06:	461a      	mov	r2, r3
 8001d08:	4613      	mov	r3, r2
 8001d0a:	005b      	lsls	r3, r3, #1
 8001d0c:	4413      	add	r3, r2
 8001d0e:	3b1e      	subs	r3, #30
 8001d10:	2207      	movs	r2, #7
 8001d12:	fa02 f303 	lsl.w	r3, r2, r3
 8001d16:	43da      	mvns	r2, r3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	400a      	ands	r2, r1
 8001d1e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a8f      	ldr	r2, [pc, #572]	@ (8001f64 <HAL_ADC_ConfigChannel+0x2a0>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d10a      	bne.n	8001d40 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	68d9      	ldr	r1, [r3, #12]
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	061a      	lsls	r2, r3, #24
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	430a      	orrs	r2, r1
 8001d3c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d3e:	e039      	b.n	8001db4 <HAL_ADC_ConfigChannel+0xf0>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	68d9      	ldr	r1, [r3, #12]
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	689a      	ldr	r2, [r3, #8]
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	b29b      	uxth	r3, r3
 8001d50:	4618      	mov	r0, r3
 8001d52:	4603      	mov	r3, r0
 8001d54:	005b      	lsls	r3, r3, #1
 8001d56:	4403      	add	r3, r0
 8001d58:	3b1e      	subs	r3, #30
 8001d5a:	409a      	lsls	r2, r3
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	430a      	orrs	r2, r1
 8001d62:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d64:	e026      	b.n	8001db4 <HAL_ADC_ConfigChannel+0xf0>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	6919      	ldr	r1, [r3, #16]
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	b29b      	uxth	r3, r3
 8001d72:	461a      	mov	r2, r3
 8001d74:	4613      	mov	r3, r2
 8001d76:	005b      	lsls	r3, r3, #1
 8001d78:	4413      	add	r3, r2
 8001d7a:	f003 031f 	and.w	r3, r3, #31
 8001d7e:	2207      	movs	r2, #7
 8001d80:	fa02 f303 	lsl.w	r3, r2, r3
 8001d84:	43da      	mvns	r2, r3
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	400a      	ands	r2, r1
 8001d8c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	6919      	ldr	r1, [r3, #16]
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	689a      	ldr	r2, [r3, #8]
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	b29b      	uxth	r3, r3
 8001d9e:	4618      	mov	r0, r3
 8001da0:	4603      	mov	r3, r0
 8001da2:	005b      	lsls	r3, r3, #1
 8001da4:	4403      	add	r3, r0
 8001da6:	f003 031f 	and.w	r3, r3, #31
 8001daa:	409a      	lsls	r2, r3
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	430a      	orrs	r2, r1
 8001db2:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	2b06      	cmp	r3, #6
 8001dba:	d824      	bhi.n	8001e06 <HAL_ADC_ConfigChannel+0x142>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	685a      	ldr	r2, [r3, #4]
 8001dc6:	4613      	mov	r3, r2
 8001dc8:	009b      	lsls	r3, r3, #2
 8001dca:	4413      	add	r3, r2
 8001dcc:	3b05      	subs	r3, #5
 8001dce:	221f      	movs	r2, #31
 8001dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd4:	43da      	mvns	r2, r3
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	400a      	ands	r2, r1
 8001ddc:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	b29b      	uxth	r3, r3
 8001dea:	4618      	mov	r0, r3
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	685a      	ldr	r2, [r3, #4]
 8001df0:	4613      	mov	r3, r2
 8001df2:	009b      	lsls	r3, r3, #2
 8001df4:	4413      	add	r3, r2
 8001df6:	3b05      	subs	r3, #5
 8001df8:	fa00 f203 	lsl.w	r2, r0, r3
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	430a      	orrs	r2, r1
 8001e02:	635a      	str	r2, [r3, #52]	@ 0x34
 8001e04:	e04c      	b.n	8001ea0 <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	2b0c      	cmp	r3, #12
 8001e0c:	d824      	bhi.n	8001e58 <HAL_ADC_ConfigChannel+0x194>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	685a      	ldr	r2, [r3, #4]
 8001e18:	4613      	mov	r3, r2
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	4413      	add	r3, r2
 8001e1e:	3b23      	subs	r3, #35	@ 0x23
 8001e20:	221f      	movs	r2, #31
 8001e22:	fa02 f303 	lsl.w	r3, r2, r3
 8001e26:	43da      	mvns	r2, r3
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	400a      	ands	r2, r1
 8001e2e:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	b29b      	uxth	r3, r3
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	685a      	ldr	r2, [r3, #4]
 8001e42:	4613      	mov	r3, r2
 8001e44:	009b      	lsls	r3, r3, #2
 8001e46:	4413      	add	r3, r2
 8001e48:	3b23      	subs	r3, #35	@ 0x23
 8001e4a:	fa00 f203 	lsl.w	r2, r0, r3
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	430a      	orrs	r2, r1
 8001e54:	631a      	str	r2, [r3, #48]	@ 0x30
 8001e56:	e023      	b.n	8001ea0 <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	685a      	ldr	r2, [r3, #4]
 8001e62:	4613      	mov	r3, r2
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	4413      	add	r3, r2
 8001e68:	3b41      	subs	r3, #65	@ 0x41
 8001e6a:	221f      	movs	r2, #31
 8001e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e70:	43da      	mvns	r2, r3
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	400a      	ands	r2, r1
 8001e78:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	b29b      	uxth	r3, r3
 8001e86:	4618      	mov	r0, r3
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	685a      	ldr	r2, [r3, #4]
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	4413      	add	r3, r2
 8001e92:	3b41      	subs	r3, #65	@ 0x41
 8001e94:	fa00 f203 	lsl.w	r2, r0, r3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	430a      	orrs	r2, r1
 8001e9e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a30      	ldr	r2, [pc, #192]	@ (8001f68 <HAL_ADC_ConfigChannel+0x2a4>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d10a      	bne.n	8001ec0 <HAL_ADC_ConfigChannel+0x1fc>
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001eb2:	d105      	bne.n	8001ec0 <HAL_ADC_ConfigChannel+0x1fc>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001eb4:	4b2d      	ldr	r3, [pc, #180]	@ (8001f6c <HAL_ADC_ConfigChannel+0x2a8>)
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	4a2c      	ldr	r2, [pc, #176]	@ (8001f6c <HAL_ADC_ConfigChannel+0x2a8>)
 8001eba:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8001ebe:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a28      	ldr	r2, [pc, #160]	@ (8001f68 <HAL_ADC_ConfigChannel+0x2a4>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d10f      	bne.n	8001eea <HAL_ADC_ConfigChannel+0x226>
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	2b12      	cmp	r3, #18
 8001ed0:	d10b      	bne.n	8001eea <HAL_ADC_ConfigChannel+0x226>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8001ed2:	4b26      	ldr	r3, [pc, #152]	@ (8001f6c <HAL_ADC_ConfigChannel+0x2a8>)
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	4a25      	ldr	r2, [pc, #148]	@ (8001f6c <HAL_ADC_ConfigChannel+0x2a8>)
 8001ed8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001edc:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001ede:	4b23      	ldr	r3, [pc, #140]	@ (8001f6c <HAL_ADC_ConfigChannel+0x2a8>)
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	4a22      	ldr	r2, [pc, #136]	@ (8001f6c <HAL_ADC_ConfigChannel+0x2a8>)
 8001ee4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001ee8:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a1e      	ldr	r2, [pc, #120]	@ (8001f68 <HAL_ADC_ConfigChannel+0x2a4>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d12b      	bne.n	8001f4c <HAL_ADC_ConfigChannel+0x288>
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a1a      	ldr	r2, [pc, #104]	@ (8001f64 <HAL_ADC_ConfigChannel+0x2a0>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d003      	beq.n	8001f06 <HAL_ADC_ConfigChannel+0x242>
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	2b11      	cmp	r3, #17
 8001f04:	d122      	bne.n	8001f4c <HAL_ADC_ConfigChannel+0x288>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8001f06:	4b19      	ldr	r3, [pc, #100]	@ (8001f6c <HAL_ADC_ConfigChannel+0x2a8>)
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	4a18      	ldr	r2, [pc, #96]	@ (8001f6c <HAL_ADC_ConfigChannel+0x2a8>)
 8001f0c:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8001f10:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001f12:	4b16      	ldr	r3, [pc, #88]	@ (8001f6c <HAL_ADC_ConfigChannel+0x2a8>)
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	4a15      	ldr	r2, [pc, #84]	@ (8001f6c <HAL_ADC_ConfigChannel+0x2a8>)
 8001f18:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001f1c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a10      	ldr	r2, [pc, #64]	@ (8001f64 <HAL_ADC_ConfigChannel+0x2a0>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d111      	bne.n	8001f4c <HAL_ADC_ConfigChannel+0x288>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001f28:	4b11      	ldr	r3, [pc, #68]	@ (8001f70 <HAL_ADC_ConfigChannel+0x2ac>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a11      	ldr	r2, [pc, #68]	@ (8001f74 <HAL_ADC_ConfigChannel+0x2b0>)
 8001f2e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f32:	0c9a      	lsrs	r2, r3, #18
 8001f34:	4613      	mov	r3, r2
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	4413      	add	r3, r2
 8001f3a:	005b      	lsls	r3, r3, #1
 8001f3c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001f3e:	e002      	b.n	8001f46 <HAL_ADC_ConfigChannel+0x282>
      {
        counter--;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	3b01      	subs	r3, #1
 8001f44:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d1f9      	bne.n	8001f40 <HAL_ADC_ConfigChannel+0x27c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001f54:	2300      	movs	r3, #0
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3714      	adds	r7, #20
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	10000012 	.word	0x10000012
 8001f68:	40012000 	.word	0x40012000
 8001f6c:	40012300 	.word	0x40012300
 8001f70:	20000000 	.word	0x20000000
 8001f74:	431bde83 	.word	0x431bde83

08001f78 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001f80:	4b78      	ldr	r3, [pc, #480]	@ (8002164 <ADC_Init+0x1ec>)
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	4a77      	ldr	r2, [pc, #476]	@ (8002164 <ADC_Init+0x1ec>)
 8001f86:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8001f8a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001f8c:	4b75      	ldr	r3, [pc, #468]	@ (8002164 <ADC_Init+0x1ec>)
 8001f8e:	685a      	ldr	r2, [r3, #4]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	4973      	ldr	r1, [pc, #460]	@ (8002164 <ADC_Init+0x1ec>)
 8001f96:	4313      	orrs	r3, r2
 8001f98:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	685a      	ldr	r2, [r3, #4]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001fa8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	6859      	ldr	r1, [r3, #4]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	691b      	ldr	r3, [r3, #16]
 8001fb4:	021a      	lsls	r2, r3, #8
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	430a      	orrs	r2, r1
 8001fbc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	685a      	ldr	r2, [r3, #4]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001fcc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	6859      	ldr	r1, [r3, #4]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	689a      	ldr	r2, [r3, #8]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	430a      	orrs	r2, r1
 8001fde:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	689a      	ldr	r2, [r3, #8]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001fee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	6899      	ldr	r1, [r3, #8]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	68da      	ldr	r2, [r3, #12]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	430a      	orrs	r2, r1
 8002000:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002006:	4a58      	ldr	r2, [pc, #352]	@ (8002168 <ADC_Init+0x1f0>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d022      	beq.n	8002052 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	689a      	ldr	r2, [r3, #8]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800201a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	6899      	ldr	r1, [r3, #8]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	430a      	orrs	r2, r1
 800202c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	689a      	ldr	r2, [r3, #8]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800203c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	6899      	ldr	r1, [r3, #8]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	430a      	orrs	r2, r1
 800204e:	609a      	str	r2, [r3, #8]
 8002050:	e00f      	b.n	8002072 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	689a      	ldr	r2, [r3, #8]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002060:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	689a      	ldr	r2, [r3, #8]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002070:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	689a      	ldr	r2, [r3, #8]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f022 0202 	bic.w	r2, r2, #2
 8002080:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	6899      	ldr	r1, [r3, #8]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	699b      	ldr	r3, [r3, #24]
 800208c:	005a      	lsls	r2, r3, #1
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	430a      	orrs	r2, r1
 8002094:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	f893 3020 	ldrb.w	r3, [r3, #32]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d01b      	beq.n	80020d8 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	685a      	ldr	r2, [r3, #4]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80020ae:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	685a      	ldr	r2, [r3, #4]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80020be:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	6859      	ldr	r1, [r3, #4]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020ca:	3b01      	subs	r3, #1
 80020cc:	035a      	lsls	r2, r3, #13
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	430a      	orrs	r2, r1
 80020d4:	605a      	str	r2, [r3, #4]
 80020d6:	e007      	b.n	80020e8 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	685a      	ldr	r2, [r3, #4]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80020e6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80020f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	69db      	ldr	r3, [r3, #28]
 8002102:	3b01      	subs	r3, #1
 8002104:	051a      	lsls	r2, r3, #20
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	430a      	orrs	r2, r1
 800210c:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	689a      	ldr	r2, [r3, #8]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800211c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	6899      	ldr	r1, [r3, #8]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800212a:	025a      	lsls	r2, r3, #9
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	430a      	orrs	r2, r1
 8002132:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	689a      	ldr	r2, [r3, #8]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002142:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	6899      	ldr	r1, [r3, #8]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	695b      	ldr	r3, [r3, #20]
 800214e:	029a      	lsls	r2, r3, #10
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	430a      	orrs	r2, r1
 8002156:	609a      	str	r2, [r3, #8]
}
 8002158:	bf00      	nop
 800215a:	370c      	adds	r7, #12
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr
 8002164:	40012300 	.word	0x40012300
 8002168:	0f000001 	.word	0x0f000001

0800216c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800216c:	b480      	push	{r7}
 800216e:	b085      	sub	sp, #20
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	f003 0307 	and.w	r3, r3, #7
 800217a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800217c:	4b0b      	ldr	r3, [pc, #44]	@ (80021ac <__NVIC_SetPriorityGrouping+0x40>)
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002182:	68ba      	ldr	r2, [r7, #8]
 8002184:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002188:	4013      	ands	r3, r2
 800218a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002194:	4b06      	ldr	r3, [pc, #24]	@ (80021b0 <__NVIC_SetPriorityGrouping+0x44>)
 8002196:	4313      	orrs	r3, r2
 8002198:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800219a:	4a04      	ldr	r2, [pc, #16]	@ (80021ac <__NVIC_SetPriorityGrouping+0x40>)
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	60d3      	str	r3, [r2, #12]
}
 80021a0:	bf00      	nop
 80021a2:	3714      	adds	r7, #20
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr
 80021ac:	e000ed00 	.word	0xe000ed00
 80021b0:	05fa0000 	.word	0x05fa0000

080021b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021b4:	b480      	push	{r7}
 80021b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021b8:	4b04      	ldr	r3, [pc, #16]	@ (80021cc <__NVIC_GetPriorityGrouping+0x18>)
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	0a1b      	lsrs	r3, r3, #8
 80021be:	f003 0307 	and.w	r3, r3, #7
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr
 80021cc:	e000ed00 	.word	0xe000ed00

080021d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b083      	sub	sp, #12
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	4603      	mov	r3, r0
 80021d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	db0b      	blt.n	80021fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021e2:	79fb      	ldrb	r3, [r7, #7]
 80021e4:	f003 021f 	and.w	r2, r3, #31
 80021e8:	4907      	ldr	r1, [pc, #28]	@ (8002208 <__NVIC_EnableIRQ+0x38>)
 80021ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ee:	095b      	lsrs	r3, r3, #5
 80021f0:	2001      	movs	r0, #1
 80021f2:	fa00 f202 	lsl.w	r2, r0, r2
 80021f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80021fa:	bf00      	nop
 80021fc:	370c      	adds	r7, #12
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop
 8002208:	e000e100 	.word	0xe000e100

0800220c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	4603      	mov	r3, r0
 8002214:	6039      	str	r1, [r7, #0]
 8002216:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002218:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800221c:	2b00      	cmp	r3, #0
 800221e:	db0a      	blt.n	8002236 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	b2da      	uxtb	r2, r3
 8002224:	490c      	ldr	r1, [pc, #48]	@ (8002258 <__NVIC_SetPriority+0x4c>)
 8002226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800222a:	0112      	lsls	r2, r2, #4
 800222c:	b2d2      	uxtb	r2, r2
 800222e:	440b      	add	r3, r1
 8002230:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002234:	e00a      	b.n	800224c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	b2da      	uxtb	r2, r3
 800223a:	4908      	ldr	r1, [pc, #32]	@ (800225c <__NVIC_SetPriority+0x50>)
 800223c:	79fb      	ldrb	r3, [r7, #7]
 800223e:	f003 030f 	and.w	r3, r3, #15
 8002242:	3b04      	subs	r3, #4
 8002244:	0112      	lsls	r2, r2, #4
 8002246:	b2d2      	uxtb	r2, r2
 8002248:	440b      	add	r3, r1
 800224a:	761a      	strb	r2, [r3, #24]
}
 800224c:	bf00      	nop
 800224e:	370c      	adds	r7, #12
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr
 8002258:	e000e100 	.word	0xe000e100
 800225c:	e000ed00 	.word	0xe000ed00

08002260 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002260:	b480      	push	{r7}
 8002262:	b089      	sub	sp, #36	@ 0x24
 8002264:	af00      	add	r7, sp, #0
 8002266:	60f8      	str	r0, [r7, #12]
 8002268:	60b9      	str	r1, [r7, #8]
 800226a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	f003 0307 	and.w	r3, r3, #7
 8002272:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002274:	69fb      	ldr	r3, [r7, #28]
 8002276:	f1c3 0307 	rsb	r3, r3, #7
 800227a:	2b04      	cmp	r3, #4
 800227c:	bf28      	it	cs
 800227e:	2304      	movcs	r3, #4
 8002280:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002282:	69fb      	ldr	r3, [r7, #28]
 8002284:	3304      	adds	r3, #4
 8002286:	2b06      	cmp	r3, #6
 8002288:	d902      	bls.n	8002290 <NVIC_EncodePriority+0x30>
 800228a:	69fb      	ldr	r3, [r7, #28]
 800228c:	3b03      	subs	r3, #3
 800228e:	e000      	b.n	8002292 <NVIC_EncodePriority+0x32>
 8002290:	2300      	movs	r3, #0
 8002292:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002294:	f04f 32ff 	mov.w	r2, #4294967295
 8002298:	69bb      	ldr	r3, [r7, #24]
 800229a:	fa02 f303 	lsl.w	r3, r2, r3
 800229e:	43da      	mvns	r2, r3
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	401a      	ands	r2, r3
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022a8:	f04f 31ff 	mov.w	r1, #4294967295
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	fa01 f303 	lsl.w	r3, r1, r3
 80022b2:	43d9      	mvns	r1, r3
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022b8:	4313      	orrs	r3, r2
         );
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3724      	adds	r7, #36	@ 0x24
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr

080022c6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022c6:	b580      	push	{r7, lr}
 80022c8:	b082      	sub	sp, #8
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	f7ff ff4c 	bl	800216c <__NVIC_SetPriorityGrouping>
}
 80022d4:	bf00      	nop
 80022d6:	3708      	adds	r7, #8
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}

080022dc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022dc:	b580      	push	{r7, lr}
 80022de:	b086      	sub	sp, #24
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	4603      	mov	r3, r0
 80022e4:	60b9      	str	r1, [r7, #8]
 80022e6:	607a      	str	r2, [r7, #4]
 80022e8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80022ea:	2300      	movs	r3, #0
 80022ec:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022ee:	f7ff ff61 	bl	80021b4 <__NVIC_GetPriorityGrouping>
 80022f2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022f4:	687a      	ldr	r2, [r7, #4]
 80022f6:	68b9      	ldr	r1, [r7, #8]
 80022f8:	6978      	ldr	r0, [r7, #20]
 80022fa:	f7ff ffb1 	bl	8002260 <NVIC_EncodePriority>
 80022fe:	4602      	mov	r2, r0
 8002300:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002304:	4611      	mov	r1, r2
 8002306:	4618      	mov	r0, r3
 8002308:	f7ff ff80 	bl	800220c <__NVIC_SetPriority>
}
 800230c:	bf00      	nop
 800230e:	3718      	adds	r7, #24
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}

08002314 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b082      	sub	sp, #8
 8002318:	af00      	add	r7, sp, #0
 800231a:	4603      	mov	r3, r0
 800231c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800231e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002322:	4618      	mov	r0, r3
 8002324:	f7ff ff54 	bl	80021d0 <__NVIC_EnableIRQ>
}
 8002328:	bf00      	nop
 800232a:	3708      	adds	r7, #8
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}

08002330 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b084      	sub	sp, #16
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d101      	bne.n	8002342 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e086      	b.n	8002450 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002348:	2b00      	cmp	r3, #0
 800234a:	d106      	bne.n	800235a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2220      	movs	r2, #32
 8002350:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002354:	6878      	ldr	r0, [r7, #4]
 8002356:	f7fe ff55 	bl	8001204 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800235a:	4b3f      	ldr	r3, [pc, #252]	@ (8002458 <HAL_ETH_Init+0x128>)
 800235c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800235e:	4a3e      	ldr	r2, [pc, #248]	@ (8002458 <HAL_ETH_Init+0x128>)
 8002360:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002364:	6453      	str	r3, [r2, #68]	@ 0x44
 8002366:	4b3c      	ldr	r3, [pc, #240]	@ (8002458 <HAL_ETH_Init+0x128>)
 8002368:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800236a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800236e:	60bb      	str	r3, [r7, #8]
 8002370:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002372:	4b3a      	ldr	r3, [pc, #232]	@ (800245c <HAL_ETH_Init+0x12c>)
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	4a39      	ldr	r2, [pc, #228]	@ (800245c <HAL_ETH_Init+0x12c>)
 8002378:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800237c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800237e:	4b37      	ldr	r3, [pc, #220]	@ (800245c <HAL_ETH_Init+0x12c>)
 8002380:	685a      	ldr	r2, [r3, #4]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	4935      	ldr	r1, [pc, #212]	@ (800245c <HAL_ETH_Init+0x12c>)
 8002388:	4313      	orrs	r3, r2
 800238a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 800238c:	4b33      	ldr	r3, [pc, #204]	@ (800245c <HAL_ETH_Init+0x12c>)
 800238e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	687a      	ldr	r2, [r7, #4]
 800239c:	6812      	ldr	r2, [r2, #0]
 800239e:	f043 0301 	orr.w	r3, r3, #1
 80023a2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80023a6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80023a8:	f7ff fa7e 	bl	80018a8 <HAL_GetTick>
 80023ac:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80023ae:	e011      	b.n	80023d4 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80023b0:	f7ff fa7a 	bl	80018a8 <HAL_GetTick>
 80023b4:	4602      	mov	r2, r0
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80023be:	d909      	bls.n	80023d4 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2204      	movs	r2, #4
 80023c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	22e0      	movs	r2, #224	@ 0xe0
 80023cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	e03d      	b.n	8002450 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0301 	and.w	r3, r3, #1
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d1e4      	bne.n	80023b0 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f000 f97a 	bl	80026e0 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	f000 fa25 	bl	800283c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	f000 fa7b 	bl	80028ee <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	461a      	mov	r2, r3
 80023fe:	2100      	movs	r1, #0
 8002400:	6878      	ldr	r0, [r7, #4]
 8002402:	f000 f9e3 	bl	80027cc <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8002414:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	4b0f      	ldr	r3, [pc, #60]	@ (8002460 <HAL_ETH_Init+0x130>)
 8002424:	430b      	orrs	r3, r1
 8002426:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 800243a:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2200      	movs	r2, #0
 8002442:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2210      	movs	r2, #16
 800244a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800244e:	2300      	movs	r3, #0
}
 8002450:	4618      	mov	r0, r3
 8002452:	3710      	adds	r7, #16
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}
 8002458:	40023800 	.word	0x40023800
 800245c:	40013800 	.word	0x40013800
 8002460:	00020060 	.word	0x00020060

08002464 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b084      	sub	sp, #16
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
 800246c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002476:	68fa      	ldr	r2, [r7, #12]
 8002478:	4b53      	ldr	r3, [pc, #332]	@ (80025c8 <ETH_SetMACConfig+0x164>)
 800247a:	4013      	ands	r3, r2
 800247c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	7b9b      	ldrb	r3, [r3, #14]
 8002482:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002484:	683a      	ldr	r2, [r7, #0]
 8002486:	7c12      	ldrb	r2, [r2, #16]
 8002488:	2a00      	cmp	r2, #0
 800248a:	d102      	bne.n	8002492 <ETH_SetMACConfig+0x2e>
 800248c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002490:	e000      	b.n	8002494 <ETH_SetMACConfig+0x30>
 8002492:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002494:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002496:	683a      	ldr	r2, [r7, #0]
 8002498:	7c52      	ldrb	r2, [r2, #17]
 800249a:	2a00      	cmp	r2, #0
 800249c:	d102      	bne.n	80024a4 <ETH_SetMACConfig+0x40>
 800249e:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80024a2:	e000      	b.n	80024a6 <ETH_SetMACConfig+0x42>
 80024a4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80024a6:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80024ac:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	7fdb      	ldrb	r3, [r3, #31]
 80024b2:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80024b4:	431a      	orrs	r2, r3
                        macconf->Speed |
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80024ba:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80024bc:	683a      	ldr	r2, [r7, #0]
 80024be:	7f92      	ldrb	r2, [r2, #30]
 80024c0:	2a00      	cmp	r2, #0
 80024c2:	d102      	bne.n	80024ca <ETH_SetMACConfig+0x66>
 80024c4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80024c8:	e000      	b.n	80024cc <ETH_SetMACConfig+0x68>
 80024ca:	2200      	movs	r2, #0
                        macconf->Speed |
 80024cc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	7f1b      	ldrb	r3, [r3, #28]
 80024d2:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80024d4:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80024da:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	791b      	ldrb	r3, [r3, #4]
 80024e0:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80024e2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80024e4:	683a      	ldr	r2, [r7, #0]
 80024e6:	f892 2020 	ldrb.w	r2, [r2, #32]
 80024ea:	2a00      	cmp	r2, #0
 80024ec:	d102      	bne.n	80024f4 <ETH_SetMACConfig+0x90>
 80024ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80024f2:	e000      	b.n	80024f6 <ETH_SetMACConfig+0x92>
 80024f4:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80024f6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	7bdb      	ldrb	r3, [r3, #15]
 80024fc:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80024fe:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002504:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800250c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800250e:	4313      	orrs	r3, r2
 8002510:	68fa      	ldr	r2, [r7, #12]
 8002512:	4313      	orrs	r3, r2
 8002514:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	68fa      	ldr	r2, [r7, #12]
 800251c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002526:	2001      	movs	r0, #1
 8002528:	f7ff f9ca 	bl	80018c0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	68fa      	ldr	r2, [r7, #12]
 8002532:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	699b      	ldr	r3, [r3, #24]
 800253a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800253c:	68fa      	ldr	r2, [r7, #12]
 800253e:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8002542:	4013      	ands	r3, r2
 8002544:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800254a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800254c:	683a      	ldr	r2, [r7, #0]
 800254e:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8002552:	2a00      	cmp	r2, #0
 8002554:	d101      	bne.n	800255a <ETH_SetMACConfig+0xf6>
 8002556:	2280      	movs	r2, #128	@ 0x80
 8002558:	e000      	b.n	800255c <ETH_SetMACConfig+0xf8>
 800255a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800255c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002562:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002564:	683a      	ldr	r2, [r7, #0]
 8002566:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 800256a:	2a01      	cmp	r2, #1
 800256c:	d101      	bne.n	8002572 <ETH_SetMACConfig+0x10e>
 800256e:	2208      	movs	r2, #8
 8002570:	e000      	b.n	8002574 <ETH_SetMACConfig+0x110>
 8002572:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002574:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002576:	683a      	ldr	r2, [r7, #0]
 8002578:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 800257c:	2a01      	cmp	r2, #1
 800257e:	d101      	bne.n	8002584 <ETH_SetMACConfig+0x120>
 8002580:	2204      	movs	r2, #4
 8002582:	e000      	b.n	8002586 <ETH_SetMACConfig+0x122>
 8002584:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002586:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002588:	683a      	ldr	r2, [r7, #0]
 800258a:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 800258e:	2a01      	cmp	r2, #1
 8002590:	d101      	bne.n	8002596 <ETH_SetMACConfig+0x132>
 8002592:	2202      	movs	r2, #2
 8002594:	e000      	b.n	8002598 <ETH_SetMACConfig+0x134>
 8002596:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002598:	4313      	orrs	r3, r2
 800259a:	68fa      	ldr	r2, [r7, #12]
 800259c:	4313      	orrs	r3, r2
 800259e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	68fa      	ldr	r2, [r7, #12]
 80025a6:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	699b      	ldr	r3, [r3, #24]
 80025ae:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80025b0:	2001      	movs	r0, #1
 80025b2:	f7ff f985 	bl	80018c0 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	68fa      	ldr	r2, [r7, #12]
 80025bc:	619a      	str	r2, [r3, #24]
}
 80025be:	bf00      	nop
 80025c0:	3710      	adds	r7, #16
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	fd20810f 	.word	0xfd20810f

080025cc <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b084      	sub	sp, #16
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80025de:	699b      	ldr	r3, [r3, #24]
 80025e0:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80025e2:	68fa      	ldr	r2, [r7, #12]
 80025e4:	4b3d      	ldr	r3, [pc, #244]	@ (80026dc <ETH_SetDMAConfig+0x110>)
 80025e6:	4013      	ands	r3, r2
 80025e8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	7b1b      	ldrb	r3, [r3, #12]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d102      	bne.n	80025f8 <ETH_SetDMAConfig+0x2c>
 80025f2:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80025f6:	e000      	b.n	80025fa <ETH_SetDMAConfig+0x2e>
 80025f8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	7b5b      	ldrb	r3, [r3, #13]
 80025fe:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002600:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002602:	683a      	ldr	r2, [r7, #0]
 8002604:	7f52      	ldrb	r2, [r2, #29]
 8002606:	2a00      	cmp	r2, #0
 8002608:	d102      	bne.n	8002610 <ETH_SetDMAConfig+0x44>
 800260a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800260e:	e000      	b.n	8002612 <ETH_SetDMAConfig+0x46>
 8002610:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002612:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	7b9b      	ldrb	r3, [r3, #14]
 8002618:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800261a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002620:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	7f1b      	ldrb	r3, [r3, #28]
 8002626:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002628:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	7f9b      	ldrb	r3, [r3, #30]
 800262e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002630:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002636:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800263e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002640:	4313      	orrs	r3, r2
 8002642:	68fa      	ldr	r2, [r7, #12]
 8002644:	4313      	orrs	r3, r2
 8002646:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002650:	461a      	mov	r2, r3
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800265e:	699b      	ldr	r3, [r3, #24]
 8002660:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002662:	2001      	movs	r0, #1
 8002664:	f7ff f92c 	bl	80018c0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002670:	461a      	mov	r2, r3
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	791b      	ldrb	r3, [r3, #4]
 800267a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002680:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002686:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800268c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002694:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002696:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800269c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800269e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80026a4:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	6812      	ldr	r2, [r2, #0]
 80026aa:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80026ae:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80026b2:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80026c0:	2001      	movs	r0, #1
 80026c2:	f7ff f8fd 	bl	80018c0 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80026ce:	461a      	mov	r2, r3
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	6013      	str	r3, [r2, #0]
}
 80026d4:	bf00      	nop
 80026d6:	3710      	adds	r7, #16
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	f8de3f23 	.word	0xf8de3f23

080026e0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b0a6      	sub	sp, #152	@ 0x98
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80026e8:	2301      	movs	r3, #1
 80026ea:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 80026ee:	2301      	movs	r3, #1
 80026f0:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80026f4:	2300      	movs	r3, #0
 80026f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80026f8:	2300      	movs	r3, #0
 80026fa:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80026fe:	2301      	movs	r3, #1
 8002700:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002704:	2300      	movs	r3, #0
 8002706:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800270a:	2301      	movs	r3, #1
 800270c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8002710:	2301      	movs	r3, #1
 8002712:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002716:	2300      	movs	r3, #0
 8002718:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800271c:	2300      	movs	r3, #0
 800271e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002722:	2300      	movs	r3, #0
 8002724:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002726:	2300      	movs	r3, #0
 8002728:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800272c:	2300      	movs	r3, #0
 800272e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002730:	2300      	movs	r3, #0
 8002732:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002736:	2300      	movs	r3, #0
 8002738:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800273c:	2300      	movs	r3, #0
 800273e:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002742:	2300      	movs	r3, #0
 8002744:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002748:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800274c:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800274e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002752:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002754:	2300      	movs	r3, #0
 8002756:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800275a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800275e:	4619      	mov	r1, r3
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	f7ff fe7f 	bl	8002464 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002766:	2301      	movs	r3, #1
 8002768:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800276a:	2301      	movs	r3, #1
 800276c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800276e:	2301      	movs	r3, #1
 8002770:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002774:	2301      	movs	r3, #1
 8002776:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002778:	2300      	movs	r3, #0
 800277a:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800277c:	2300      	movs	r3, #0
 800277e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002782:	2300      	movs	r3, #0
 8002784:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002788:	2300      	movs	r3, #0
 800278a:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800278c:	2301      	movs	r3, #1
 800278e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002792:	2301      	movs	r3, #1
 8002794:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002796:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800279a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800279c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80027a0:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80027a2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80027a6:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80027a8:	2301      	movs	r3, #1
 80027aa:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80027ae:	2300      	movs	r3, #0
 80027b0:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80027b2:	2300      	movs	r3, #0
 80027b4:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80027b6:	f107 0308 	add.w	r3, r7, #8
 80027ba:	4619      	mov	r1, r3
 80027bc:	6878      	ldr	r0, [r7, #4]
 80027be:	f7ff ff05 	bl	80025cc <ETH_SetDMAConfig>
}
 80027c2:	bf00      	nop
 80027c4:	3798      	adds	r7, #152	@ 0x98
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
	...

080027cc <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b087      	sub	sp, #28
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	60f8      	str	r0, [r7, #12]
 80027d4:	60b9      	str	r1, [r7, #8]
 80027d6:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	3305      	adds	r3, #5
 80027dc:	781b      	ldrb	r3, [r3, #0]
 80027de:	021b      	lsls	r3, r3, #8
 80027e0:	687a      	ldr	r2, [r7, #4]
 80027e2:	3204      	adds	r2, #4
 80027e4:	7812      	ldrb	r2, [r2, #0]
 80027e6:	4313      	orrs	r3, r2
 80027e8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80027ea:	68ba      	ldr	r2, [r7, #8]
 80027ec:	4b11      	ldr	r3, [pc, #68]	@ (8002834 <ETH_MACAddressConfig+0x68>)
 80027ee:	4413      	add	r3, r2
 80027f0:	461a      	mov	r2, r3
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	3303      	adds	r3, #3
 80027fa:	781b      	ldrb	r3, [r3, #0]
 80027fc:	061a      	lsls	r2, r3, #24
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	3302      	adds	r3, #2
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	041b      	lsls	r3, r3, #16
 8002806:	431a      	orrs	r2, r3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	3301      	adds	r3, #1
 800280c:	781b      	ldrb	r3, [r3, #0]
 800280e:	021b      	lsls	r3, r3, #8
 8002810:	4313      	orrs	r3, r2
 8002812:	687a      	ldr	r2, [r7, #4]
 8002814:	7812      	ldrb	r2, [r2, #0]
 8002816:	4313      	orrs	r3, r2
 8002818:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800281a:	68ba      	ldr	r2, [r7, #8]
 800281c:	4b06      	ldr	r3, [pc, #24]	@ (8002838 <ETH_MACAddressConfig+0x6c>)
 800281e:	4413      	add	r3, r2
 8002820:	461a      	mov	r2, r3
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	6013      	str	r3, [r2, #0]
}
 8002826:	bf00      	nop
 8002828:	371c      	adds	r7, #28
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr
 8002832:	bf00      	nop
 8002834:	40028040 	.word	0x40028040
 8002838:	40028044 	.word	0x40028044

0800283c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800283c:	b480      	push	{r7}
 800283e:	b085      	sub	sp, #20
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002844:	2300      	movs	r3, #0
 8002846:	60fb      	str	r3, [r7, #12]
 8002848:	e03e      	b.n	80028c8 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	68d9      	ldr	r1, [r3, #12]
 800284e:	68fa      	ldr	r2, [r7, #12]
 8002850:	4613      	mov	r3, r2
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	4413      	add	r3, r2
 8002856:	00db      	lsls	r3, r3, #3
 8002858:	440b      	add	r3, r1
 800285a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	2200      	movs	r2, #0
 8002860:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	2200      	movs	r2, #0
 8002866:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	2200      	movs	r2, #0
 800286c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	2200      	movs	r2, #0
 8002872:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002874:	68b9      	ldr	r1, [r7, #8]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	68fa      	ldr	r2, [r7, #12]
 800287a:	3206      	adds	r2, #6
 800287c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2b02      	cmp	r3, #2
 8002890:	d80c      	bhi.n	80028ac <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	68d9      	ldr	r1, [r3, #12]
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	1c5a      	adds	r2, r3, #1
 800289a:	4613      	mov	r3, r2
 800289c:	009b      	lsls	r3, r3, #2
 800289e:	4413      	add	r3, r2
 80028a0:	00db      	lsls	r3, r3, #3
 80028a2:	440b      	add	r3, r1
 80028a4:	461a      	mov	r2, r3
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	60da      	str	r2, [r3, #12]
 80028aa:	e004      	b.n	80028b6 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	68db      	ldr	r3, [r3, #12]
 80028b0:	461a      	mov	r2, r3
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	3301      	adds	r3, #1
 80028c6:	60fb      	str	r3, [r7, #12]
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2b03      	cmp	r3, #3
 80028cc:	d9bd      	bls.n	800284a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2200      	movs	r2, #0
 80028d2:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	68da      	ldr	r2, [r3, #12]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80028e0:	611a      	str	r2, [r3, #16]
}
 80028e2:	bf00      	nop
 80028e4:	3714      	adds	r7, #20
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr

080028ee <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80028ee:	b480      	push	{r7}
 80028f0:	b085      	sub	sp, #20
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80028f6:	2300      	movs	r3, #0
 80028f8:	60fb      	str	r3, [r7, #12]
 80028fa:	e048      	b.n	800298e <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6919      	ldr	r1, [r3, #16]
 8002900:	68fa      	ldr	r2, [r7, #12]
 8002902:	4613      	mov	r3, r2
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	4413      	add	r3, r2
 8002908:	00db      	lsls	r3, r3, #3
 800290a:	440b      	add	r3, r1
 800290c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	2200      	movs	r2, #0
 8002912:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	2200      	movs	r2, #0
 8002918:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	2200      	movs	r2, #0
 800291e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	2200      	movs	r2, #0
 8002924:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	2200      	movs	r2, #0
 800292a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	2200      	movs	r2, #0
 8002930:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002938:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	695b      	ldr	r3, [r3, #20]
 800293e:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002952:	68b9      	ldr	r1, [r7, #8]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	68fa      	ldr	r2, [r7, #12]
 8002958:	3212      	adds	r2, #18
 800295a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2b02      	cmp	r3, #2
 8002962:	d80c      	bhi.n	800297e <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6919      	ldr	r1, [r3, #16]
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	1c5a      	adds	r2, r3, #1
 800296c:	4613      	mov	r3, r2
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	4413      	add	r3, r2
 8002972:	00db      	lsls	r3, r3, #3
 8002974:	440b      	add	r3, r1
 8002976:	461a      	mov	r2, r3
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	60da      	str	r2, [r3, #12]
 800297c:	e004      	b.n	8002988 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	691b      	ldr	r3, [r3, #16]
 8002982:	461a      	mov	r2, r3
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	3301      	adds	r3, #1
 800298c:	60fb      	str	r3, [r7, #12]
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	2b03      	cmp	r3, #3
 8002992:	d9b3      	bls.n	80028fc <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2200      	movs	r2, #0
 8002998:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2200      	movs	r2, #0
 800299e:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2200      	movs	r2, #0
 80029a4:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2200      	movs	r2, #0
 80029aa:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2200      	movs	r2, #0
 80029b0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	691a      	ldr	r2, [r3, #16]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80029be:	60da      	str	r2, [r3, #12]
}
 80029c0:	bf00      	nop
 80029c2:	3714      	adds	r7, #20
 80029c4:	46bd      	mov	sp, r7
 80029c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ca:	4770      	bx	lr

080029cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b089      	sub	sp, #36	@ 0x24
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
 80029d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80029d6:	2300      	movs	r3, #0
 80029d8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80029da:	2300      	movs	r3, #0
 80029dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80029de:	2300      	movs	r3, #0
 80029e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80029e2:	2300      	movs	r3, #0
 80029e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80029e6:	2300      	movs	r3, #0
 80029e8:	61fb      	str	r3, [r7, #28]
 80029ea:	e175      	b.n	8002cd8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80029ec:	2201      	movs	r2, #1
 80029ee:	69fb      	ldr	r3, [r7, #28]
 80029f0:	fa02 f303 	lsl.w	r3, r2, r3
 80029f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	697a      	ldr	r2, [r7, #20]
 80029fc:	4013      	ands	r3, r2
 80029fe:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8002a00:	693a      	ldr	r2, [r7, #16]
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	429a      	cmp	r2, r3
 8002a06:	f040 8164 	bne.w	8002cd2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	f003 0303 	and.w	r3, r3, #3
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d005      	beq.n	8002a22 <HAL_GPIO_Init+0x56>
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	f003 0303 	and.w	r3, r3, #3
 8002a1e:	2b02      	cmp	r3, #2
 8002a20:	d130      	bne.n	8002a84 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002a28:	69fb      	ldr	r3, [r7, #28]
 8002a2a:	005b      	lsls	r3, r3, #1
 8002a2c:	2203      	movs	r2, #3
 8002a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a32:	43db      	mvns	r3, r3
 8002a34:	69ba      	ldr	r2, [r7, #24]
 8002a36:	4013      	ands	r3, r2
 8002a38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	68da      	ldr	r2, [r3, #12]
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	005b      	lsls	r3, r3, #1
 8002a42:	fa02 f303 	lsl.w	r3, r2, r3
 8002a46:	69ba      	ldr	r2, [r7, #24]
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	69ba      	ldr	r2, [r7, #24]
 8002a50:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a58:	2201      	movs	r2, #1
 8002a5a:	69fb      	ldr	r3, [r7, #28]
 8002a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a60:	43db      	mvns	r3, r3
 8002a62:	69ba      	ldr	r2, [r7, #24]
 8002a64:	4013      	ands	r3, r2
 8002a66:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	091b      	lsrs	r3, r3, #4
 8002a6e:	f003 0201 	and.w	r2, r3, #1
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	fa02 f303 	lsl.w	r3, r2, r3
 8002a78:	69ba      	ldr	r2, [r7, #24]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	69ba      	ldr	r2, [r7, #24]
 8002a82:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	f003 0303 	and.w	r3, r3, #3
 8002a8c:	2b03      	cmp	r3, #3
 8002a8e:	d017      	beq.n	8002ac0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	005b      	lsls	r3, r3, #1
 8002a9a:	2203      	movs	r2, #3
 8002a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa0:	43db      	mvns	r3, r3
 8002aa2:	69ba      	ldr	r2, [r7, #24]
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	689a      	ldr	r2, [r3, #8]
 8002aac:	69fb      	ldr	r3, [r7, #28]
 8002aae:	005b      	lsls	r3, r3, #1
 8002ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab4:	69ba      	ldr	r2, [r7, #24]
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	69ba      	ldr	r2, [r7, #24]
 8002abe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	f003 0303 	and.w	r3, r3, #3
 8002ac8:	2b02      	cmp	r3, #2
 8002aca:	d123      	bne.n	8002b14 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002acc:	69fb      	ldr	r3, [r7, #28]
 8002ace:	08da      	lsrs	r2, r3, #3
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	3208      	adds	r2, #8
 8002ad4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ad8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	f003 0307 	and.w	r3, r3, #7
 8002ae0:	009b      	lsls	r3, r3, #2
 8002ae2:	220f      	movs	r2, #15
 8002ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae8:	43db      	mvns	r3, r3
 8002aea:	69ba      	ldr	r2, [r7, #24]
 8002aec:	4013      	ands	r3, r2
 8002aee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	691a      	ldr	r2, [r3, #16]
 8002af4:	69fb      	ldr	r3, [r7, #28]
 8002af6:	f003 0307 	and.w	r3, r3, #7
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	fa02 f303 	lsl.w	r3, r2, r3
 8002b00:	69ba      	ldr	r2, [r7, #24]
 8002b02:	4313      	orrs	r3, r2
 8002b04:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	08da      	lsrs	r2, r3, #3
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	3208      	adds	r2, #8
 8002b0e:	69b9      	ldr	r1, [r7, #24]
 8002b10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002b1a:	69fb      	ldr	r3, [r7, #28]
 8002b1c:	005b      	lsls	r3, r3, #1
 8002b1e:	2203      	movs	r2, #3
 8002b20:	fa02 f303 	lsl.w	r3, r2, r3
 8002b24:	43db      	mvns	r3, r3
 8002b26:	69ba      	ldr	r2, [r7, #24]
 8002b28:	4013      	ands	r3, r2
 8002b2a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	f003 0203 	and.w	r2, r3, #3
 8002b34:	69fb      	ldr	r3, [r7, #28]
 8002b36:	005b      	lsls	r3, r3, #1
 8002b38:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3c:	69ba      	ldr	r2, [r7, #24]
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	69ba      	ldr	r2, [r7, #24]
 8002b46:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	f000 80be 	beq.w	8002cd2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b56:	4b66      	ldr	r3, [pc, #408]	@ (8002cf0 <HAL_GPIO_Init+0x324>)
 8002b58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b5a:	4a65      	ldr	r2, [pc, #404]	@ (8002cf0 <HAL_GPIO_Init+0x324>)
 8002b5c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b60:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b62:	4b63      	ldr	r3, [pc, #396]	@ (8002cf0 <HAL_GPIO_Init+0x324>)
 8002b64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b66:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b6a:	60fb      	str	r3, [r7, #12]
 8002b6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002b6e:	4a61      	ldr	r2, [pc, #388]	@ (8002cf4 <HAL_GPIO_Init+0x328>)
 8002b70:	69fb      	ldr	r3, [r7, #28]
 8002b72:	089b      	lsrs	r3, r3, #2
 8002b74:	3302      	adds	r3, #2
 8002b76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002b7c:	69fb      	ldr	r3, [r7, #28]
 8002b7e:	f003 0303 	and.w	r3, r3, #3
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	220f      	movs	r2, #15
 8002b86:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8a:	43db      	mvns	r3, r3
 8002b8c:	69ba      	ldr	r2, [r7, #24]
 8002b8e:	4013      	ands	r3, r2
 8002b90:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	4a58      	ldr	r2, [pc, #352]	@ (8002cf8 <HAL_GPIO_Init+0x32c>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d037      	beq.n	8002c0a <HAL_GPIO_Init+0x23e>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	4a57      	ldr	r2, [pc, #348]	@ (8002cfc <HAL_GPIO_Init+0x330>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d031      	beq.n	8002c06 <HAL_GPIO_Init+0x23a>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	4a56      	ldr	r2, [pc, #344]	@ (8002d00 <HAL_GPIO_Init+0x334>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d02b      	beq.n	8002c02 <HAL_GPIO_Init+0x236>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	4a55      	ldr	r2, [pc, #340]	@ (8002d04 <HAL_GPIO_Init+0x338>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d025      	beq.n	8002bfe <HAL_GPIO_Init+0x232>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	4a54      	ldr	r2, [pc, #336]	@ (8002d08 <HAL_GPIO_Init+0x33c>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d01f      	beq.n	8002bfa <HAL_GPIO_Init+0x22e>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	4a53      	ldr	r2, [pc, #332]	@ (8002d0c <HAL_GPIO_Init+0x340>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d019      	beq.n	8002bf6 <HAL_GPIO_Init+0x22a>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	4a52      	ldr	r2, [pc, #328]	@ (8002d10 <HAL_GPIO_Init+0x344>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d013      	beq.n	8002bf2 <HAL_GPIO_Init+0x226>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4a51      	ldr	r2, [pc, #324]	@ (8002d14 <HAL_GPIO_Init+0x348>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d00d      	beq.n	8002bee <HAL_GPIO_Init+0x222>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	4a50      	ldr	r2, [pc, #320]	@ (8002d18 <HAL_GPIO_Init+0x34c>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d007      	beq.n	8002bea <HAL_GPIO_Init+0x21e>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	4a4f      	ldr	r2, [pc, #316]	@ (8002d1c <HAL_GPIO_Init+0x350>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d101      	bne.n	8002be6 <HAL_GPIO_Init+0x21a>
 8002be2:	2309      	movs	r3, #9
 8002be4:	e012      	b.n	8002c0c <HAL_GPIO_Init+0x240>
 8002be6:	230a      	movs	r3, #10
 8002be8:	e010      	b.n	8002c0c <HAL_GPIO_Init+0x240>
 8002bea:	2308      	movs	r3, #8
 8002bec:	e00e      	b.n	8002c0c <HAL_GPIO_Init+0x240>
 8002bee:	2307      	movs	r3, #7
 8002bf0:	e00c      	b.n	8002c0c <HAL_GPIO_Init+0x240>
 8002bf2:	2306      	movs	r3, #6
 8002bf4:	e00a      	b.n	8002c0c <HAL_GPIO_Init+0x240>
 8002bf6:	2305      	movs	r3, #5
 8002bf8:	e008      	b.n	8002c0c <HAL_GPIO_Init+0x240>
 8002bfa:	2304      	movs	r3, #4
 8002bfc:	e006      	b.n	8002c0c <HAL_GPIO_Init+0x240>
 8002bfe:	2303      	movs	r3, #3
 8002c00:	e004      	b.n	8002c0c <HAL_GPIO_Init+0x240>
 8002c02:	2302      	movs	r3, #2
 8002c04:	e002      	b.n	8002c0c <HAL_GPIO_Init+0x240>
 8002c06:	2301      	movs	r3, #1
 8002c08:	e000      	b.n	8002c0c <HAL_GPIO_Init+0x240>
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	69fa      	ldr	r2, [r7, #28]
 8002c0e:	f002 0203 	and.w	r2, r2, #3
 8002c12:	0092      	lsls	r2, r2, #2
 8002c14:	4093      	lsls	r3, r2
 8002c16:	69ba      	ldr	r2, [r7, #24]
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002c1c:	4935      	ldr	r1, [pc, #212]	@ (8002cf4 <HAL_GPIO_Init+0x328>)
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	089b      	lsrs	r3, r3, #2
 8002c22:	3302      	adds	r3, #2
 8002c24:	69ba      	ldr	r2, [r7, #24]
 8002c26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c2a:	4b3d      	ldr	r3, [pc, #244]	@ (8002d20 <HAL_GPIO_Init+0x354>)
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	43db      	mvns	r3, r3
 8002c34:	69ba      	ldr	r2, [r7, #24]
 8002c36:	4013      	ands	r3, r2
 8002c38:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d003      	beq.n	8002c4e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002c46:	69ba      	ldr	r2, [r7, #24]
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c4e:	4a34      	ldr	r2, [pc, #208]	@ (8002d20 <HAL_GPIO_Init+0x354>)
 8002c50:	69bb      	ldr	r3, [r7, #24]
 8002c52:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c54:	4b32      	ldr	r3, [pc, #200]	@ (8002d20 <HAL_GPIO_Init+0x354>)
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	43db      	mvns	r3, r3
 8002c5e:	69ba      	ldr	r2, [r7, #24]
 8002c60:	4013      	ands	r3, r2
 8002c62:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d003      	beq.n	8002c78 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002c70:	69ba      	ldr	r2, [r7, #24]
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	4313      	orrs	r3, r2
 8002c76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c78:	4a29      	ldr	r2, [pc, #164]	@ (8002d20 <HAL_GPIO_Init+0x354>)
 8002c7a:	69bb      	ldr	r3, [r7, #24]
 8002c7c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c7e:	4b28      	ldr	r3, [pc, #160]	@ (8002d20 <HAL_GPIO_Init+0x354>)
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	43db      	mvns	r3, r3
 8002c88:	69ba      	ldr	r2, [r7, #24]
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d003      	beq.n	8002ca2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002c9a:	69ba      	ldr	r2, [r7, #24]
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ca2:	4a1f      	ldr	r2, [pc, #124]	@ (8002d20 <HAL_GPIO_Init+0x354>)
 8002ca4:	69bb      	ldr	r3, [r7, #24]
 8002ca6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ca8:	4b1d      	ldr	r3, [pc, #116]	@ (8002d20 <HAL_GPIO_Init+0x354>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	43db      	mvns	r3, r3
 8002cb2:	69ba      	ldr	r2, [r7, #24]
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d003      	beq.n	8002ccc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002cc4:	69ba      	ldr	r2, [r7, #24]
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ccc:	4a14      	ldr	r2, [pc, #80]	@ (8002d20 <HAL_GPIO_Init+0x354>)
 8002cce:	69bb      	ldr	r3, [r7, #24]
 8002cd0:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	3301      	adds	r3, #1
 8002cd6:	61fb      	str	r3, [r7, #28]
 8002cd8:	69fb      	ldr	r3, [r7, #28]
 8002cda:	2b0f      	cmp	r3, #15
 8002cdc:	f67f ae86 	bls.w	80029ec <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002ce0:	bf00      	nop
 8002ce2:	bf00      	nop
 8002ce4:	3724      	adds	r7, #36	@ 0x24
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr
 8002cee:	bf00      	nop
 8002cf0:	40023800 	.word	0x40023800
 8002cf4:	40013800 	.word	0x40013800
 8002cf8:	40020000 	.word	0x40020000
 8002cfc:	40020400 	.word	0x40020400
 8002d00:	40020800 	.word	0x40020800
 8002d04:	40020c00 	.word	0x40020c00
 8002d08:	40021000 	.word	0x40021000
 8002d0c:	40021400 	.word	0x40021400
 8002d10:	40021800 	.word	0x40021800
 8002d14:	40021c00 	.word	0x40021c00
 8002d18:	40022000 	.word	0x40022000
 8002d1c:	40022400 	.word	0x40022400
 8002d20:	40013c00 	.word	0x40013c00

08002d24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b083      	sub	sp, #12
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	460b      	mov	r3, r1
 8002d2e:	807b      	strh	r3, [r7, #2]
 8002d30:	4613      	mov	r3, r2
 8002d32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d34:	787b      	ldrb	r3, [r7, #1]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d003      	beq.n	8002d42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d3a:	887a      	ldrh	r2, [r7, #2]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002d40:	e003      	b.n	8002d4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002d42:	887b      	ldrh	r3, [r7, #2]
 8002d44:	041a      	lsls	r2, r3, #16
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	619a      	str	r2, [r3, #24]
}
 8002d4a:	bf00      	nop
 8002d4c:	370c      	adds	r7, #12
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr
	...

08002d58 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b082      	sub	sp, #8
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	4603      	mov	r3, r0
 8002d60:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002d62:	4b08      	ldr	r3, [pc, #32]	@ (8002d84 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d64:	695a      	ldr	r2, [r3, #20]
 8002d66:	88fb      	ldrh	r3, [r7, #6]
 8002d68:	4013      	ands	r3, r2
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d006      	beq.n	8002d7c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002d6e:	4a05      	ldr	r2, [pc, #20]	@ (8002d84 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d70:	88fb      	ldrh	r3, [r7, #6]
 8002d72:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002d74:	88fb      	ldrh	r3, [r7, #6]
 8002d76:	4618      	mov	r0, r3
 8002d78:	f7fe f8b6 	bl	8000ee8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002d7c:	bf00      	nop
 8002d7e:	3708      	adds	r7, #8
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	40013c00 	.word	0x40013c00

08002d88 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b086      	sub	sp, #24
 8002d8c:	af02      	add	r7, sp, #8
 8002d8e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d101      	bne.n	8002d9a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e108      	b.n	8002fac <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d106      	bne.n	8002dba <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2200      	movs	r2, #0
 8002db0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002db4:	6878      	ldr	r0, [r7, #4]
 8002db6:	f7fe fb3d 	bl	8001434 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2203      	movs	r2, #3
 8002dbe:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002dc8:	d102      	bne.n	8002dd0 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f002 fb1f 	bl	8005418 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6818      	ldr	r0, [r3, #0]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	7c1a      	ldrb	r2, [r3, #16]
 8002de2:	f88d 2000 	strb.w	r2, [sp]
 8002de6:	3304      	adds	r3, #4
 8002de8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002dea:	f002 fabb 	bl	8005364 <USB_CoreInit>
 8002dee:	4603      	mov	r3, r0
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d005      	beq.n	8002e00 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2202      	movs	r2, #2
 8002df8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e0d5      	b.n	8002fac <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	2100      	movs	r1, #0
 8002e06:	4618      	mov	r0, r3
 8002e08:	f002 fb17 	bl	800543a <USB_SetCurrentMode>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d005      	beq.n	8002e1e <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2202      	movs	r2, #2
 8002e16:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e0c6      	b.n	8002fac <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e1e:	2300      	movs	r3, #0
 8002e20:	73fb      	strb	r3, [r7, #15]
 8002e22:	e04a      	b.n	8002eba <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002e24:	7bfa      	ldrb	r2, [r7, #15]
 8002e26:	6879      	ldr	r1, [r7, #4]
 8002e28:	4613      	mov	r3, r2
 8002e2a:	00db      	lsls	r3, r3, #3
 8002e2c:	4413      	add	r3, r2
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	440b      	add	r3, r1
 8002e32:	3315      	adds	r3, #21
 8002e34:	2201      	movs	r2, #1
 8002e36:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002e38:	7bfa      	ldrb	r2, [r7, #15]
 8002e3a:	6879      	ldr	r1, [r7, #4]
 8002e3c:	4613      	mov	r3, r2
 8002e3e:	00db      	lsls	r3, r3, #3
 8002e40:	4413      	add	r3, r2
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	440b      	add	r3, r1
 8002e46:	3314      	adds	r3, #20
 8002e48:	7bfa      	ldrb	r2, [r7, #15]
 8002e4a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002e4c:	7bfa      	ldrb	r2, [r7, #15]
 8002e4e:	7bfb      	ldrb	r3, [r7, #15]
 8002e50:	b298      	uxth	r0, r3
 8002e52:	6879      	ldr	r1, [r7, #4]
 8002e54:	4613      	mov	r3, r2
 8002e56:	00db      	lsls	r3, r3, #3
 8002e58:	4413      	add	r3, r2
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	440b      	add	r3, r1
 8002e5e:	332e      	adds	r3, #46	@ 0x2e
 8002e60:	4602      	mov	r2, r0
 8002e62:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002e64:	7bfa      	ldrb	r2, [r7, #15]
 8002e66:	6879      	ldr	r1, [r7, #4]
 8002e68:	4613      	mov	r3, r2
 8002e6a:	00db      	lsls	r3, r3, #3
 8002e6c:	4413      	add	r3, r2
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	440b      	add	r3, r1
 8002e72:	3318      	adds	r3, #24
 8002e74:	2200      	movs	r2, #0
 8002e76:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002e78:	7bfa      	ldrb	r2, [r7, #15]
 8002e7a:	6879      	ldr	r1, [r7, #4]
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	00db      	lsls	r3, r3, #3
 8002e80:	4413      	add	r3, r2
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	440b      	add	r3, r1
 8002e86:	331c      	adds	r3, #28
 8002e88:	2200      	movs	r2, #0
 8002e8a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002e8c:	7bfa      	ldrb	r2, [r7, #15]
 8002e8e:	6879      	ldr	r1, [r7, #4]
 8002e90:	4613      	mov	r3, r2
 8002e92:	00db      	lsls	r3, r3, #3
 8002e94:	4413      	add	r3, r2
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	440b      	add	r3, r1
 8002e9a:	3320      	adds	r3, #32
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002ea0:	7bfa      	ldrb	r2, [r7, #15]
 8002ea2:	6879      	ldr	r1, [r7, #4]
 8002ea4:	4613      	mov	r3, r2
 8002ea6:	00db      	lsls	r3, r3, #3
 8002ea8:	4413      	add	r3, r2
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	440b      	add	r3, r1
 8002eae:	3324      	adds	r3, #36	@ 0x24
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002eb4:	7bfb      	ldrb	r3, [r7, #15]
 8002eb6:	3301      	adds	r3, #1
 8002eb8:	73fb      	strb	r3, [r7, #15]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	791b      	ldrb	r3, [r3, #4]
 8002ebe:	7bfa      	ldrb	r2, [r7, #15]
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d3af      	bcc.n	8002e24 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	73fb      	strb	r3, [r7, #15]
 8002ec8:	e044      	b.n	8002f54 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002eca:	7bfa      	ldrb	r2, [r7, #15]
 8002ecc:	6879      	ldr	r1, [r7, #4]
 8002ece:	4613      	mov	r3, r2
 8002ed0:	00db      	lsls	r3, r3, #3
 8002ed2:	4413      	add	r3, r2
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	440b      	add	r3, r1
 8002ed8:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002edc:	2200      	movs	r2, #0
 8002ede:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002ee0:	7bfa      	ldrb	r2, [r7, #15]
 8002ee2:	6879      	ldr	r1, [r7, #4]
 8002ee4:	4613      	mov	r3, r2
 8002ee6:	00db      	lsls	r3, r3, #3
 8002ee8:	4413      	add	r3, r2
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	440b      	add	r3, r1
 8002eee:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002ef2:	7bfa      	ldrb	r2, [r7, #15]
 8002ef4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002ef6:	7bfa      	ldrb	r2, [r7, #15]
 8002ef8:	6879      	ldr	r1, [r7, #4]
 8002efa:	4613      	mov	r3, r2
 8002efc:	00db      	lsls	r3, r3, #3
 8002efe:	4413      	add	r3, r2
 8002f00:	009b      	lsls	r3, r3, #2
 8002f02:	440b      	add	r3, r1
 8002f04:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002f08:	2200      	movs	r2, #0
 8002f0a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002f0c:	7bfa      	ldrb	r2, [r7, #15]
 8002f0e:	6879      	ldr	r1, [r7, #4]
 8002f10:	4613      	mov	r3, r2
 8002f12:	00db      	lsls	r3, r3, #3
 8002f14:	4413      	add	r3, r2
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	440b      	add	r3, r1
 8002f1a:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002f1e:	2200      	movs	r2, #0
 8002f20:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002f22:	7bfa      	ldrb	r2, [r7, #15]
 8002f24:	6879      	ldr	r1, [r7, #4]
 8002f26:	4613      	mov	r3, r2
 8002f28:	00db      	lsls	r3, r3, #3
 8002f2a:	4413      	add	r3, r2
 8002f2c:	009b      	lsls	r3, r3, #2
 8002f2e:	440b      	add	r3, r1
 8002f30:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002f34:	2200      	movs	r2, #0
 8002f36:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002f38:	7bfa      	ldrb	r2, [r7, #15]
 8002f3a:	6879      	ldr	r1, [r7, #4]
 8002f3c:	4613      	mov	r3, r2
 8002f3e:	00db      	lsls	r3, r3, #3
 8002f40:	4413      	add	r3, r2
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	440b      	add	r3, r1
 8002f46:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f4e:	7bfb      	ldrb	r3, [r7, #15]
 8002f50:	3301      	adds	r3, #1
 8002f52:	73fb      	strb	r3, [r7, #15]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	791b      	ldrb	r3, [r3, #4]
 8002f58:	7bfa      	ldrb	r2, [r7, #15]
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d3b5      	bcc.n	8002eca <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6818      	ldr	r0, [r3, #0]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	7c1a      	ldrb	r2, [r3, #16]
 8002f66:	f88d 2000 	strb.w	r2, [sp]
 8002f6a:	3304      	adds	r3, #4
 8002f6c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f6e:	f002 fab1 	bl	80054d4 <USB_DevInit>
 8002f72:	4603      	mov	r3, r0
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d005      	beq.n	8002f84 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2202      	movs	r2, #2
 8002f7c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	e013      	b.n	8002fac <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2200      	movs	r2, #0
 8002f88:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	7b1b      	ldrb	r3, [r3, #12]
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d102      	bne.n	8002fa0 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f000 f80a 	bl	8002fb4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f002 fc6c 	bl	8005882 <USB_DevDisconnect>

  return HAL_OK;
 8002faa:	2300      	movs	r3, #0
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	3710      	adds	r7, #16
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}

08002fb4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b085      	sub	sp, #20
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	699b      	ldr	r3, [r3, #24]
 8002fd6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002fe2:	4b05      	ldr	r3, [pc, #20]	@ (8002ff8 <HAL_PCDEx_ActivateLPM+0x44>)
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	68fa      	ldr	r2, [r7, #12]
 8002fe8:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8002fea:	2300      	movs	r3, #0
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	3714      	adds	r7, #20
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr
 8002ff8:	10000003 	.word	0x10000003

08002ffc <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003000:	4b05      	ldr	r3, [pc, #20]	@ (8003018 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a04      	ldr	r2, [pc, #16]	@ (8003018 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003006:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800300a:	6013      	str	r3, [r2, #0]
}
 800300c:	bf00      	nop
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr
 8003016:	bf00      	nop
 8003018:	40007000 	.word	0x40007000

0800301c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b082      	sub	sp, #8
 8003020:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003022:	2300      	movs	r3, #0
 8003024:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003026:	4b23      	ldr	r3, [pc, #140]	@ (80030b4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800302a:	4a22      	ldr	r2, [pc, #136]	@ (80030b4 <HAL_PWREx_EnableOverDrive+0x98>)
 800302c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003030:	6413      	str	r3, [r2, #64]	@ 0x40
 8003032:	4b20      	ldr	r3, [pc, #128]	@ (80030b4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003036:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800303a:	603b      	str	r3, [r7, #0]
 800303c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800303e:	4b1e      	ldr	r3, [pc, #120]	@ (80030b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a1d      	ldr	r2, [pc, #116]	@ (80030b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003044:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003048:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800304a:	f7fe fc2d 	bl	80018a8 <HAL_GetTick>
 800304e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003050:	e009      	b.n	8003066 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003052:	f7fe fc29 	bl	80018a8 <HAL_GetTick>
 8003056:	4602      	mov	r2, r0
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	1ad3      	subs	r3, r2, r3
 800305c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003060:	d901      	bls.n	8003066 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003062:	2303      	movs	r3, #3
 8003064:	e022      	b.n	80030ac <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003066:	4b14      	ldr	r3, [pc, #80]	@ (80030b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800306e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003072:	d1ee      	bne.n	8003052 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003074:	4b10      	ldr	r3, [pc, #64]	@ (80030b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a0f      	ldr	r2, [pc, #60]	@ (80030b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800307a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800307e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003080:	f7fe fc12 	bl	80018a8 <HAL_GetTick>
 8003084:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003086:	e009      	b.n	800309c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003088:	f7fe fc0e 	bl	80018a8 <HAL_GetTick>
 800308c:	4602      	mov	r2, r0
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003096:	d901      	bls.n	800309c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003098:	2303      	movs	r3, #3
 800309a:	e007      	b.n	80030ac <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800309c:	4b06      	ldr	r3, [pc, #24]	@ (80030b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030a4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80030a8:	d1ee      	bne.n	8003088 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80030aa:	2300      	movs	r3, #0
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3708      	adds	r7, #8
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}
 80030b4:	40023800 	.word	0x40023800
 80030b8:	40007000 	.word	0x40007000

080030bc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b086      	sub	sp, #24
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80030c4:	2300      	movs	r3, #0
 80030c6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d101      	bne.n	80030d2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e29b      	b.n	800360a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 0301 	and.w	r3, r3, #1
 80030da:	2b00      	cmp	r3, #0
 80030dc:	f000 8087 	beq.w	80031ee <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80030e0:	4b96      	ldr	r3, [pc, #600]	@ (800333c <HAL_RCC_OscConfig+0x280>)
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	f003 030c 	and.w	r3, r3, #12
 80030e8:	2b04      	cmp	r3, #4
 80030ea:	d00c      	beq.n	8003106 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030ec:	4b93      	ldr	r3, [pc, #588]	@ (800333c <HAL_RCC_OscConfig+0x280>)
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	f003 030c 	and.w	r3, r3, #12
 80030f4:	2b08      	cmp	r3, #8
 80030f6:	d112      	bne.n	800311e <HAL_RCC_OscConfig+0x62>
 80030f8:	4b90      	ldr	r3, [pc, #576]	@ (800333c <HAL_RCC_OscConfig+0x280>)
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003100:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003104:	d10b      	bne.n	800311e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003106:	4b8d      	ldr	r3, [pc, #564]	@ (800333c <HAL_RCC_OscConfig+0x280>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800310e:	2b00      	cmp	r3, #0
 8003110:	d06c      	beq.n	80031ec <HAL_RCC_OscConfig+0x130>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d168      	bne.n	80031ec <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e275      	b.n	800360a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003126:	d106      	bne.n	8003136 <HAL_RCC_OscConfig+0x7a>
 8003128:	4b84      	ldr	r3, [pc, #528]	@ (800333c <HAL_RCC_OscConfig+0x280>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a83      	ldr	r2, [pc, #524]	@ (800333c <HAL_RCC_OscConfig+0x280>)
 800312e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003132:	6013      	str	r3, [r2, #0]
 8003134:	e02e      	b.n	8003194 <HAL_RCC_OscConfig+0xd8>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d10c      	bne.n	8003158 <HAL_RCC_OscConfig+0x9c>
 800313e:	4b7f      	ldr	r3, [pc, #508]	@ (800333c <HAL_RCC_OscConfig+0x280>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a7e      	ldr	r2, [pc, #504]	@ (800333c <HAL_RCC_OscConfig+0x280>)
 8003144:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003148:	6013      	str	r3, [r2, #0]
 800314a:	4b7c      	ldr	r3, [pc, #496]	@ (800333c <HAL_RCC_OscConfig+0x280>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a7b      	ldr	r2, [pc, #492]	@ (800333c <HAL_RCC_OscConfig+0x280>)
 8003150:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003154:	6013      	str	r3, [r2, #0]
 8003156:	e01d      	b.n	8003194 <HAL_RCC_OscConfig+0xd8>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003160:	d10c      	bne.n	800317c <HAL_RCC_OscConfig+0xc0>
 8003162:	4b76      	ldr	r3, [pc, #472]	@ (800333c <HAL_RCC_OscConfig+0x280>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a75      	ldr	r2, [pc, #468]	@ (800333c <HAL_RCC_OscConfig+0x280>)
 8003168:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800316c:	6013      	str	r3, [r2, #0]
 800316e:	4b73      	ldr	r3, [pc, #460]	@ (800333c <HAL_RCC_OscConfig+0x280>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a72      	ldr	r2, [pc, #456]	@ (800333c <HAL_RCC_OscConfig+0x280>)
 8003174:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003178:	6013      	str	r3, [r2, #0]
 800317a:	e00b      	b.n	8003194 <HAL_RCC_OscConfig+0xd8>
 800317c:	4b6f      	ldr	r3, [pc, #444]	@ (800333c <HAL_RCC_OscConfig+0x280>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a6e      	ldr	r2, [pc, #440]	@ (800333c <HAL_RCC_OscConfig+0x280>)
 8003182:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003186:	6013      	str	r3, [r2, #0]
 8003188:	4b6c      	ldr	r3, [pc, #432]	@ (800333c <HAL_RCC_OscConfig+0x280>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a6b      	ldr	r2, [pc, #428]	@ (800333c <HAL_RCC_OscConfig+0x280>)
 800318e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003192:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d013      	beq.n	80031c4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800319c:	f7fe fb84 	bl	80018a8 <HAL_GetTick>
 80031a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031a2:	e008      	b.n	80031b6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031a4:	f7fe fb80 	bl	80018a8 <HAL_GetTick>
 80031a8:	4602      	mov	r2, r0
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	2b64      	cmp	r3, #100	@ 0x64
 80031b0:	d901      	bls.n	80031b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80031b2:	2303      	movs	r3, #3
 80031b4:	e229      	b.n	800360a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031b6:	4b61      	ldr	r3, [pc, #388]	@ (800333c <HAL_RCC_OscConfig+0x280>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d0f0      	beq.n	80031a4 <HAL_RCC_OscConfig+0xe8>
 80031c2:	e014      	b.n	80031ee <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031c4:	f7fe fb70 	bl	80018a8 <HAL_GetTick>
 80031c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031ca:	e008      	b.n	80031de <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031cc:	f7fe fb6c 	bl	80018a8 <HAL_GetTick>
 80031d0:	4602      	mov	r2, r0
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	2b64      	cmp	r3, #100	@ 0x64
 80031d8:	d901      	bls.n	80031de <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80031da:	2303      	movs	r3, #3
 80031dc:	e215      	b.n	800360a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031de:	4b57      	ldr	r3, [pc, #348]	@ (800333c <HAL_RCC_OscConfig+0x280>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d1f0      	bne.n	80031cc <HAL_RCC_OscConfig+0x110>
 80031ea:	e000      	b.n	80031ee <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 0302 	and.w	r3, r3, #2
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d069      	beq.n	80032ce <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80031fa:	4b50      	ldr	r3, [pc, #320]	@ (800333c <HAL_RCC_OscConfig+0x280>)
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	f003 030c 	and.w	r3, r3, #12
 8003202:	2b00      	cmp	r3, #0
 8003204:	d00b      	beq.n	800321e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003206:	4b4d      	ldr	r3, [pc, #308]	@ (800333c <HAL_RCC_OscConfig+0x280>)
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	f003 030c 	and.w	r3, r3, #12
 800320e:	2b08      	cmp	r3, #8
 8003210:	d11c      	bne.n	800324c <HAL_RCC_OscConfig+0x190>
 8003212:	4b4a      	ldr	r3, [pc, #296]	@ (800333c <HAL_RCC_OscConfig+0x280>)
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800321a:	2b00      	cmp	r3, #0
 800321c:	d116      	bne.n	800324c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800321e:	4b47      	ldr	r3, [pc, #284]	@ (800333c <HAL_RCC_OscConfig+0x280>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 0302 	and.w	r3, r3, #2
 8003226:	2b00      	cmp	r3, #0
 8003228:	d005      	beq.n	8003236 <HAL_RCC_OscConfig+0x17a>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	68db      	ldr	r3, [r3, #12]
 800322e:	2b01      	cmp	r3, #1
 8003230:	d001      	beq.n	8003236 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e1e9      	b.n	800360a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003236:	4b41      	ldr	r3, [pc, #260]	@ (800333c <HAL_RCC_OscConfig+0x280>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	691b      	ldr	r3, [r3, #16]
 8003242:	00db      	lsls	r3, r3, #3
 8003244:	493d      	ldr	r1, [pc, #244]	@ (800333c <HAL_RCC_OscConfig+0x280>)
 8003246:	4313      	orrs	r3, r2
 8003248:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800324a:	e040      	b.n	80032ce <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d023      	beq.n	800329c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003254:	4b39      	ldr	r3, [pc, #228]	@ (800333c <HAL_RCC_OscConfig+0x280>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a38      	ldr	r2, [pc, #224]	@ (800333c <HAL_RCC_OscConfig+0x280>)
 800325a:	f043 0301 	orr.w	r3, r3, #1
 800325e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003260:	f7fe fb22 	bl	80018a8 <HAL_GetTick>
 8003264:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003266:	e008      	b.n	800327a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003268:	f7fe fb1e 	bl	80018a8 <HAL_GetTick>
 800326c:	4602      	mov	r2, r0
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	2b02      	cmp	r3, #2
 8003274:	d901      	bls.n	800327a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003276:	2303      	movs	r3, #3
 8003278:	e1c7      	b.n	800360a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800327a:	4b30      	ldr	r3, [pc, #192]	@ (800333c <HAL_RCC_OscConfig+0x280>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 0302 	and.w	r3, r3, #2
 8003282:	2b00      	cmp	r3, #0
 8003284:	d0f0      	beq.n	8003268 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003286:	4b2d      	ldr	r3, [pc, #180]	@ (800333c <HAL_RCC_OscConfig+0x280>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	691b      	ldr	r3, [r3, #16]
 8003292:	00db      	lsls	r3, r3, #3
 8003294:	4929      	ldr	r1, [pc, #164]	@ (800333c <HAL_RCC_OscConfig+0x280>)
 8003296:	4313      	orrs	r3, r2
 8003298:	600b      	str	r3, [r1, #0]
 800329a:	e018      	b.n	80032ce <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800329c:	4b27      	ldr	r3, [pc, #156]	@ (800333c <HAL_RCC_OscConfig+0x280>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a26      	ldr	r2, [pc, #152]	@ (800333c <HAL_RCC_OscConfig+0x280>)
 80032a2:	f023 0301 	bic.w	r3, r3, #1
 80032a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032a8:	f7fe fafe 	bl	80018a8 <HAL_GetTick>
 80032ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032ae:	e008      	b.n	80032c2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032b0:	f7fe fafa 	bl	80018a8 <HAL_GetTick>
 80032b4:	4602      	mov	r2, r0
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	1ad3      	subs	r3, r2, r3
 80032ba:	2b02      	cmp	r3, #2
 80032bc:	d901      	bls.n	80032c2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80032be:	2303      	movs	r3, #3
 80032c0:	e1a3      	b.n	800360a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032c2:	4b1e      	ldr	r3, [pc, #120]	@ (800333c <HAL_RCC_OscConfig+0x280>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 0302 	and.w	r3, r3, #2
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d1f0      	bne.n	80032b0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 0308 	and.w	r3, r3, #8
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d038      	beq.n	800334c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	695b      	ldr	r3, [r3, #20]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d019      	beq.n	8003316 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032e2:	4b16      	ldr	r3, [pc, #88]	@ (800333c <HAL_RCC_OscConfig+0x280>)
 80032e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032e6:	4a15      	ldr	r2, [pc, #84]	@ (800333c <HAL_RCC_OscConfig+0x280>)
 80032e8:	f043 0301 	orr.w	r3, r3, #1
 80032ec:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032ee:	f7fe fadb 	bl	80018a8 <HAL_GetTick>
 80032f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032f4:	e008      	b.n	8003308 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032f6:	f7fe fad7 	bl	80018a8 <HAL_GetTick>
 80032fa:	4602      	mov	r2, r0
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	1ad3      	subs	r3, r2, r3
 8003300:	2b02      	cmp	r3, #2
 8003302:	d901      	bls.n	8003308 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003304:	2303      	movs	r3, #3
 8003306:	e180      	b.n	800360a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003308:	4b0c      	ldr	r3, [pc, #48]	@ (800333c <HAL_RCC_OscConfig+0x280>)
 800330a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800330c:	f003 0302 	and.w	r3, r3, #2
 8003310:	2b00      	cmp	r3, #0
 8003312:	d0f0      	beq.n	80032f6 <HAL_RCC_OscConfig+0x23a>
 8003314:	e01a      	b.n	800334c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003316:	4b09      	ldr	r3, [pc, #36]	@ (800333c <HAL_RCC_OscConfig+0x280>)
 8003318:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800331a:	4a08      	ldr	r2, [pc, #32]	@ (800333c <HAL_RCC_OscConfig+0x280>)
 800331c:	f023 0301 	bic.w	r3, r3, #1
 8003320:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003322:	f7fe fac1 	bl	80018a8 <HAL_GetTick>
 8003326:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003328:	e00a      	b.n	8003340 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800332a:	f7fe fabd 	bl	80018a8 <HAL_GetTick>
 800332e:	4602      	mov	r2, r0
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	1ad3      	subs	r3, r2, r3
 8003334:	2b02      	cmp	r3, #2
 8003336:	d903      	bls.n	8003340 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003338:	2303      	movs	r3, #3
 800333a:	e166      	b.n	800360a <HAL_RCC_OscConfig+0x54e>
 800333c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003340:	4b92      	ldr	r3, [pc, #584]	@ (800358c <HAL_RCC_OscConfig+0x4d0>)
 8003342:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003344:	f003 0302 	and.w	r3, r3, #2
 8003348:	2b00      	cmp	r3, #0
 800334a:	d1ee      	bne.n	800332a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f003 0304 	and.w	r3, r3, #4
 8003354:	2b00      	cmp	r3, #0
 8003356:	f000 80a4 	beq.w	80034a2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800335a:	4b8c      	ldr	r3, [pc, #560]	@ (800358c <HAL_RCC_OscConfig+0x4d0>)
 800335c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800335e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003362:	2b00      	cmp	r3, #0
 8003364:	d10d      	bne.n	8003382 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003366:	4b89      	ldr	r3, [pc, #548]	@ (800358c <HAL_RCC_OscConfig+0x4d0>)
 8003368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800336a:	4a88      	ldr	r2, [pc, #544]	@ (800358c <HAL_RCC_OscConfig+0x4d0>)
 800336c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003370:	6413      	str	r3, [r2, #64]	@ 0x40
 8003372:	4b86      	ldr	r3, [pc, #536]	@ (800358c <HAL_RCC_OscConfig+0x4d0>)
 8003374:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003376:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800337a:	60bb      	str	r3, [r7, #8]
 800337c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800337e:	2301      	movs	r3, #1
 8003380:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003382:	4b83      	ldr	r3, [pc, #524]	@ (8003590 <HAL_RCC_OscConfig+0x4d4>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800338a:	2b00      	cmp	r3, #0
 800338c:	d118      	bne.n	80033c0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800338e:	4b80      	ldr	r3, [pc, #512]	@ (8003590 <HAL_RCC_OscConfig+0x4d4>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a7f      	ldr	r2, [pc, #508]	@ (8003590 <HAL_RCC_OscConfig+0x4d4>)
 8003394:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003398:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800339a:	f7fe fa85 	bl	80018a8 <HAL_GetTick>
 800339e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033a0:	e008      	b.n	80033b4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033a2:	f7fe fa81 	bl	80018a8 <HAL_GetTick>
 80033a6:	4602      	mov	r2, r0
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	1ad3      	subs	r3, r2, r3
 80033ac:	2b64      	cmp	r3, #100	@ 0x64
 80033ae:	d901      	bls.n	80033b4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80033b0:	2303      	movs	r3, #3
 80033b2:	e12a      	b.n	800360a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033b4:	4b76      	ldr	r3, [pc, #472]	@ (8003590 <HAL_RCC_OscConfig+0x4d4>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d0f0      	beq.n	80033a2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d106      	bne.n	80033d6 <HAL_RCC_OscConfig+0x31a>
 80033c8:	4b70      	ldr	r3, [pc, #448]	@ (800358c <HAL_RCC_OscConfig+0x4d0>)
 80033ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033cc:	4a6f      	ldr	r2, [pc, #444]	@ (800358c <HAL_RCC_OscConfig+0x4d0>)
 80033ce:	f043 0301 	orr.w	r3, r3, #1
 80033d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80033d4:	e02d      	b.n	8003432 <HAL_RCC_OscConfig+0x376>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d10c      	bne.n	80033f8 <HAL_RCC_OscConfig+0x33c>
 80033de:	4b6b      	ldr	r3, [pc, #428]	@ (800358c <HAL_RCC_OscConfig+0x4d0>)
 80033e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033e2:	4a6a      	ldr	r2, [pc, #424]	@ (800358c <HAL_RCC_OscConfig+0x4d0>)
 80033e4:	f023 0301 	bic.w	r3, r3, #1
 80033e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80033ea:	4b68      	ldr	r3, [pc, #416]	@ (800358c <HAL_RCC_OscConfig+0x4d0>)
 80033ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033ee:	4a67      	ldr	r2, [pc, #412]	@ (800358c <HAL_RCC_OscConfig+0x4d0>)
 80033f0:	f023 0304 	bic.w	r3, r3, #4
 80033f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80033f6:	e01c      	b.n	8003432 <HAL_RCC_OscConfig+0x376>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	2b05      	cmp	r3, #5
 80033fe:	d10c      	bne.n	800341a <HAL_RCC_OscConfig+0x35e>
 8003400:	4b62      	ldr	r3, [pc, #392]	@ (800358c <HAL_RCC_OscConfig+0x4d0>)
 8003402:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003404:	4a61      	ldr	r2, [pc, #388]	@ (800358c <HAL_RCC_OscConfig+0x4d0>)
 8003406:	f043 0304 	orr.w	r3, r3, #4
 800340a:	6713      	str	r3, [r2, #112]	@ 0x70
 800340c:	4b5f      	ldr	r3, [pc, #380]	@ (800358c <HAL_RCC_OscConfig+0x4d0>)
 800340e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003410:	4a5e      	ldr	r2, [pc, #376]	@ (800358c <HAL_RCC_OscConfig+0x4d0>)
 8003412:	f043 0301 	orr.w	r3, r3, #1
 8003416:	6713      	str	r3, [r2, #112]	@ 0x70
 8003418:	e00b      	b.n	8003432 <HAL_RCC_OscConfig+0x376>
 800341a:	4b5c      	ldr	r3, [pc, #368]	@ (800358c <HAL_RCC_OscConfig+0x4d0>)
 800341c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800341e:	4a5b      	ldr	r2, [pc, #364]	@ (800358c <HAL_RCC_OscConfig+0x4d0>)
 8003420:	f023 0301 	bic.w	r3, r3, #1
 8003424:	6713      	str	r3, [r2, #112]	@ 0x70
 8003426:	4b59      	ldr	r3, [pc, #356]	@ (800358c <HAL_RCC_OscConfig+0x4d0>)
 8003428:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800342a:	4a58      	ldr	r2, [pc, #352]	@ (800358c <HAL_RCC_OscConfig+0x4d0>)
 800342c:	f023 0304 	bic.w	r3, r3, #4
 8003430:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d015      	beq.n	8003466 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800343a:	f7fe fa35 	bl	80018a8 <HAL_GetTick>
 800343e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003440:	e00a      	b.n	8003458 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003442:	f7fe fa31 	bl	80018a8 <HAL_GetTick>
 8003446:	4602      	mov	r2, r0
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	1ad3      	subs	r3, r2, r3
 800344c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003450:	4293      	cmp	r3, r2
 8003452:	d901      	bls.n	8003458 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003454:	2303      	movs	r3, #3
 8003456:	e0d8      	b.n	800360a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003458:	4b4c      	ldr	r3, [pc, #304]	@ (800358c <HAL_RCC_OscConfig+0x4d0>)
 800345a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800345c:	f003 0302 	and.w	r3, r3, #2
 8003460:	2b00      	cmp	r3, #0
 8003462:	d0ee      	beq.n	8003442 <HAL_RCC_OscConfig+0x386>
 8003464:	e014      	b.n	8003490 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003466:	f7fe fa1f 	bl	80018a8 <HAL_GetTick>
 800346a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800346c:	e00a      	b.n	8003484 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800346e:	f7fe fa1b 	bl	80018a8 <HAL_GetTick>
 8003472:	4602      	mov	r2, r0
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	1ad3      	subs	r3, r2, r3
 8003478:	f241 3288 	movw	r2, #5000	@ 0x1388
 800347c:	4293      	cmp	r3, r2
 800347e:	d901      	bls.n	8003484 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003480:	2303      	movs	r3, #3
 8003482:	e0c2      	b.n	800360a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003484:	4b41      	ldr	r3, [pc, #260]	@ (800358c <HAL_RCC_OscConfig+0x4d0>)
 8003486:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003488:	f003 0302 	and.w	r3, r3, #2
 800348c:	2b00      	cmp	r3, #0
 800348e:	d1ee      	bne.n	800346e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003490:	7dfb      	ldrb	r3, [r7, #23]
 8003492:	2b01      	cmp	r3, #1
 8003494:	d105      	bne.n	80034a2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003496:	4b3d      	ldr	r3, [pc, #244]	@ (800358c <HAL_RCC_OscConfig+0x4d0>)
 8003498:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800349a:	4a3c      	ldr	r2, [pc, #240]	@ (800358c <HAL_RCC_OscConfig+0x4d0>)
 800349c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80034a0:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	699b      	ldr	r3, [r3, #24]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	f000 80ae 	beq.w	8003608 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034ac:	4b37      	ldr	r3, [pc, #220]	@ (800358c <HAL_RCC_OscConfig+0x4d0>)
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	f003 030c 	and.w	r3, r3, #12
 80034b4:	2b08      	cmp	r3, #8
 80034b6:	d06d      	beq.n	8003594 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	699b      	ldr	r3, [r3, #24]
 80034bc:	2b02      	cmp	r3, #2
 80034be:	d14b      	bne.n	8003558 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034c0:	4b32      	ldr	r3, [pc, #200]	@ (800358c <HAL_RCC_OscConfig+0x4d0>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a31      	ldr	r2, [pc, #196]	@ (800358c <HAL_RCC_OscConfig+0x4d0>)
 80034c6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80034ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034cc:	f7fe f9ec 	bl	80018a8 <HAL_GetTick>
 80034d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034d2:	e008      	b.n	80034e6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034d4:	f7fe f9e8 	bl	80018a8 <HAL_GetTick>
 80034d8:	4602      	mov	r2, r0
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	1ad3      	subs	r3, r2, r3
 80034de:	2b02      	cmp	r3, #2
 80034e0:	d901      	bls.n	80034e6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80034e2:	2303      	movs	r3, #3
 80034e4:	e091      	b.n	800360a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034e6:	4b29      	ldr	r3, [pc, #164]	@ (800358c <HAL_RCC_OscConfig+0x4d0>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d1f0      	bne.n	80034d4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	69da      	ldr	r2, [r3, #28]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6a1b      	ldr	r3, [r3, #32]
 80034fa:	431a      	orrs	r2, r3
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003500:	019b      	lsls	r3, r3, #6
 8003502:	431a      	orrs	r2, r3
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003508:	085b      	lsrs	r3, r3, #1
 800350a:	3b01      	subs	r3, #1
 800350c:	041b      	lsls	r3, r3, #16
 800350e:	431a      	orrs	r2, r3
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003514:	061b      	lsls	r3, r3, #24
 8003516:	431a      	orrs	r2, r3
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800351c:	071b      	lsls	r3, r3, #28
 800351e:	491b      	ldr	r1, [pc, #108]	@ (800358c <HAL_RCC_OscConfig+0x4d0>)
 8003520:	4313      	orrs	r3, r2
 8003522:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003524:	4b19      	ldr	r3, [pc, #100]	@ (800358c <HAL_RCC_OscConfig+0x4d0>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a18      	ldr	r2, [pc, #96]	@ (800358c <HAL_RCC_OscConfig+0x4d0>)
 800352a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800352e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003530:	f7fe f9ba 	bl	80018a8 <HAL_GetTick>
 8003534:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003536:	e008      	b.n	800354a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003538:	f7fe f9b6 	bl	80018a8 <HAL_GetTick>
 800353c:	4602      	mov	r2, r0
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	1ad3      	subs	r3, r2, r3
 8003542:	2b02      	cmp	r3, #2
 8003544:	d901      	bls.n	800354a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003546:	2303      	movs	r3, #3
 8003548:	e05f      	b.n	800360a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800354a:	4b10      	ldr	r3, [pc, #64]	@ (800358c <HAL_RCC_OscConfig+0x4d0>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003552:	2b00      	cmp	r3, #0
 8003554:	d0f0      	beq.n	8003538 <HAL_RCC_OscConfig+0x47c>
 8003556:	e057      	b.n	8003608 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003558:	4b0c      	ldr	r3, [pc, #48]	@ (800358c <HAL_RCC_OscConfig+0x4d0>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a0b      	ldr	r2, [pc, #44]	@ (800358c <HAL_RCC_OscConfig+0x4d0>)
 800355e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003562:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003564:	f7fe f9a0 	bl	80018a8 <HAL_GetTick>
 8003568:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800356a:	e008      	b.n	800357e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800356c:	f7fe f99c 	bl	80018a8 <HAL_GetTick>
 8003570:	4602      	mov	r2, r0
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	1ad3      	subs	r3, r2, r3
 8003576:	2b02      	cmp	r3, #2
 8003578:	d901      	bls.n	800357e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800357a:	2303      	movs	r3, #3
 800357c:	e045      	b.n	800360a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800357e:	4b03      	ldr	r3, [pc, #12]	@ (800358c <HAL_RCC_OscConfig+0x4d0>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003586:	2b00      	cmp	r3, #0
 8003588:	d1f0      	bne.n	800356c <HAL_RCC_OscConfig+0x4b0>
 800358a:	e03d      	b.n	8003608 <HAL_RCC_OscConfig+0x54c>
 800358c:	40023800 	.word	0x40023800
 8003590:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003594:	4b1f      	ldr	r3, [pc, #124]	@ (8003614 <HAL_RCC_OscConfig+0x558>)
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	699b      	ldr	r3, [r3, #24]
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d030      	beq.n	8003604 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d129      	bne.n	8003604 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035ba:	429a      	cmp	r2, r3
 80035bc:	d122      	bne.n	8003604 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80035be:	68fa      	ldr	r2, [r7, #12]
 80035c0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80035c4:	4013      	ands	r3, r2
 80035c6:	687a      	ldr	r2, [r7, #4]
 80035c8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80035ca:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d119      	bne.n	8003604 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035da:	085b      	lsrs	r3, r3, #1
 80035dc:	3b01      	subs	r3, #1
 80035de:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d10f      	bne.n	8003604 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035ee:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d107      	bne.n	8003604 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035fe:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003600:	429a      	cmp	r2, r3
 8003602:	d001      	beq.n	8003608 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	e000      	b.n	800360a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003608:	2300      	movs	r3, #0
}
 800360a:	4618      	mov	r0, r3
 800360c:	3718      	adds	r7, #24
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}
 8003612:	bf00      	nop
 8003614:	40023800 	.word	0x40023800

08003618 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b084      	sub	sp, #16
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
 8003620:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003622:	2300      	movs	r3, #0
 8003624:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d101      	bne.n	8003630 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	e0d0      	b.n	80037d2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003630:	4b6a      	ldr	r3, [pc, #424]	@ (80037dc <HAL_RCC_ClockConfig+0x1c4>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 030f 	and.w	r3, r3, #15
 8003638:	683a      	ldr	r2, [r7, #0]
 800363a:	429a      	cmp	r2, r3
 800363c:	d910      	bls.n	8003660 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800363e:	4b67      	ldr	r3, [pc, #412]	@ (80037dc <HAL_RCC_ClockConfig+0x1c4>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f023 020f 	bic.w	r2, r3, #15
 8003646:	4965      	ldr	r1, [pc, #404]	@ (80037dc <HAL_RCC_ClockConfig+0x1c4>)
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	4313      	orrs	r3, r2
 800364c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800364e:	4b63      	ldr	r3, [pc, #396]	@ (80037dc <HAL_RCC_ClockConfig+0x1c4>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 030f 	and.w	r3, r3, #15
 8003656:	683a      	ldr	r2, [r7, #0]
 8003658:	429a      	cmp	r2, r3
 800365a:	d001      	beq.n	8003660 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	e0b8      	b.n	80037d2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 0302 	and.w	r3, r3, #2
 8003668:	2b00      	cmp	r3, #0
 800366a:	d020      	beq.n	80036ae <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f003 0304 	and.w	r3, r3, #4
 8003674:	2b00      	cmp	r3, #0
 8003676:	d005      	beq.n	8003684 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003678:	4b59      	ldr	r3, [pc, #356]	@ (80037e0 <HAL_RCC_ClockConfig+0x1c8>)
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	4a58      	ldr	r2, [pc, #352]	@ (80037e0 <HAL_RCC_ClockConfig+0x1c8>)
 800367e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003682:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 0308 	and.w	r3, r3, #8
 800368c:	2b00      	cmp	r3, #0
 800368e:	d005      	beq.n	800369c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003690:	4b53      	ldr	r3, [pc, #332]	@ (80037e0 <HAL_RCC_ClockConfig+0x1c8>)
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	4a52      	ldr	r2, [pc, #328]	@ (80037e0 <HAL_RCC_ClockConfig+0x1c8>)
 8003696:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800369a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800369c:	4b50      	ldr	r3, [pc, #320]	@ (80037e0 <HAL_RCC_ClockConfig+0x1c8>)
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	494d      	ldr	r1, [pc, #308]	@ (80037e0 <HAL_RCC_ClockConfig+0x1c8>)
 80036aa:	4313      	orrs	r3, r2
 80036ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 0301 	and.w	r3, r3, #1
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d040      	beq.n	800373c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d107      	bne.n	80036d2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036c2:	4b47      	ldr	r3, [pc, #284]	@ (80037e0 <HAL_RCC_ClockConfig+0x1c8>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d115      	bne.n	80036fa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	e07f      	b.n	80037d2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	2b02      	cmp	r3, #2
 80036d8:	d107      	bne.n	80036ea <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036da:	4b41      	ldr	r3, [pc, #260]	@ (80037e0 <HAL_RCC_ClockConfig+0x1c8>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d109      	bne.n	80036fa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	e073      	b.n	80037d2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036ea:	4b3d      	ldr	r3, [pc, #244]	@ (80037e0 <HAL_RCC_ClockConfig+0x1c8>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 0302 	and.w	r3, r3, #2
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d101      	bne.n	80036fa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e06b      	b.n	80037d2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036fa:	4b39      	ldr	r3, [pc, #228]	@ (80037e0 <HAL_RCC_ClockConfig+0x1c8>)
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	f023 0203 	bic.w	r2, r3, #3
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	4936      	ldr	r1, [pc, #216]	@ (80037e0 <HAL_RCC_ClockConfig+0x1c8>)
 8003708:	4313      	orrs	r3, r2
 800370a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800370c:	f7fe f8cc 	bl	80018a8 <HAL_GetTick>
 8003710:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003712:	e00a      	b.n	800372a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003714:	f7fe f8c8 	bl	80018a8 <HAL_GetTick>
 8003718:	4602      	mov	r2, r0
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	1ad3      	subs	r3, r2, r3
 800371e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003722:	4293      	cmp	r3, r2
 8003724:	d901      	bls.n	800372a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003726:	2303      	movs	r3, #3
 8003728:	e053      	b.n	80037d2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800372a:	4b2d      	ldr	r3, [pc, #180]	@ (80037e0 <HAL_RCC_ClockConfig+0x1c8>)
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	f003 020c 	and.w	r2, r3, #12
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	429a      	cmp	r2, r3
 800373a:	d1eb      	bne.n	8003714 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800373c:	4b27      	ldr	r3, [pc, #156]	@ (80037dc <HAL_RCC_ClockConfig+0x1c4>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 030f 	and.w	r3, r3, #15
 8003744:	683a      	ldr	r2, [r7, #0]
 8003746:	429a      	cmp	r2, r3
 8003748:	d210      	bcs.n	800376c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800374a:	4b24      	ldr	r3, [pc, #144]	@ (80037dc <HAL_RCC_ClockConfig+0x1c4>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f023 020f 	bic.w	r2, r3, #15
 8003752:	4922      	ldr	r1, [pc, #136]	@ (80037dc <HAL_RCC_ClockConfig+0x1c4>)
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	4313      	orrs	r3, r2
 8003758:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800375a:	4b20      	ldr	r3, [pc, #128]	@ (80037dc <HAL_RCC_ClockConfig+0x1c4>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 030f 	and.w	r3, r3, #15
 8003762:	683a      	ldr	r2, [r7, #0]
 8003764:	429a      	cmp	r2, r3
 8003766:	d001      	beq.n	800376c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	e032      	b.n	80037d2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 0304 	and.w	r3, r3, #4
 8003774:	2b00      	cmp	r3, #0
 8003776:	d008      	beq.n	800378a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003778:	4b19      	ldr	r3, [pc, #100]	@ (80037e0 <HAL_RCC_ClockConfig+0x1c8>)
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	4916      	ldr	r1, [pc, #88]	@ (80037e0 <HAL_RCC_ClockConfig+0x1c8>)
 8003786:	4313      	orrs	r3, r2
 8003788:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f003 0308 	and.w	r3, r3, #8
 8003792:	2b00      	cmp	r3, #0
 8003794:	d009      	beq.n	80037aa <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003796:	4b12      	ldr	r3, [pc, #72]	@ (80037e0 <HAL_RCC_ClockConfig+0x1c8>)
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	691b      	ldr	r3, [r3, #16]
 80037a2:	00db      	lsls	r3, r3, #3
 80037a4:	490e      	ldr	r1, [pc, #56]	@ (80037e0 <HAL_RCC_ClockConfig+0x1c8>)
 80037a6:	4313      	orrs	r3, r2
 80037a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80037aa:	f000 f821 	bl	80037f0 <HAL_RCC_GetSysClockFreq>
 80037ae:	4602      	mov	r2, r0
 80037b0:	4b0b      	ldr	r3, [pc, #44]	@ (80037e0 <HAL_RCC_ClockConfig+0x1c8>)
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	091b      	lsrs	r3, r3, #4
 80037b6:	f003 030f 	and.w	r3, r3, #15
 80037ba:	490a      	ldr	r1, [pc, #40]	@ (80037e4 <HAL_RCC_ClockConfig+0x1cc>)
 80037bc:	5ccb      	ldrb	r3, [r1, r3]
 80037be:	fa22 f303 	lsr.w	r3, r2, r3
 80037c2:	4a09      	ldr	r2, [pc, #36]	@ (80037e8 <HAL_RCC_ClockConfig+0x1d0>)
 80037c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80037c6:	4b09      	ldr	r3, [pc, #36]	@ (80037ec <HAL_RCC_ClockConfig+0x1d4>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4618      	mov	r0, r3
 80037cc:	f7fd feac 	bl	8001528 <HAL_InitTick>

  return HAL_OK;
 80037d0:	2300      	movs	r3, #0
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	3710      	adds	r7, #16
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}
 80037da:	bf00      	nop
 80037dc:	40023c00 	.word	0x40023c00
 80037e0:	40023800 	.word	0x40023800
 80037e4:	0800dbd4 	.word	0x0800dbd4
 80037e8:	20000000 	.word	0x20000000
 80037ec:	20000004 	.word	0x20000004

080037f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037f4:	b094      	sub	sp, #80	@ 0x50
 80037f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80037f8:	2300      	movs	r3, #0
 80037fa:	647b      	str	r3, [r7, #68]	@ 0x44
 80037fc:	2300      	movs	r3, #0
 80037fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003800:	2300      	movs	r3, #0
 8003802:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8003804:	2300      	movs	r3, #0
 8003806:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003808:	4b79      	ldr	r3, [pc, #484]	@ (80039f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	f003 030c 	and.w	r3, r3, #12
 8003810:	2b08      	cmp	r3, #8
 8003812:	d00d      	beq.n	8003830 <HAL_RCC_GetSysClockFreq+0x40>
 8003814:	2b08      	cmp	r3, #8
 8003816:	f200 80e1 	bhi.w	80039dc <HAL_RCC_GetSysClockFreq+0x1ec>
 800381a:	2b00      	cmp	r3, #0
 800381c:	d002      	beq.n	8003824 <HAL_RCC_GetSysClockFreq+0x34>
 800381e:	2b04      	cmp	r3, #4
 8003820:	d003      	beq.n	800382a <HAL_RCC_GetSysClockFreq+0x3a>
 8003822:	e0db      	b.n	80039dc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003824:	4b73      	ldr	r3, [pc, #460]	@ (80039f4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003826:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003828:	e0db      	b.n	80039e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800382a:	4b73      	ldr	r3, [pc, #460]	@ (80039f8 <HAL_RCC_GetSysClockFreq+0x208>)
 800382c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800382e:	e0d8      	b.n	80039e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003830:	4b6f      	ldr	r3, [pc, #444]	@ (80039f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003838:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800383a:	4b6d      	ldr	r3, [pc, #436]	@ (80039f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003842:	2b00      	cmp	r3, #0
 8003844:	d063      	beq.n	800390e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003846:	4b6a      	ldr	r3, [pc, #424]	@ (80039f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	099b      	lsrs	r3, r3, #6
 800384c:	2200      	movs	r2, #0
 800384e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003850:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003852:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003854:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003858:	633b      	str	r3, [r7, #48]	@ 0x30
 800385a:	2300      	movs	r3, #0
 800385c:	637b      	str	r3, [r7, #52]	@ 0x34
 800385e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003862:	4622      	mov	r2, r4
 8003864:	462b      	mov	r3, r5
 8003866:	f04f 0000 	mov.w	r0, #0
 800386a:	f04f 0100 	mov.w	r1, #0
 800386e:	0159      	lsls	r1, r3, #5
 8003870:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003874:	0150      	lsls	r0, r2, #5
 8003876:	4602      	mov	r2, r0
 8003878:	460b      	mov	r3, r1
 800387a:	4621      	mov	r1, r4
 800387c:	1a51      	subs	r1, r2, r1
 800387e:	6139      	str	r1, [r7, #16]
 8003880:	4629      	mov	r1, r5
 8003882:	eb63 0301 	sbc.w	r3, r3, r1
 8003886:	617b      	str	r3, [r7, #20]
 8003888:	f04f 0200 	mov.w	r2, #0
 800388c:	f04f 0300 	mov.w	r3, #0
 8003890:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003894:	4659      	mov	r1, fp
 8003896:	018b      	lsls	r3, r1, #6
 8003898:	4651      	mov	r1, sl
 800389a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800389e:	4651      	mov	r1, sl
 80038a0:	018a      	lsls	r2, r1, #6
 80038a2:	4651      	mov	r1, sl
 80038a4:	ebb2 0801 	subs.w	r8, r2, r1
 80038a8:	4659      	mov	r1, fp
 80038aa:	eb63 0901 	sbc.w	r9, r3, r1
 80038ae:	f04f 0200 	mov.w	r2, #0
 80038b2:	f04f 0300 	mov.w	r3, #0
 80038b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80038ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80038be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80038c2:	4690      	mov	r8, r2
 80038c4:	4699      	mov	r9, r3
 80038c6:	4623      	mov	r3, r4
 80038c8:	eb18 0303 	adds.w	r3, r8, r3
 80038cc:	60bb      	str	r3, [r7, #8]
 80038ce:	462b      	mov	r3, r5
 80038d0:	eb49 0303 	adc.w	r3, r9, r3
 80038d4:	60fb      	str	r3, [r7, #12]
 80038d6:	f04f 0200 	mov.w	r2, #0
 80038da:	f04f 0300 	mov.w	r3, #0
 80038de:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80038e2:	4629      	mov	r1, r5
 80038e4:	024b      	lsls	r3, r1, #9
 80038e6:	4621      	mov	r1, r4
 80038e8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80038ec:	4621      	mov	r1, r4
 80038ee:	024a      	lsls	r2, r1, #9
 80038f0:	4610      	mov	r0, r2
 80038f2:	4619      	mov	r1, r3
 80038f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80038f6:	2200      	movs	r2, #0
 80038f8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80038fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80038fc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003900:	f7fc feb2 	bl	8000668 <__aeabi_uldivmod>
 8003904:	4602      	mov	r2, r0
 8003906:	460b      	mov	r3, r1
 8003908:	4613      	mov	r3, r2
 800390a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800390c:	e058      	b.n	80039c0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800390e:	4b38      	ldr	r3, [pc, #224]	@ (80039f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	099b      	lsrs	r3, r3, #6
 8003914:	2200      	movs	r2, #0
 8003916:	4618      	mov	r0, r3
 8003918:	4611      	mov	r1, r2
 800391a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800391e:	623b      	str	r3, [r7, #32]
 8003920:	2300      	movs	r3, #0
 8003922:	627b      	str	r3, [r7, #36]	@ 0x24
 8003924:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003928:	4642      	mov	r2, r8
 800392a:	464b      	mov	r3, r9
 800392c:	f04f 0000 	mov.w	r0, #0
 8003930:	f04f 0100 	mov.w	r1, #0
 8003934:	0159      	lsls	r1, r3, #5
 8003936:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800393a:	0150      	lsls	r0, r2, #5
 800393c:	4602      	mov	r2, r0
 800393e:	460b      	mov	r3, r1
 8003940:	4641      	mov	r1, r8
 8003942:	ebb2 0a01 	subs.w	sl, r2, r1
 8003946:	4649      	mov	r1, r9
 8003948:	eb63 0b01 	sbc.w	fp, r3, r1
 800394c:	f04f 0200 	mov.w	r2, #0
 8003950:	f04f 0300 	mov.w	r3, #0
 8003954:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003958:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800395c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003960:	ebb2 040a 	subs.w	r4, r2, sl
 8003964:	eb63 050b 	sbc.w	r5, r3, fp
 8003968:	f04f 0200 	mov.w	r2, #0
 800396c:	f04f 0300 	mov.w	r3, #0
 8003970:	00eb      	lsls	r3, r5, #3
 8003972:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003976:	00e2      	lsls	r2, r4, #3
 8003978:	4614      	mov	r4, r2
 800397a:	461d      	mov	r5, r3
 800397c:	4643      	mov	r3, r8
 800397e:	18e3      	adds	r3, r4, r3
 8003980:	603b      	str	r3, [r7, #0]
 8003982:	464b      	mov	r3, r9
 8003984:	eb45 0303 	adc.w	r3, r5, r3
 8003988:	607b      	str	r3, [r7, #4]
 800398a:	f04f 0200 	mov.w	r2, #0
 800398e:	f04f 0300 	mov.w	r3, #0
 8003992:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003996:	4629      	mov	r1, r5
 8003998:	028b      	lsls	r3, r1, #10
 800399a:	4621      	mov	r1, r4
 800399c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80039a0:	4621      	mov	r1, r4
 80039a2:	028a      	lsls	r2, r1, #10
 80039a4:	4610      	mov	r0, r2
 80039a6:	4619      	mov	r1, r3
 80039a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80039aa:	2200      	movs	r2, #0
 80039ac:	61bb      	str	r3, [r7, #24]
 80039ae:	61fa      	str	r2, [r7, #28]
 80039b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80039b4:	f7fc fe58 	bl	8000668 <__aeabi_uldivmod>
 80039b8:	4602      	mov	r2, r0
 80039ba:	460b      	mov	r3, r1
 80039bc:	4613      	mov	r3, r2
 80039be:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80039c0:	4b0b      	ldr	r3, [pc, #44]	@ (80039f0 <HAL_RCC_GetSysClockFreq+0x200>)
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	0c1b      	lsrs	r3, r3, #16
 80039c6:	f003 0303 	and.w	r3, r3, #3
 80039ca:	3301      	adds	r3, #1
 80039cc:	005b      	lsls	r3, r3, #1
 80039ce:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80039d0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80039d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80039d8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80039da:	e002      	b.n	80039e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80039dc:	4b05      	ldr	r3, [pc, #20]	@ (80039f4 <HAL_RCC_GetSysClockFreq+0x204>)
 80039de:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80039e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3750      	adds	r7, #80	@ 0x50
 80039e8:	46bd      	mov	sp, r7
 80039ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039ee:	bf00      	nop
 80039f0:	40023800 	.word	0x40023800
 80039f4:	00f42400 	.word	0x00f42400
 80039f8:	007a1200 	.word	0x007a1200

080039fc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039fc:	b480      	push	{r7}
 80039fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a00:	4b03      	ldr	r3, [pc, #12]	@ (8003a10 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a02:	681b      	ldr	r3, [r3, #0]
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	46bd      	mov	sp, r7
 8003a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0c:	4770      	bx	lr
 8003a0e:	bf00      	nop
 8003a10:	20000000 	.word	0x20000000

08003a14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003a18:	f7ff fff0 	bl	80039fc <HAL_RCC_GetHCLKFreq>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	4b05      	ldr	r3, [pc, #20]	@ (8003a34 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	0a9b      	lsrs	r3, r3, #10
 8003a24:	f003 0307 	and.w	r3, r3, #7
 8003a28:	4903      	ldr	r1, [pc, #12]	@ (8003a38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a2a:	5ccb      	ldrb	r3, [r1, r3]
 8003a2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	bd80      	pop	{r7, pc}
 8003a34:	40023800 	.word	0x40023800
 8003a38:	0800dbe4 	.word	0x0800dbe4

08003a3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003a40:	f7ff ffdc 	bl	80039fc <HAL_RCC_GetHCLKFreq>
 8003a44:	4602      	mov	r2, r0
 8003a46:	4b05      	ldr	r3, [pc, #20]	@ (8003a5c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	0b5b      	lsrs	r3, r3, #13
 8003a4c:	f003 0307 	and.w	r3, r3, #7
 8003a50:	4903      	ldr	r1, [pc, #12]	@ (8003a60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a52:	5ccb      	ldrb	r3, [r1, r3]
 8003a54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	bd80      	pop	{r7, pc}
 8003a5c:	40023800 	.word	0x40023800
 8003a60:	0800dbe4 	.word	0x0800dbe4

08003a64 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b083      	sub	sp, #12
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
 8003a6c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	220f      	movs	r2, #15
 8003a72:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003a74:	4b12      	ldr	r3, [pc, #72]	@ (8003ac0 <HAL_RCC_GetClockConfig+0x5c>)
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	f003 0203 	and.w	r2, r3, #3
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003a80:	4b0f      	ldr	r3, [pc, #60]	@ (8003ac0 <HAL_RCC_GetClockConfig+0x5c>)
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003a8c:	4b0c      	ldr	r3, [pc, #48]	@ (8003ac0 <HAL_RCC_GetClockConfig+0x5c>)
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003a98:	4b09      	ldr	r3, [pc, #36]	@ (8003ac0 <HAL_RCC_GetClockConfig+0x5c>)
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	08db      	lsrs	r3, r3, #3
 8003a9e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003aa6:	4b07      	ldr	r3, [pc, #28]	@ (8003ac4 <HAL_RCC_GetClockConfig+0x60>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f003 020f 	and.w	r2, r3, #15
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	601a      	str	r2, [r3, #0]
}
 8003ab2:	bf00      	nop
 8003ab4:	370c      	adds	r7, #12
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr
 8003abe:	bf00      	nop
 8003ac0:	40023800 	.word	0x40023800
 8003ac4:	40023c00 	.word	0x40023c00

08003ac8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b088      	sub	sp, #32
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003adc:	2300      	movs	r3, #0
 8003ade:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f003 0301 	and.w	r3, r3, #1
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d012      	beq.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003af0:	4b69      	ldr	r3, [pc, #420]	@ (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	4a68      	ldr	r2, [pc, #416]	@ (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003af6:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003afa:	6093      	str	r3, [r2, #8]
 8003afc:	4b66      	ldr	r3, [pc, #408]	@ (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003afe:	689a      	ldr	r2, [r3, #8]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b04:	4964      	ldr	r1, [pc, #400]	@ (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b06:	4313      	orrs	r3, r2
 8003b08:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d101      	bne.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003b12:	2301      	movs	r3, #1
 8003b14:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d017      	beq.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003b22:	4b5d      	ldr	r3, [pc, #372]	@ (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b24:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003b28:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b30:	4959      	ldr	r1, [pc, #356]	@ (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b32:	4313      	orrs	r3, r2
 8003b34:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b3c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003b40:	d101      	bne.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003b42:	2301      	movs	r3, #1
 8003b44:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d101      	bne.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d017      	beq.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003b5e:	4b4e      	ldr	r3, [pc, #312]	@ (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b60:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003b64:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b6c:	494a      	ldr	r1, [pc, #296]	@ (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b78:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003b7c:	d101      	bne.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d101      	bne.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d001      	beq.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 0320 	and.w	r3, r3, #32
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	f000 808b 	beq.w	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003bac:	4b3a      	ldr	r3, [pc, #232]	@ (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bb0:	4a39      	ldr	r2, [pc, #228]	@ (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bb2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003bb6:	6413      	str	r3, [r2, #64]	@ 0x40
 8003bb8:	4b37      	ldr	r3, [pc, #220]	@ (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bbc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bc0:	60bb      	str	r3, [r7, #8]
 8003bc2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003bc4:	4b35      	ldr	r3, [pc, #212]	@ (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a34      	ldr	r2, [pc, #208]	@ (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003bca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bd0:	f7fd fe6a 	bl	80018a8 <HAL_GetTick>
 8003bd4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003bd6:	e008      	b.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bd8:	f7fd fe66 	bl	80018a8 <HAL_GetTick>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	1ad3      	subs	r3, r2, r3
 8003be2:	2b64      	cmp	r3, #100	@ 0x64
 8003be4:	d901      	bls.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003be6:	2303      	movs	r3, #3
 8003be8:	e38f      	b.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003bea:	4b2c      	ldr	r3, [pc, #176]	@ (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d0f0      	beq.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003bf6:	4b28      	ldr	r3, [pc, #160]	@ (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bf8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bfa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003bfe:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d035      	beq.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c0a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c0e:	693a      	ldr	r2, [r7, #16]
 8003c10:	429a      	cmp	r2, r3
 8003c12:	d02e      	beq.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c14:	4b20      	ldr	r3, [pc, #128]	@ (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c18:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c1c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c1e:	4b1e      	ldr	r3, [pc, #120]	@ (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c22:	4a1d      	ldr	r2, [pc, #116]	@ (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c28:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c2a:	4b1b      	ldr	r3, [pc, #108]	@ (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c2e:	4a1a      	ldr	r2, [pc, #104]	@ (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c30:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c34:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003c36:	4a18      	ldr	r2, [pc, #96]	@ (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003c3c:	4b16      	ldr	r3, [pc, #88]	@ (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c40:	f003 0301 	and.w	r3, r3, #1
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d114      	bne.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c48:	f7fd fe2e 	bl	80018a8 <HAL_GetTick>
 8003c4c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c4e:	e00a      	b.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c50:	f7fd fe2a 	bl	80018a8 <HAL_GetTick>
 8003c54:	4602      	mov	r2, r0
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	1ad3      	subs	r3, r2, r3
 8003c5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d901      	bls.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003c62:	2303      	movs	r3, #3
 8003c64:	e351      	b.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c66:	4b0c      	ldr	r3, [pc, #48]	@ (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c6a:	f003 0302 	and.w	r3, r3, #2
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d0ee      	beq.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c7a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003c7e:	d111      	bne.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003c80:	4b05      	ldr	r3, [pc, #20]	@ (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003c8c:	4b04      	ldr	r3, [pc, #16]	@ (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003c8e:	400b      	ands	r3, r1
 8003c90:	4901      	ldr	r1, [pc, #4]	@ (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c92:	4313      	orrs	r3, r2
 8003c94:	608b      	str	r3, [r1, #8]
 8003c96:	e00b      	b.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003c98:	40023800 	.word	0x40023800
 8003c9c:	40007000 	.word	0x40007000
 8003ca0:	0ffffcff 	.word	0x0ffffcff
 8003ca4:	4bac      	ldr	r3, [pc, #688]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	4aab      	ldr	r2, [pc, #684]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003caa:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003cae:	6093      	str	r3, [r2, #8]
 8003cb0:	4ba9      	ldr	r3, [pc, #676]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cb2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cbc:	49a6      	ldr	r1, [pc, #664]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 0310 	and.w	r3, r3, #16
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d010      	beq.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003cce:	4ba2      	ldr	r3, [pc, #648]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003cd4:	4aa0      	ldr	r2, [pc, #640]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cd6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003cda:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003cde:	4b9e      	ldr	r3, [pc, #632]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ce0:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ce8:	499b      	ldr	r1, [pc, #620]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cea:	4313      	orrs	r3, r2
 8003cec:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d00a      	beq.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003cfc:	4b96      	ldr	r3, [pc, #600]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003cfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d02:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003d0a:	4993      	ldr	r1, [pc, #588]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d00a      	beq.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003d1e:	4b8e      	ldr	r3, [pc, #568]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d24:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003d2c:	498a      	ldr	r1, [pc, #552]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d00a      	beq.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003d40:	4b85      	ldr	r3, [pc, #532]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d46:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d4e:	4982      	ldr	r1, [pc, #520]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d50:	4313      	orrs	r3, r2
 8003d52:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d00a      	beq.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003d62:	4b7d      	ldr	r3, [pc, #500]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d68:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d70:	4979      	ldr	r1, [pc, #484]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d72:	4313      	orrs	r3, r2
 8003d74:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d00a      	beq.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d84:	4b74      	ldr	r3, [pc, #464]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d8a:	f023 0203 	bic.w	r2, r3, #3
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d92:	4971      	ldr	r1, [pc, #452]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003d94:	4313      	orrs	r3, r2
 8003d96:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d00a      	beq.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003da6:	4b6c      	ldr	r3, [pc, #432]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003da8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dac:	f023 020c 	bic.w	r2, r3, #12
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003db4:	4968      	ldr	r1, [pc, #416]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003db6:	4313      	orrs	r3, r2
 8003db8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d00a      	beq.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003dc8:	4b63      	ldr	r3, [pc, #396]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003dca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dce:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003dd6:	4960      	ldr	r1, [pc, #384]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d00a      	beq.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003dea:	4b5b      	ldr	r3, [pc, #364]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003dec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003df0:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003df8:	4957      	ldr	r1, [pc, #348]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d00a      	beq.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003e0c:	4b52      	ldr	r3, [pc, #328]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e12:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e1a:	494f      	ldr	r1, [pc, #316]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d00a      	beq.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003e2e:	4b4a      	ldr	r3, [pc, #296]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e34:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e3c:	4946      	ldr	r1, [pc, #280]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d00a      	beq.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003e50:	4b41      	ldr	r3, [pc, #260]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e56:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e5e:	493e      	ldr	r1, [pc, #248]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e60:	4313      	orrs	r3, r2
 8003e62:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d00a      	beq.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003e72:	4b39      	ldr	r3, [pc, #228]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e78:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e80:	4935      	ldr	r1, [pc, #212]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e82:	4313      	orrs	r3, r2
 8003e84:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d00a      	beq.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003e94:	4b30      	ldr	r3, [pc, #192]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e9a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003ea2:	492d      	ldr	r1, [pc, #180]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d011      	beq.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003eb6:	4b28      	ldr	r3, [pc, #160]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003eb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ebc:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003ec4:	4924      	ldr	r1, [pc, #144]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003ed0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003ed4:	d101      	bne.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 0308 	and.w	r3, r3, #8
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d001      	beq.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d00a      	beq.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003ef6:	4b18      	ldr	r3, [pc, #96]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ef8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003efc:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f04:	4914      	ldr	r1, [pc, #80]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f06:	4313      	orrs	r3, r2
 8003f08:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d00b      	beq.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003f18:	4b0f      	ldr	r3, [pc, #60]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f1e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003f28:	490b      	ldr	r1, [pc, #44]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d00f      	beq.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003f3c:	4b06      	ldr	r3, [pc, #24]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f42:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f4c:	4902      	ldr	r1, [pc, #8]	@ (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003f54:	e002      	b.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003f56:	bf00      	nop
 8003f58:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d00b      	beq.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003f68:	4b8a      	ldr	r3, [pc, #552]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003f6e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f78:	4986      	ldr	r1, [pc, #536]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d00b      	beq.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003f8c:	4b81      	ldr	r3, [pc, #516]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003f92:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003f9c:	497d      	ldr	r1, [pc, #500]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003fa4:	69fb      	ldr	r3, [r7, #28]
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	d006      	beq.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	f000 80d6 	beq.w	8004164 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003fb8:	4b76      	ldr	r3, [pc, #472]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a75      	ldr	r2, [pc, #468]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fbe:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003fc2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fc4:	f7fd fc70 	bl	80018a8 <HAL_GetTick>
 8003fc8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003fca:	e008      	b.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003fcc:	f7fd fc6c 	bl	80018a8 <HAL_GetTick>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	1ad3      	subs	r3, r2, r3
 8003fd6:	2b64      	cmp	r3, #100	@ 0x64
 8003fd8:	d901      	bls.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003fda:	2303      	movs	r3, #3
 8003fdc:	e195      	b.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003fde:	4b6d      	ldr	r3, [pc, #436]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d1f0      	bne.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 0301 	and.w	r3, r3, #1
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d021      	beq.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d11d      	bne.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003ffe:	4b65      	ldr	r3, [pc, #404]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004000:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004004:	0c1b      	lsrs	r3, r3, #16
 8004006:	f003 0303 	and.w	r3, r3, #3
 800400a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800400c:	4b61      	ldr	r3, [pc, #388]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800400e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004012:	0e1b      	lsrs	r3, r3, #24
 8004014:	f003 030f 	and.w	r3, r3, #15
 8004018:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	019a      	lsls	r2, r3, #6
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	041b      	lsls	r3, r3, #16
 8004024:	431a      	orrs	r2, r3
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	061b      	lsls	r3, r3, #24
 800402a:	431a      	orrs	r2, r3
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	071b      	lsls	r3, r3, #28
 8004032:	4958      	ldr	r1, [pc, #352]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004034:	4313      	orrs	r3, r2
 8004036:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004042:	2b00      	cmp	r3, #0
 8004044:	d004      	beq.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800404a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800404e:	d00a      	beq.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004058:	2b00      	cmp	r3, #0
 800405a:	d02e      	beq.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004060:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004064:	d129      	bne.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004066:	4b4b      	ldr	r3, [pc, #300]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004068:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800406c:	0c1b      	lsrs	r3, r3, #16
 800406e:	f003 0303 	and.w	r3, r3, #3
 8004072:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004074:	4b47      	ldr	r3, [pc, #284]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004076:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800407a:	0f1b      	lsrs	r3, r3, #28
 800407c:	f003 0307 	and.w	r3, r3, #7
 8004080:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	019a      	lsls	r2, r3, #6
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	041b      	lsls	r3, r3, #16
 800408c:	431a      	orrs	r2, r3
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	68db      	ldr	r3, [r3, #12]
 8004092:	061b      	lsls	r3, r3, #24
 8004094:	431a      	orrs	r2, r3
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	071b      	lsls	r3, r3, #28
 800409a:	493e      	ldr	r1, [pc, #248]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800409c:	4313      	orrs	r3, r2
 800409e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80040a2:	4b3c      	ldr	r3, [pc, #240]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80040a8:	f023 021f 	bic.w	r2, r3, #31
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040b0:	3b01      	subs	r3, #1
 80040b2:	4938      	ldr	r1, [pc, #224]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040b4:	4313      	orrs	r3, r2
 80040b6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d01d      	beq.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80040c6:	4b33      	ldr	r3, [pc, #204]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80040cc:	0e1b      	lsrs	r3, r3, #24
 80040ce:	f003 030f 	and.w	r3, r3, #15
 80040d2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80040d4:	4b2f      	ldr	r3, [pc, #188]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80040da:	0f1b      	lsrs	r3, r3, #28
 80040dc:	f003 0307 	and.w	r3, r3, #7
 80040e0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	019a      	lsls	r2, r3, #6
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	691b      	ldr	r3, [r3, #16]
 80040ec:	041b      	lsls	r3, r3, #16
 80040ee:	431a      	orrs	r2, r3
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	061b      	lsls	r3, r3, #24
 80040f4:	431a      	orrs	r2, r3
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	071b      	lsls	r3, r3, #28
 80040fa:	4926      	ldr	r1, [pc, #152]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80040fc:	4313      	orrs	r3, r2
 80040fe:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800410a:	2b00      	cmp	r3, #0
 800410c:	d011      	beq.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	019a      	lsls	r2, r3, #6
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	691b      	ldr	r3, [r3, #16]
 8004118:	041b      	lsls	r3, r3, #16
 800411a:	431a      	orrs	r2, r3
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	68db      	ldr	r3, [r3, #12]
 8004120:	061b      	lsls	r3, r3, #24
 8004122:	431a      	orrs	r2, r3
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	071b      	lsls	r3, r3, #28
 800412a:	491a      	ldr	r1, [pc, #104]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800412c:	4313      	orrs	r3, r2
 800412e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004132:	4b18      	ldr	r3, [pc, #96]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a17      	ldr	r2, [pc, #92]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004138:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800413c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800413e:	f7fd fbb3 	bl	80018a8 <HAL_GetTick>
 8004142:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004144:	e008      	b.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004146:	f7fd fbaf 	bl	80018a8 <HAL_GetTick>
 800414a:	4602      	mov	r2, r0
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	1ad3      	subs	r3, r2, r3
 8004150:	2b64      	cmp	r3, #100	@ 0x64
 8004152:	d901      	bls.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004154:	2303      	movs	r3, #3
 8004156:	e0d8      	b.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004158:	4b0e      	ldr	r3, [pc, #56]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004160:	2b00      	cmp	r3, #0
 8004162:	d0f0      	beq.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004164:	69bb      	ldr	r3, [r7, #24]
 8004166:	2b01      	cmp	r3, #1
 8004168:	f040 80ce 	bne.w	8004308 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800416c:	4b09      	ldr	r3, [pc, #36]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a08      	ldr	r2, [pc, #32]	@ (8004194 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004172:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004176:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004178:	f7fd fb96 	bl	80018a8 <HAL_GetTick>
 800417c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800417e:	e00b      	b.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004180:	f7fd fb92 	bl	80018a8 <HAL_GetTick>
 8004184:	4602      	mov	r2, r0
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	1ad3      	subs	r3, r2, r3
 800418a:	2b64      	cmp	r3, #100	@ 0x64
 800418c:	d904      	bls.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800418e:	2303      	movs	r3, #3
 8004190:	e0bb      	b.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004192:	bf00      	nop
 8004194:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004198:	4b5e      	ldr	r3, [pc, #376]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80041a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80041a4:	d0ec      	beq.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d003      	beq.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d009      	beq.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d02e      	beq.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d12a      	bne.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80041ce:	4b51      	ldr	r3, [pc, #324]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80041d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041d4:	0c1b      	lsrs	r3, r3, #16
 80041d6:	f003 0303 	and.w	r3, r3, #3
 80041da:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80041dc:	4b4d      	ldr	r3, [pc, #308]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80041de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041e2:	0f1b      	lsrs	r3, r3, #28
 80041e4:	f003 0307 	and.w	r3, r3, #7
 80041e8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	695b      	ldr	r3, [r3, #20]
 80041ee:	019a      	lsls	r2, r3, #6
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	041b      	lsls	r3, r3, #16
 80041f4:	431a      	orrs	r2, r3
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	699b      	ldr	r3, [r3, #24]
 80041fa:	061b      	lsls	r3, r3, #24
 80041fc:	431a      	orrs	r2, r3
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	071b      	lsls	r3, r3, #28
 8004202:	4944      	ldr	r1, [pc, #272]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004204:	4313      	orrs	r3, r2
 8004206:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800420a:	4b42      	ldr	r3, [pc, #264]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800420c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004210:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004218:	3b01      	subs	r3, #1
 800421a:	021b      	lsls	r3, r3, #8
 800421c:	493d      	ldr	r1, [pc, #244]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800421e:	4313      	orrs	r3, r2
 8004220:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800422c:	2b00      	cmp	r3, #0
 800422e:	d022      	beq.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004234:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004238:	d11d      	bne.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800423a:	4b36      	ldr	r3, [pc, #216]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800423c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004240:	0e1b      	lsrs	r3, r3, #24
 8004242:	f003 030f 	and.w	r3, r3, #15
 8004246:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004248:	4b32      	ldr	r3, [pc, #200]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800424a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800424e:	0f1b      	lsrs	r3, r3, #28
 8004250:	f003 0307 	and.w	r3, r3, #7
 8004254:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	695b      	ldr	r3, [r3, #20]
 800425a:	019a      	lsls	r2, r3, #6
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6a1b      	ldr	r3, [r3, #32]
 8004260:	041b      	lsls	r3, r3, #16
 8004262:	431a      	orrs	r2, r3
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	061b      	lsls	r3, r3, #24
 8004268:	431a      	orrs	r2, r3
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	071b      	lsls	r3, r3, #28
 800426e:	4929      	ldr	r1, [pc, #164]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004270:	4313      	orrs	r3, r2
 8004272:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f003 0308 	and.w	r3, r3, #8
 800427e:	2b00      	cmp	r3, #0
 8004280:	d028      	beq.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004282:	4b24      	ldr	r3, [pc, #144]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004284:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004288:	0e1b      	lsrs	r3, r3, #24
 800428a:	f003 030f 	and.w	r3, r3, #15
 800428e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004290:	4b20      	ldr	r3, [pc, #128]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004292:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004296:	0c1b      	lsrs	r3, r3, #16
 8004298:	f003 0303 	and.w	r3, r3, #3
 800429c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	695b      	ldr	r3, [r3, #20]
 80042a2:	019a      	lsls	r2, r3, #6
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	041b      	lsls	r3, r3, #16
 80042a8:	431a      	orrs	r2, r3
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	061b      	lsls	r3, r3, #24
 80042ae:	431a      	orrs	r2, r3
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	69db      	ldr	r3, [r3, #28]
 80042b4:	071b      	lsls	r3, r3, #28
 80042b6:	4917      	ldr	r1, [pc, #92]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042b8:	4313      	orrs	r3, r2
 80042ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80042be:	4b15      	ldr	r3, [pc, #84]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80042c4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042cc:	4911      	ldr	r1, [pc, #68]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042ce:	4313      	orrs	r3, r2
 80042d0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80042d4:	4b0f      	ldr	r3, [pc, #60]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a0e      	ldr	r2, [pc, #56]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80042de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042e0:	f7fd fae2 	bl	80018a8 <HAL_GetTick>
 80042e4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80042e6:	e008      	b.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80042e8:	f7fd fade 	bl	80018a8 <HAL_GetTick>
 80042ec:	4602      	mov	r2, r0
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	1ad3      	subs	r3, r2, r3
 80042f2:	2b64      	cmp	r3, #100	@ 0x64
 80042f4:	d901      	bls.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80042f6:	2303      	movs	r3, #3
 80042f8:	e007      	b.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80042fa:	4b06      	ldr	r3, [pc, #24]	@ (8004314 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004302:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004306:	d1ef      	bne.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004308:	2300      	movs	r3, #0
}
 800430a:	4618      	mov	r0, r3
 800430c:	3720      	adds	r7, #32
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}
 8004312:	bf00      	nop
 8004314:	40023800 	.word	0x40023800

08004318 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b082      	sub	sp, #8
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d101      	bne.n	800432a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	e049      	b.n	80043be <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004330:	b2db      	uxtb	r3, r3
 8004332:	2b00      	cmp	r3, #0
 8004334:	d106      	bne.n	8004344 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2200      	movs	r2, #0
 800433a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f000 f841 	bl	80043c6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2202      	movs	r2, #2
 8004348:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	3304      	adds	r3, #4
 8004354:	4619      	mov	r1, r3
 8004356:	4610      	mov	r0, r2
 8004358:	f000 f9e8 	bl	800472c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2201      	movs	r2, #1
 8004360:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2201      	movs	r2, #1
 8004368:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2201      	movs	r2, #1
 8004370:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2201      	movs	r2, #1
 8004378:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2201      	movs	r2, #1
 8004380:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2201      	movs	r2, #1
 8004388:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2201      	movs	r2, #1
 8004390:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2201      	movs	r2, #1
 8004398:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2201      	movs	r2, #1
 80043a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2201      	movs	r2, #1
 80043a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2201      	movs	r2, #1
 80043b0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2201      	movs	r2, #1
 80043b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80043bc:	2300      	movs	r3, #0
}
 80043be:	4618      	mov	r0, r3
 80043c0:	3708      	adds	r7, #8
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}

080043c6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80043c6:	b480      	push	{r7}
 80043c8:	b083      	sub	sp, #12
 80043ca:	af00      	add	r7, sp, #0
 80043cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80043ce:	bf00      	nop
 80043d0:	370c      	adds	r7, #12
 80043d2:	46bd      	mov	sp, r7
 80043d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d8:	4770      	bx	lr
	...

080043dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80043dc:	b480      	push	{r7}
 80043de:	b085      	sub	sp, #20
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043ea:	b2db      	uxtb	r3, r3
 80043ec:	2b01      	cmp	r3, #1
 80043ee:	d001      	beq.n	80043f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	e054      	b.n	800449e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2202      	movs	r2, #2
 80043f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	68da      	ldr	r2, [r3, #12]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f042 0201 	orr.w	r2, r2, #1
 800440a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a26      	ldr	r2, [pc, #152]	@ (80044ac <HAL_TIM_Base_Start_IT+0xd0>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d022      	beq.n	800445c <HAL_TIM_Base_Start_IT+0x80>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800441e:	d01d      	beq.n	800445c <HAL_TIM_Base_Start_IT+0x80>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a22      	ldr	r2, [pc, #136]	@ (80044b0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d018      	beq.n	800445c <HAL_TIM_Base_Start_IT+0x80>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a21      	ldr	r2, [pc, #132]	@ (80044b4 <HAL_TIM_Base_Start_IT+0xd8>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d013      	beq.n	800445c <HAL_TIM_Base_Start_IT+0x80>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a1f      	ldr	r2, [pc, #124]	@ (80044b8 <HAL_TIM_Base_Start_IT+0xdc>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d00e      	beq.n	800445c <HAL_TIM_Base_Start_IT+0x80>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a1e      	ldr	r2, [pc, #120]	@ (80044bc <HAL_TIM_Base_Start_IT+0xe0>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d009      	beq.n	800445c <HAL_TIM_Base_Start_IT+0x80>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a1c      	ldr	r2, [pc, #112]	@ (80044c0 <HAL_TIM_Base_Start_IT+0xe4>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d004      	beq.n	800445c <HAL_TIM_Base_Start_IT+0x80>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a1b      	ldr	r2, [pc, #108]	@ (80044c4 <HAL_TIM_Base_Start_IT+0xe8>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d115      	bne.n	8004488 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	689a      	ldr	r2, [r3, #8]
 8004462:	4b19      	ldr	r3, [pc, #100]	@ (80044c8 <HAL_TIM_Base_Start_IT+0xec>)
 8004464:	4013      	ands	r3, r2
 8004466:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2b06      	cmp	r3, #6
 800446c:	d015      	beq.n	800449a <HAL_TIM_Base_Start_IT+0xbe>
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004474:	d011      	beq.n	800449a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	681a      	ldr	r2, [r3, #0]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f042 0201 	orr.w	r2, r2, #1
 8004484:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004486:	e008      	b.n	800449a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	681a      	ldr	r2, [r3, #0]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f042 0201 	orr.w	r2, r2, #1
 8004496:	601a      	str	r2, [r3, #0]
 8004498:	e000      	b.n	800449c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800449a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800449c:	2300      	movs	r3, #0
}
 800449e:	4618      	mov	r0, r3
 80044a0:	3714      	adds	r7, #20
 80044a2:	46bd      	mov	sp, r7
 80044a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a8:	4770      	bx	lr
 80044aa:	bf00      	nop
 80044ac:	40010000 	.word	0x40010000
 80044b0:	40000400 	.word	0x40000400
 80044b4:	40000800 	.word	0x40000800
 80044b8:	40000c00 	.word	0x40000c00
 80044bc:	40010400 	.word	0x40010400
 80044c0:	40014000 	.word	0x40014000
 80044c4:	40001800 	.word	0x40001800
 80044c8:	00010007 	.word	0x00010007

080044cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b084      	sub	sp, #16
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	68db      	ldr	r3, [r3, #12]
 80044da:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	691b      	ldr	r3, [r3, #16]
 80044e2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	f003 0302 	and.w	r3, r3, #2
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d020      	beq.n	8004530 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	f003 0302 	and.w	r3, r3, #2
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d01b      	beq.n	8004530 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f06f 0202 	mvn.w	r2, #2
 8004500:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2201      	movs	r2, #1
 8004506:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	699b      	ldr	r3, [r3, #24]
 800450e:	f003 0303 	and.w	r3, r3, #3
 8004512:	2b00      	cmp	r3, #0
 8004514:	d003      	beq.n	800451e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f000 f8e9 	bl	80046ee <HAL_TIM_IC_CaptureCallback>
 800451c:	e005      	b.n	800452a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f000 f8db 	bl	80046da <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004524:	6878      	ldr	r0, [r7, #4]
 8004526:	f000 f8ec 	bl	8004702 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2200      	movs	r2, #0
 800452e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	f003 0304 	and.w	r3, r3, #4
 8004536:	2b00      	cmp	r3, #0
 8004538:	d020      	beq.n	800457c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	f003 0304 	and.w	r3, r3, #4
 8004540:	2b00      	cmp	r3, #0
 8004542:	d01b      	beq.n	800457c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f06f 0204 	mvn.w	r2, #4
 800454c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2202      	movs	r2, #2
 8004552:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	699b      	ldr	r3, [r3, #24]
 800455a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800455e:	2b00      	cmp	r3, #0
 8004560:	d003      	beq.n	800456a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f000 f8c3 	bl	80046ee <HAL_TIM_IC_CaptureCallback>
 8004568:	e005      	b.n	8004576 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f000 f8b5 	bl	80046da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	f000 f8c6 	bl	8004702 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2200      	movs	r2, #0
 800457a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	f003 0308 	and.w	r3, r3, #8
 8004582:	2b00      	cmp	r3, #0
 8004584:	d020      	beq.n	80045c8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	f003 0308 	and.w	r3, r3, #8
 800458c:	2b00      	cmp	r3, #0
 800458e:	d01b      	beq.n	80045c8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f06f 0208 	mvn.w	r2, #8
 8004598:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2204      	movs	r2, #4
 800459e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	69db      	ldr	r3, [r3, #28]
 80045a6:	f003 0303 	and.w	r3, r3, #3
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d003      	beq.n	80045b6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f000 f89d 	bl	80046ee <HAL_TIM_IC_CaptureCallback>
 80045b4:	e005      	b.n	80045c2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f000 f88f 	bl	80046da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	f000 f8a0 	bl	8004702 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2200      	movs	r2, #0
 80045c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	f003 0310 	and.w	r3, r3, #16
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d020      	beq.n	8004614 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	f003 0310 	and.w	r3, r3, #16
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d01b      	beq.n	8004614 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f06f 0210 	mvn.w	r2, #16
 80045e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2208      	movs	r2, #8
 80045ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	69db      	ldr	r3, [r3, #28]
 80045f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d003      	beq.n	8004602 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f000 f877 	bl	80046ee <HAL_TIM_IC_CaptureCallback>
 8004600:	e005      	b.n	800460e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f000 f869 	bl	80046da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004608:	6878      	ldr	r0, [r7, #4]
 800460a:	f000 f87a 	bl	8004702 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2200      	movs	r2, #0
 8004612:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	f003 0301 	and.w	r3, r3, #1
 800461a:	2b00      	cmp	r3, #0
 800461c:	d00c      	beq.n	8004638 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	f003 0301 	and.w	r3, r3, #1
 8004624:	2b00      	cmp	r3, #0
 8004626:	d007      	beq.n	8004638 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f06f 0201 	mvn.w	r2, #1
 8004630:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	f7fc fd66 	bl	8001104 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800463e:	2b00      	cmp	r3, #0
 8004640:	d104      	bne.n	800464c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004648:	2b00      	cmp	r3, #0
 800464a:	d00c      	beq.n	8004666 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004652:	2b00      	cmp	r3, #0
 8004654:	d007      	beq.n	8004666 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800465e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004660:	6878      	ldr	r0, [r7, #4]
 8004662:	f000 f913 	bl	800488c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800466c:	2b00      	cmp	r3, #0
 800466e:	d00c      	beq.n	800468a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004676:	2b00      	cmp	r3, #0
 8004678:	d007      	beq.n	800468a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004682:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004684:	6878      	ldr	r0, [r7, #4]
 8004686:	f000 f90b 	bl	80048a0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004690:	2b00      	cmp	r3, #0
 8004692:	d00c      	beq.n	80046ae <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800469a:	2b00      	cmp	r3, #0
 800469c:	d007      	beq.n	80046ae <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80046a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80046a8:	6878      	ldr	r0, [r7, #4]
 80046aa:	f000 f834 	bl	8004716 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	f003 0320 	and.w	r3, r3, #32
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d00c      	beq.n	80046d2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f003 0320 	and.w	r3, r3, #32
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d007      	beq.n	80046d2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f06f 0220 	mvn.w	r2, #32
 80046ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80046cc:	6878      	ldr	r0, [r7, #4]
 80046ce:	f000 f8d3 	bl	8004878 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80046d2:	bf00      	nop
 80046d4:	3710      	adds	r7, #16
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}

080046da <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80046da:	b480      	push	{r7}
 80046dc:	b083      	sub	sp, #12
 80046de:	af00      	add	r7, sp, #0
 80046e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80046e2:	bf00      	nop
 80046e4:	370c      	adds	r7, #12
 80046e6:	46bd      	mov	sp, r7
 80046e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ec:	4770      	bx	lr

080046ee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80046ee:	b480      	push	{r7}
 80046f0:	b083      	sub	sp, #12
 80046f2:	af00      	add	r7, sp, #0
 80046f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80046f6:	bf00      	nop
 80046f8:	370c      	adds	r7, #12
 80046fa:	46bd      	mov	sp, r7
 80046fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004700:	4770      	bx	lr

08004702 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004702:	b480      	push	{r7}
 8004704:	b083      	sub	sp, #12
 8004706:	af00      	add	r7, sp, #0
 8004708:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800470a:	bf00      	nop
 800470c:	370c      	adds	r7, #12
 800470e:	46bd      	mov	sp, r7
 8004710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004714:	4770      	bx	lr

08004716 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004716:	b480      	push	{r7}
 8004718:	b083      	sub	sp, #12
 800471a:	af00      	add	r7, sp, #0
 800471c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800471e:	bf00      	nop
 8004720:	370c      	adds	r7, #12
 8004722:	46bd      	mov	sp, r7
 8004724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004728:	4770      	bx	lr
	...

0800472c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800472c:	b480      	push	{r7}
 800472e:	b085      	sub	sp, #20
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
 8004734:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	4a43      	ldr	r2, [pc, #268]	@ (800484c <TIM_Base_SetConfig+0x120>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d013      	beq.n	800476c <TIM_Base_SetConfig+0x40>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800474a:	d00f      	beq.n	800476c <TIM_Base_SetConfig+0x40>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	4a40      	ldr	r2, [pc, #256]	@ (8004850 <TIM_Base_SetConfig+0x124>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d00b      	beq.n	800476c <TIM_Base_SetConfig+0x40>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	4a3f      	ldr	r2, [pc, #252]	@ (8004854 <TIM_Base_SetConfig+0x128>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d007      	beq.n	800476c <TIM_Base_SetConfig+0x40>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	4a3e      	ldr	r2, [pc, #248]	@ (8004858 <TIM_Base_SetConfig+0x12c>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d003      	beq.n	800476c <TIM_Base_SetConfig+0x40>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	4a3d      	ldr	r2, [pc, #244]	@ (800485c <TIM_Base_SetConfig+0x130>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d108      	bne.n	800477e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004772:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	68fa      	ldr	r2, [r7, #12]
 800477a:	4313      	orrs	r3, r2
 800477c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	4a32      	ldr	r2, [pc, #200]	@ (800484c <TIM_Base_SetConfig+0x120>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d02b      	beq.n	80047de <TIM_Base_SetConfig+0xb2>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800478c:	d027      	beq.n	80047de <TIM_Base_SetConfig+0xb2>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	4a2f      	ldr	r2, [pc, #188]	@ (8004850 <TIM_Base_SetConfig+0x124>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d023      	beq.n	80047de <TIM_Base_SetConfig+0xb2>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	4a2e      	ldr	r2, [pc, #184]	@ (8004854 <TIM_Base_SetConfig+0x128>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d01f      	beq.n	80047de <TIM_Base_SetConfig+0xb2>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	4a2d      	ldr	r2, [pc, #180]	@ (8004858 <TIM_Base_SetConfig+0x12c>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d01b      	beq.n	80047de <TIM_Base_SetConfig+0xb2>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	4a2c      	ldr	r2, [pc, #176]	@ (800485c <TIM_Base_SetConfig+0x130>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d017      	beq.n	80047de <TIM_Base_SetConfig+0xb2>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	4a2b      	ldr	r2, [pc, #172]	@ (8004860 <TIM_Base_SetConfig+0x134>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d013      	beq.n	80047de <TIM_Base_SetConfig+0xb2>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	4a2a      	ldr	r2, [pc, #168]	@ (8004864 <TIM_Base_SetConfig+0x138>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d00f      	beq.n	80047de <TIM_Base_SetConfig+0xb2>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	4a29      	ldr	r2, [pc, #164]	@ (8004868 <TIM_Base_SetConfig+0x13c>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d00b      	beq.n	80047de <TIM_Base_SetConfig+0xb2>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	4a28      	ldr	r2, [pc, #160]	@ (800486c <TIM_Base_SetConfig+0x140>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d007      	beq.n	80047de <TIM_Base_SetConfig+0xb2>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	4a27      	ldr	r2, [pc, #156]	@ (8004870 <TIM_Base_SetConfig+0x144>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d003      	beq.n	80047de <TIM_Base_SetConfig+0xb2>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	4a26      	ldr	r2, [pc, #152]	@ (8004874 <TIM_Base_SetConfig+0x148>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d108      	bne.n	80047f0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80047e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	68db      	ldr	r3, [r3, #12]
 80047ea:	68fa      	ldr	r2, [r7, #12]
 80047ec:	4313      	orrs	r3, r2
 80047ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	695b      	ldr	r3, [r3, #20]
 80047fa:	4313      	orrs	r3, r2
 80047fc:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	689a      	ldr	r2, [r3, #8]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	4a0e      	ldr	r2, [pc, #56]	@ (800484c <TIM_Base_SetConfig+0x120>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d003      	beq.n	800481e <TIM_Base_SetConfig+0xf2>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	4a10      	ldr	r2, [pc, #64]	@ (800485c <TIM_Base_SetConfig+0x130>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d103      	bne.n	8004826 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	691a      	ldr	r2, [r3, #16]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f043 0204 	orr.w	r2, r3, #4
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2201      	movs	r2, #1
 8004836:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	68fa      	ldr	r2, [r7, #12]
 800483c:	601a      	str	r2, [r3, #0]
}
 800483e:	bf00      	nop
 8004840:	3714      	adds	r7, #20
 8004842:	46bd      	mov	sp, r7
 8004844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004848:	4770      	bx	lr
 800484a:	bf00      	nop
 800484c:	40010000 	.word	0x40010000
 8004850:	40000400 	.word	0x40000400
 8004854:	40000800 	.word	0x40000800
 8004858:	40000c00 	.word	0x40000c00
 800485c:	40010400 	.word	0x40010400
 8004860:	40014000 	.word	0x40014000
 8004864:	40014400 	.word	0x40014400
 8004868:	40014800 	.word	0x40014800
 800486c:	40001800 	.word	0x40001800
 8004870:	40001c00 	.word	0x40001c00
 8004874:	40002000 	.word	0x40002000

08004878 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004878:	b480      	push	{r7}
 800487a:	b083      	sub	sp, #12
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004880:	bf00      	nop
 8004882:	370c      	adds	r7, #12
 8004884:	46bd      	mov	sp, r7
 8004886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488a:	4770      	bx	lr

0800488c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800488c:	b480      	push	{r7}
 800488e:	b083      	sub	sp, #12
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004894:	bf00      	nop
 8004896:	370c      	adds	r7, #12
 8004898:	46bd      	mov	sp, r7
 800489a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489e:	4770      	bx	lr

080048a0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b083      	sub	sp, #12
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80048a8:	bf00      	nop
 80048aa:	370c      	adds	r7, #12
 80048ac:	46bd      	mov	sp, r7
 80048ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b2:	4770      	bx	lr

080048b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b082      	sub	sp, #8
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d101      	bne.n	80048c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	e040      	b.n	8004948 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d106      	bne.n	80048dc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2200      	movs	r2, #0
 80048d2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f7fc fd4c 	bl	8001374 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2224      	movs	r2, #36	@ 0x24
 80048e0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	681a      	ldr	r2, [r3, #0]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f022 0201 	bic.w	r2, r2, #1
 80048f0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d002      	beq.n	8004900 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f000 fb16 	bl	8004f2c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004900:	6878      	ldr	r0, [r7, #4]
 8004902:	f000 f8af 	bl	8004a64 <UART_SetConfig>
 8004906:	4603      	mov	r3, r0
 8004908:	2b01      	cmp	r3, #1
 800490a:	d101      	bne.n	8004910 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	e01b      	b.n	8004948 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	685a      	ldr	r2, [r3, #4]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800491e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	689a      	ldr	r2, [r3, #8]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800492e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	681a      	ldr	r2, [r3, #0]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f042 0201 	orr.w	r2, r2, #1
 800493e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004940:	6878      	ldr	r0, [r7, #4]
 8004942:	f000 fb95 	bl	8005070 <UART_CheckIdleState>
 8004946:	4603      	mov	r3, r0
}
 8004948:	4618      	mov	r0, r3
 800494a:	3708      	adds	r7, #8
 800494c:	46bd      	mov	sp, r7
 800494e:	bd80      	pop	{r7, pc}

08004950 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b08a      	sub	sp, #40	@ 0x28
 8004954:	af02      	add	r7, sp, #8
 8004956:	60f8      	str	r0, [r7, #12]
 8004958:	60b9      	str	r1, [r7, #8]
 800495a:	603b      	str	r3, [r7, #0]
 800495c:	4613      	mov	r3, r2
 800495e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004964:	2b20      	cmp	r3, #32
 8004966:	d177      	bne.n	8004a58 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d002      	beq.n	8004974 <HAL_UART_Transmit+0x24>
 800496e:	88fb      	ldrh	r3, [r7, #6]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d101      	bne.n	8004978 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004974:	2301      	movs	r3, #1
 8004976:	e070      	b.n	8004a5a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2200      	movs	r2, #0
 800497c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2221      	movs	r2, #33	@ 0x21
 8004984:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004986:	f7fc ff8f 	bl	80018a8 <HAL_GetTick>
 800498a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	88fa      	ldrh	r2, [r7, #6]
 8004990:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	88fa      	ldrh	r2, [r7, #6]
 8004998:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80049a4:	d108      	bne.n	80049b8 <HAL_UART_Transmit+0x68>
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	691b      	ldr	r3, [r3, #16]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d104      	bne.n	80049b8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80049ae:	2300      	movs	r3, #0
 80049b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	61bb      	str	r3, [r7, #24]
 80049b6:	e003      	b.n	80049c0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80049bc:	2300      	movs	r3, #0
 80049be:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80049c0:	e02f      	b.n	8004a22 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	9300      	str	r3, [sp, #0]
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	2200      	movs	r2, #0
 80049ca:	2180      	movs	r1, #128	@ 0x80
 80049cc:	68f8      	ldr	r0, [r7, #12]
 80049ce:	f000 fbf7 	bl	80051c0 <UART_WaitOnFlagUntilTimeout>
 80049d2:	4603      	mov	r3, r0
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d004      	beq.n	80049e2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2220      	movs	r2, #32
 80049dc:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80049de:	2303      	movs	r3, #3
 80049e0:	e03b      	b.n	8004a5a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80049e2:	69fb      	ldr	r3, [r7, #28]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d10b      	bne.n	8004a00 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80049e8:	69bb      	ldr	r3, [r7, #24]
 80049ea:	881b      	ldrh	r3, [r3, #0]
 80049ec:	461a      	mov	r2, r3
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80049f6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80049f8:	69bb      	ldr	r3, [r7, #24]
 80049fa:	3302      	adds	r3, #2
 80049fc:	61bb      	str	r3, [r7, #24]
 80049fe:	e007      	b.n	8004a10 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004a00:	69fb      	ldr	r3, [r7, #28]
 8004a02:	781a      	ldrb	r2, [r3, #0]
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004a0a:	69fb      	ldr	r3, [r7, #28]
 8004a0c:	3301      	adds	r3, #1
 8004a0e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004a16:	b29b      	uxth	r3, r3
 8004a18:	3b01      	subs	r3, #1
 8004a1a:	b29a      	uxth	r2, r3
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004a28:	b29b      	uxth	r3, r3
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d1c9      	bne.n	80049c2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	9300      	str	r3, [sp, #0]
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	2200      	movs	r2, #0
 8004a36:	2140      	movs	r1, #64	@ 0x40
 8004a38:	68f8      	ldr	r0, [r7, #12]
 8004a3a:	f000 fbc1 	bl	80051c0 <UART_WaitOnFlagUntilTimeout>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d004      	beq.n	8004a4e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2220      	movs	r2, #32
 8004a48:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004a4a:	2303      	movs	r3, #3
 8004a4c:	e005      	b.n	8004a5a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	2220      	movs	r2, #32
 8004a52:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004a54:	2300      	movs	r3, #0
 8004a56:	e000      	b.n	8004a5a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004a58:	2302      	movs	r3, #2
  }
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	3720      	adds	r7, #32
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}
	...

08004a64 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b088      	sub	sp, #32
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	689a      	ldr	r2, [r3, #8]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	691b      	ldr	r3, [r3, #16]
 8004a78:	431a      	orrs	r2, r3
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	695b      	ldr	r3, [r3, #20]
 8004a7e:	431a      	orrs	r2, r3
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	69db      	ldr	r3, [r3, #28]
 8004a84:	4313      	orrs	r3, r2
 8004a86:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	4ba6      	ldr	r3, [pc, #664]	@ (8004d28 <UART_SetConfig+0x2c4>)
 8004a90:	4013      	ands	r3, r2
 8004a92:	687a      	ldr	r2, [r7, #4]
 8004a94:	6812      	ldr	r2, [r2, #0]
 8004a96:	6979      	ldr	r1, [r7, #20]
 8004a98:	430b      	orrs	r3, r1
 8004a9a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	68da      	ldr	r2, [r3, #12]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	430a      	orrs	r2, r1
 8004ab0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	699b      	ldr	r3, [r3, #24]
 8004ab6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6a1b      	ldr	r3, [r3, #32]
 8004abc:	697a      	ldr	r2, [r7, #20]
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	689b      	ldr	r3, [r3, #8]
 8004ac8:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	697a      	ldr	r2, [r7, #20]
 8004ad2:	430a      	orrs	r2, r1
 8004ad4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a94      	ldr	r2, [pc, #592]	@ (8004d2c <UART_SetConfig+0x2c8>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d120      	bne.n	8004b22 <UART_SetConfig+0xbe>
 8004ae0:	4b93      	ldr	r3, [pc, #588]	@ (8004d30 <UART_SetConfig+0x2cc>)
 8004ae2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ae6:	f003 0303 	and.w	r3, r3, #3
 8004aea:	2b03      	cmp	r3, #3
 8004aec:	d816      	bhi.n	8004b1c <UART_SetConfig+0xb8>
 8004aee:	a201      	add	r2, pc, #4	@ (adr r2, 8004af4 <UART_SetConfig+0x90>)
 8004af0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004af4:	08004b05 	.word	0x08004b05
 8004af8:	08004b11 	.word	0x08004b11
 8004afc:	08004b0b 	.word	0x08004b0b
 8004b00:	08004b17 	.word	0x08004b17
 8004b04:	2301      	movs	r3, #1
 8004b06:	77fb      	strb	r3, [r7, #31]
 8004b08:	e150      	b.n	8004dac <UART_SetConfig+0x348>
 8004b0a:	2302      	movs	r3, #2
 8004b0c:	77fb      	strb	r3, [r7, #31]
 8004b0e:	e14d      	b.n	8004dac <UART_SetConfig+0x348>
 8004b10:	2304      	movs	r3, #4
 8004b12:	77fb      	strb	r3, [r7, #31]
 8004b14:	e14a      	b.n	8004dac <UART_SetConfig+0x348>
 8004b16:	2308      	movs	r3, #8
 8004b18:	77fb      	strb	r3, [r7, #31]
 8004b1a:	e147      	b.n	8004dac <UART_SetConfig+0x348>
 8004b1c:	2310      	movs	r3, #16
 8004b1e:	77fb      	strb	r3, [r7, #31]
 8004b20:	e144      	b.n	8004dac <UART_SetConfig+0x348>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a83      	ldr	r2, [pc, #524]	@ (8004d34 <UART_SetConfig+0x2d0>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d132      	bne.n	8004b92 <UART_SetConfig+0x12e>
 8004b2c:	4b80      	ldr	r3, [pc, #512]	@ (8004d30 <UART_SetConfig+0x2cc>)
 8004b2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b32:	f003 030c 	and.w	r3, r3, #12
 8004b36:	2b0c      	cmp	r3, #12
 8004b38:	d828      	bhi.n	8004b8c <UART_SetConfig+0x128>
 8004b3a:	a201      	add	r2, pc, #4	@ (adr r2, 8004b40 <UART_SetConfig+0xdc>)
 8004b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b40:	08004b75 	.word	0x08004b75
 8004b44:	08004b8d 	.word	0x08004b8d
 8004b48:	08004b8d 	.word	0x08004b8d
 8004b4c:	08004b8d 	.word	0x08004b8d
 8004b50:	08004b81 	.word	0x08004b81
 8004b54:	08004b8d 	.word	0x08004b8d
 8004b58:	08004b8d 	.word	0x08004b8d
 8004b5c:	08004b8d 	.word	0x08004b8d
 8004b60:	08004b7b 	.word	0x08004b7b
 8004b64:	08004b8d 	.word	0x08004b8d
 8004b68:	08004b8d 	.word	0x08004b8d
 8004b6c:	08004b8d 	.word	0x08004b8d
 8004b70:	08004b87 	.word	0x08004b87
 8004b74:	2300      	movs	r3, #0
 8004b76:	77fb      	strb	r3, [r7, #31]
 8004b78:	e118      	b.n	8004dac <UART_SetConfig+0x348>
 8004b7a:	2302      	movs	r3, #2
 8004b7c:	77fb      	strb	r3, [r7, #31]
 8004b7e:	e115      	b.n	8004dac <UART_SetConfig+0x348>
 8004b80:	2304      	movs	r3, #4
 8004b82:	77fb      	strb	r3, [r7, #31]
 8004b84:	e112      	b.n	8004dac <UART_SetConfig+0x348>
 8004b86:	2308      	movs	r3, #8
 8004b88:	77fb      	strb	r3, [r7, #31]
 8004b8a:	e10f      	b.n	8004dac <UART_SetConfig+0x348>
 8004b8c:	2310      	movs	r3, #16
 8004b8e:	77fb      	strb	r3, [r7, #31]
 8004b90:	e10c      	b.n	8004dac <UART_SetConfig+0x348>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a68      	ldr	r2, [pc, #416]	@ (8004d38 <UART_SetConfig+0x2d4>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d120      	bne.n	8004bde <UART_SetConfig+0x17a>
 8004b9c:	4b64      	ldr	r3, [pc, #400]	@ (8004d30 <UART_SetConfig+0x2cc>)
 8004b9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ba2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004ba6:	2b30      	cmp	r3, #48	@ 0x30
 8004ba8:	d013      	beq.n	8004bd2 <UART_SetConfig+0x16e>
 8004baa:	2b30      	cmp	r3, #48	@ 0x30
 8004bac:	d814      	bhi.n	8004bd8 <UART_SetConfig+0x174>
 8004bae:	2b20      	cmp	r3, #32
 8004bb0:	d009      	beq.n	8004bc6 <UART_SetConfig+0x162>
 8004bb2:	2b20      	cmp	r3, #32
 8004bb4:	d810      	bhi.n	8004bd8 <UART_SetConfig+0x174>
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d002      	beq.n	8004bc0 <UART_SetConfig+0x15c>
 8004bba:	2b10      	cmp	r3, #16
 8004bbc:	d006      	beq.n	8004bcc <UART_SetConfig+0x168>
 8004bbe:	e00b      	b.n	8004bd8 <UART_SetConfig+0x174>
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	77fb      	strb	r3, [r7, #31]
 8004bc4:	e0f2      	b.n	8004dac <UART_SetConfig+0x348>
 8004bc6:	2302      	movs	r3, #2
 8004bc8:	77fb      	strb	r3, [r7, #31]
 8004bca:	e0ef      	b.n	8004dac <UART_SetConfig+0x348>
 8004bcc:	2304      	movs	r3, #4
 8004bce:	77fb      	strb	r3, [r7, #31]
 8004bd0:	e0ec      	b.n	8004dac <UART_SetConfig+0x348>
 8004bd2:	2308      	movs	r3, #8
 8004bd4:	77fb      	strb	r3, [r7, #31]
 8004bd6:	e0e9      	b.n	8004dac <UART_SetConfig+0x348>
 8004bd8:	2310      	movs	r3, #16
 8004bda:	77fb      	strb	r3, [r7, #31]
 8004bdc:	e0e6      	b.n	8004dac <UART_SetConfig+0x348>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a56      	ldr	r2, [pc, #344]	@ (8004d3c <UART_SetConfig+0x2d8>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d120      	bne.n	8004c2a <UART_SetConfig+0x1c6>
 8004be8:	4b51      	ldr	r3, [pc, #324]	@ (8004d30 <UART_SetConfig+0x2cc>)
 8004bea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bee:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004bf2:	2bc0      	cmp	r3, #192	@ 0xc0
 8004bf4:	d013      	beq.n	8004c1e <UART_SetConfig+0x1ba>
 8004bf6:	2bc0      	cmp	r3, #192	@ 0xc0
 8004bf8:	d814      	bhi.n	8004c24 <UART_SetConfig+0x1c0>
 8004bfa:	2b80      	cmp	r3, #128	@ 0x80
 8004bfc:	d009      	beq.n	8004c12 <UART_SetConfig+0x1ae>
 8004bfe:	2b80      	cmp	r3, #128	@ 0x80
 8004c00:	d810      	bhi.n	8004c24 <UART_SetConfig+0x1c0>
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d002      	beq.n	8004c0c <UART_SetConfig+0x1a8>
 8004c06:	2b40      	cmp	r3, #64	@ 0x40
 8004c08:	d006      	beq.n	8004c18 <UART_SetConfig+0x1b4>
 8004c0a:	e00b      	b.n	8004c24 <UART_SetConfig+0x1c0>
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	77fb      	strb	r3, [r7, #31]
 8004c10:	e0cc      	b.n	8004dac <UART_SetConfig+0x348>
 8004c12:	2302      	movs	r3, #2
 8004c14:	77fb      	strb	r3, [r7, #31]
 8004c16:	e0c9      	b.n	8004dac <UART_SetConfig+0x348>
 8004c18:	2304      	movs	r3, #4
 8004c1a:	77fb      	strb	r3, [r7, #31]
 8004c1c:	e0c6      	b.n	8004dac <UART_SetConfig+0x348>
 8004c1e:	2308      	movs	r3, #8
 8004c20:	77fb      	strb	r3, [r7, #31]
 8004c22:	e0c3      	b.n	8004dac <UART_SetConfig+0x348>
 8004c24:	2310      	movs	r3, #16
 8004c26:	77fb      	strb	r3, [r7, #31]
 8004c28:	e0c0      	b.n	8004dac <UART_SetConfig+0x348>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a44      	ldr	r2, [pc, #272]	@ (8004d40 <UART_SetConfig+0x2dc>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d125      	bne.n	8004c80 <UART_SetConfig+0x21c>
 8004c34:	4b3e      	ldr	r3, [pc, #248]	@ (8004d30 <UART_SetConfig+0x2cc>)
 8004c36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c3e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004c42:	d017      	beq.n	8004c74 <UART_SetConfig+0x210>
 8004c44:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004c48:	d817      	bhi.n	8004c7a <UART_SetConfig+0x216>
 8004c4a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c4e:	d00b      	beq.n	8004c68 <UART_SetConfig+0x204>
 8004c50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c54:	d811      	bhi.n	8004c7a <UART_SetConfig+0x216>
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d003      	beq.n	8004c62 <UART_SetConfig+0x1fe>
 8004c5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c5e:	d006      	beq.n	8004c6e <UART_SetConfig+0x20a>
 8004c60:	e00b      	b.n	8004c7a <UART_SetConfig+0x216>
 8004c62:	2300      	movs	r3, #0
 8004c64:	77fb      	strb	r3, [r7, #31]
 8004c66:	e0a1      	b.n	8004dac <UART_SetConfig+0x348>
 8004c68:	2302      	movs	r3, #2
 8004c6a:	77fb      	strb	r3, [r7, #31]
 8004c6c:	e09e      	b.n	8004dac <UART_SetConfig+0x348>
 8004c6e:	2304      	movs	r3, #4
 8004c70:	77fb      	strb	r3, [r7, #31]
 8004c72:	e09b      	b.n	8004dac <UART_SetConfig+0x348>
 8004c74:	2308      	movs	r3, #8
 8004c76:	77fb      	strb	r3, [r7, #31]
 8004c78:	e098      	b.n	8004dac <UART_SetConfig+0x348>
 8004c7a:	2310      	movs	r3, #16
 8004c7c:	77fb      	strb	r3, [r7, #31]
 8004c7e:	e095      	b.n	8004dac <UART_SetConfig+0x348>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a2f      	ldr	r2, [pc, #188]	@ (8004d44 <UART_SetConfig+0x2e0>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d125      	bne.n	8004cd6 <UART_SetConfig+0x272>
 8004c8a:	4b29      	ldr	r3, [pc, #164]	@ (8004d30 <UART_SetConfig+0x2cc>)
 8004c8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c90:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004c94:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004c98:	d017      	beq.n	8004cca <UART_SetConfig+0x266>
 8004c9a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004c9e:	d817      	bhi.n	8004cd0 <UART_SetConfig+0x26c>
 8004ca0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004ca4:	d00b      	beq.n	8004cbe <UART_SetConfig+0x25a>
 8004ca6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004caa:	d811      	bhi.n	8004cd0 <UART_SetConfig+0x26c>
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d003      	beq.n	8004cb8 <UART_SetConfig+0x254>
 8004cb0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004cb4:	d006      	beq.n	8004cc4 <UART_SetConfig+0x260>
 8004cb6:	e00b      	b.n	8004cd0 <UART_SetConfig+0x26c>
 8004cb8:	2301      	movs	r3, #1
 8004cba:	77fb      	strb	r3, [r7, #31]
 8004cbc:	e076      	b.n	8004dac <UART_SetConfig+0x348>
 8004cbe:	2302      	movs	r3, #2
 8004cc0:	77fb      	strb	r3, [r7, #31]
 8004cc2:	e073      	b.n	8004dac <UART_SetConfig+0x348>
 8004cc4:	2304      	movs	r3, #4
 8004cc6:	77fb      	strb	r3, [r7, #31]
 8004cc8:	e070      	b.n	8004dac <UART_SetConfig+0x348>
 8004cca:	2308      	movs	r3, #8
 8004ccc:	77fb      	strb	r3, [r7, #31]
 8004cce:	e06d      	b.n	8004dac <UART_SetConfig+0x348>
 8004cd0:	2310      	movs	r3, #16
 8004cd2:	77fb      	strb	r3, [r7, #31]
 8004cd4:	e06a      	b.n	8004dac <UART_SetConfig+0x348>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a1b      	ldr	r2, [pc, #108]	@ (8004d48 <UART_SetConfig+0x2e4>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d138      	bne.n	8004d52 <UART_SetConfig+0x2ee>
 8004ce0:	4b13      	ldr	r3, [pc, #76]	@ (8004d30 <UART_SetConfig+0x2cc>)
 8004ce2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ce6:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004cea:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004cee:	d017      	beq.n	8004d20 <UART_SetConfig+0x2bc>
 8004cf0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004cf4:	d82a      	bhi.n	8004d4c <UART_SetConfig+0x2e8>
 8004cf6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004cfa:	d00b      	beq.n	8004d14 <UART_SetConfig+0x2b0>
 8004cfc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d00:	d824      	bhi.n	8004d4c <UART_SetConfig+0x2e8>
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d003      	beq.n	8004d0e <UART_SetConfig+0x2aa>
 8004d06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d0a:	d006      	beq.n	8004d1a <UART_SetConfig+0x2b6>
 8004d0c:	e01e      	b.n	8004d4c <UART_SetConfig+0x2e8>
 8004d0e:	2300      	movs	r3, #0
 8004d10:	77fb      	strb	r3, [r7, #31]
 8004d12:	e04b      	b.n	8004dac <UART_SetConfig+0x348>
 8004d14:	2302      	movs	r3, #2
 8004d16:	77fb      	strb	r3, [r7, #31]
 8004d18:	e048      	b.n	8004dac <UART_SetConfig+0x348>
 8004d1a:	2304      	movs	r3, #4
 8004d1c:	77fb      	strb	r3, [r7, #31]
 8004d1e:	e045      	b.n	8004dac <UART_SetConfig+0x348>
 8004d20:	2308      	movs	r3, #8
 8004d22:	77fb      	strb	r3, [r7, #31]
 8004d24:	e042      	b.n	8004dac <UART_SetConfig+0x348>
 8004d26:	bf00      	nop
 8004d28:	efff69f3 	.word	0xefff69f3
 8004d2c:	40011000 	.word	0x40011000
 8004d30:	40023800 	.word	0x40023800
 8004d34:	40004400 	.word	0x40004400
 8004d38:	40004800 	.word	0x40004800
 8004d3c:	40004c00 	.word	0x40004c00
 8004d40:	40005000 	.word	0x40005000
 8004d44:	40011400 	.word	0x40011400
 8004d48:	40007800 	.word	0x40007800
 8004d4c:	2310      	movs	r3, #16
 8004d4e:	77fb      	strb	r3, [r7, #31]
 8004d50:	e02c      	b.n	8004dac <UART_SetConfig+0x348>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a72      	ldr	r2, [pc, #456]	@ (8004f20 <UART_SetConfig+0x4bc>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d125      	bne.n	8004da8 <UART_SetConfig+0x344>
 8004d5c:	4b71      	ldr	r3, [pc, #452]	@ (8004f24 <UART_SetConfig+0x4c0>)
 8004d5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d62:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004d66:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004d6a:	d017      	beq.n	8004d9c <UART_SetConfig+0x338>
 8004d6c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004d70:	d817      	bhi.n	8004da2 <UART_SetConfig+0x33e>
 8004d72:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004d76:	d00b      	beq.n	8004d90 <UART_SetConfig+0x32c>
 8004d78:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004d7c:	d811      	bhi.n	8004da2 <UART_SetConfig+0x33e>
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d003      	beq.n	8004d8a <UART_SetConfig+0x326>
 8004d82:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004d86:	d006      	beq.n	8004d96 <UART_SetConfig+0x332>
 8004d88:	e00b      	b.n	8004da2 <UART_SetConfig+0x33e>
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	77fb      	strb	r3, [r7, #31]
 8004d8e:	e00d      	b.n	8004dac <UART_SetConfig+0x348>
 8004d90:	2302      	movs	r3, #2
 8004d92:	77fb      	strb	r3, [r7, #31]
 8004d94:	e00a      	b.n	8004dac <UART_SetConfig+0x348>
 8004d96:	2304      	movs	r3, #4
 8004d98:	77fb      	strb	r3, [r7, #31]
 8004d9a:	e007      	b.n	8004dac <UART_SetConfig+0x348>
 8004d9c:	2308      	movs	r3, #8
 8004d9e:	77fb      	strb	r3, [r7, #31]
 8004da0:	e004      	b.n	8004dac <UART_SetConfig+0x348>
 8004da2:	2310      	movs	r3, #16
 8004da4:	77fb      	strb	r3, [r7, #31]
 8004da6:	e001      	b.n	8004dac <UART_SetConfig+0x348>
 8004da8:	2310      	movs	r3, #16
 8004daa:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	69db      	ldr	r3, [r3, #28]
 8004db0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004db4:	d15b      	bne.n	8004e6e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004db6:	7ffb      	ldrb	r3, [r7, #31]
 8004db8:	2b08      	cmp	r3, #8
 8004dba:	d828      	bhi.n	8004e0e <UART_SetConfig+0x3aa>
 8004dbc:	a201      	add	r2, pc, #4	@ (adr r2, 8004dc4 <UART_SetConfig+0x360>)
 8004dbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dc2:	bf00      	nop
 8004dc4:	08004de9 	.word	0x08004de9
 8004dc8:	08004df1 	.word	0x08004df1
 8004dcc:	08004df9 	.word	0x08004df9
 8004dd0:	08004e0f 	.word	0x08004e0f
 8004dd4:	08004dff 	.word	0x08004dff
 8004dd8:	08004e0f 	.word	0x08004e0f
 8004ddc:	08004e0f 	.word	0x08004e0f
 8004de0:	08004e0f 	.word	0x08004e0f
 8004de4:	08004e07 	.word	0x08004e07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004de8:	f7fe fe14 	bl	8003a14 <HAL_RCC_GetPCLK1Freq>
 8004dec:	61b8      	str	r0, [r7, #24]
        break;
 8004dee:	e013      	b.n	8004e18 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004df0:	f7fe fe24 	bl	8003a3c <HAL_RCC_GetPCLK2Freq>
 8004df4:	61b8      	str	r0, [r7, #24]
        break;
 8004df6:	e00f      	b.n	8004e18 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004df8:	4b4b      	ldr	r3, [pc, #300]	@ (8004f28 <UART_SetConfig+0x4c4>)
 8004dfa:	61bb      	str	r3, [r7, #24]
        break;
 8004dfc:	e00c      	b.n	8004e18 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004dfe:	f7fe fcf7 	bl	80037f0 <HAL_RCC_GetSysClockFreq>
 8004e02:	61b8      	str	r0, [r7, #24]
        break;
 8004e04:	e008      	b.n	8004e18 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e06:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e0a:	61bb      	str	r3, [r7, #24]
        break;
 8004e0c:	e004      	b.n	8004e18 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004e12:	2301      	movs	r3, #1
 8004e14:	77bb      	strb	r3, [r7, #30]
        break;
 8004e16:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004e18:	69bb      	ldr	r3, [r7, #24]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d074      	beq.n	8004f08 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004e1e:	69bb      	ldr	r3, [r7, #24]
 8004e20:	005a      	lsls	r2, r3, #1
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	085b      	lsrs	r3, r3, #1
 8004e28:	441a      	add	r2, r3
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e32:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	2b0f      	cmp	r3, #15
 8004e38:	d916      	bls.n	8004e68 <UART_SetConfig+0x404>
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e40:	d212      	bcs.n	8004e68 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	b29b      	uxth	r3, r3
 8004e46:	f023 030f 	bic.w	r3, r3, #15
 8004e4a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004e4c:	693b      	ldr	r3, [r7, #16]
 8004e4e:	085b      	lsrs	r3, r3, #1
 8004e50:	b29b      	uxth	r3, r3
 8004e52:	f003 0307 	and.w	r3, r3, #7
 8004e56:	b29a      	uxth	r2, r3
 8004e58:	89fb      	ldrh	r3, [r7, #14]
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	89fa      	ldrh	r2, [r7, #14]
 8004e64:	60da      	str	r2, [r3, #12]
 8004e66:	e04f      	b.n	8004f08 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004e68:	2301      	movs	r3, #1
 8004e6a:	77bb      	strb	r3, [r7, #30]
 8004e6c:	e04c      	b.n	8004f08 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004e6e:	7ffb      	ldrb	r3, [r7, #31]
 8004e70:	2b08      	cmp	r3, #8
 8004e72:	d828      	bhi.n	8004ec6 <UART_SetConfig+0x462>
 8004e74:	a201      	add	r2, pc, #4	@ (adr r2, 8004e7c <UART_SetConfig+0x418>)
 8004e76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e7a:	bf00      	nop
 8004e7c:	08004ea1 	.word	0x08004ea1
 8004e80:	08004ea9 	.word	0x08004ea9
 8004e84:	08004eb1 	.word	0x08004eb1
 8004e88:	08004ec7 	.word	0x08004ec7
 8004e8c:	08004eb7 	.word	0x08004eb7
 8004e90:	08004ec7 	.word	0x08004ec7
 8004e94:	08004ec7 	.word	0x08004ec7
 8004e98:	08004ec7 	.word	0x08004ec7
 8004e9c:	08004ebf 	.word	0x08004ebf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ea0:	f7fe fdb8 	bl	8003a14 <HAL_RCC_GetPCLK1Freq>
 8004ea4:	61b8      	str	r0, [r7, #24]
        break;
 8004ea6:	e013      	b.n	8004ed0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ea8:	f7fe fdc8 	bl	8003a3c <HAL_RCC_GetPCLK2Freq>
 8004eac:	61b8      	str	r0, [r7, #24]
        break;
 8004eae:	e00f      	b.n	8004ed0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004eb0:	4b1d      	ldr	r3, [pc, #116]	@ (8004f28 <UART_SetConfig+0x4c4>)
 8004eb2:	61bb      	str	r3, [r7, #24]
        break;
 8004eb4:	e00c      	b.n	8004ed0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004eb6:	f7fe fc9b 	bl	80037f0 <HAL_RCC_GetSysClockFreq>
 8004eba:	61b8      	str	r0, [r7, #24]
        break;
 8004ebc:	e008      	b.n	8004ed0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ebe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004ec2:	61bb      	str	r3, [r7, #24]
        break;
 8004ec4:	e004      	b.n	8004ed0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	77bb      	strb	r3, [r7, #30]
        break;
 8004ece:	bf00      	nop
    }

    if (pclk != 0U)
 8004ed0:	69bb      	ldr	r3, [r7, #24]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d018      	beq.n	8004f08 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	085a      	lsrs	r2, r3, #1
 8004edc:	69bb      	ldr	r3, [r7, #24]
 8004ede:	441a      	add	r2, r3
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ee8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	2b0f      	cmp	r3, #15
 8004eee:	d909      	bls.n	8004f04 <UART_SetConfig+0x4a0>
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ef6:	d205      	bcs.n	8004f04 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	b29a      	uxth	r2, r3
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	60da      	str	r2, [r3, #12]
 8004f02:	e001      	b.n	8004f08 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004f04:	2301      	movs	r3, #1
 8004f06:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2200      	movs	r2, #0
 8004f12:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004f14:	7fbb      	ldrb	r3, [r7, #30]
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	3720      	adds	r7, #32
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}
 8004f1e:	bf00      	nop
 8004f20:	40007c00 	.word	0x40007c00
 8004f24:	40023800 	.word	0x40023800
 8004f28:	00f42400 	.word	0x00f42400

08004f2c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b083      	sub	sp, #12
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f38:	f003 0308 	and.w	r3, r3, #8
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d00a      	beq.n	8004f56 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	430a      	orrs	r2, r1
 8004f54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f5a:	f003 0301 	and.w	r3, r3, #1
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d00a      	beq.n	8004f78 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	430a      	orrs	r2, r1
 8004f76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f7c:	f003 0302 	and.w	r3, r3, #2
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d00a      	beq.n	8004f9a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	430a      	orrs	r2, r1
 8004f98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f9e:	f003 0304 	and.w	r3, r3, #4
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d00a      	beq.n	8004fbc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	430a      	orrs	r2, r1
 8004fba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fc0:	f003 0310 	and.w	r3, r3, #16
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d00a      	beq.n	8004fde <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	430a      	orrs	r2, r1
 8004fdc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fe2:	f003 0320 	and.w	r3, r3, #32
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d00a      	beq.n	8005000 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	689b      	ldr	r3, [r3, #8]
 8004ff0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	430a      	orrs	r2, r1
 8004ffe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005004:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005008:	2b00      	cmp	r3, #0
 800500a:	d01a      	beq.n	8005042 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	430a      	orrs	r2, r1
 8005020:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005026:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800502a:	d10a      	bne.n	8005042 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	430a      	orrs	r2, r1
 8005040:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005046:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800504a:	2b00      	cmp	r3, #0
 800504c:	d00a      	beq.n	8005064 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	430a      	orrs	r2, r1
 8005062:	605a      	str	r2, [r3, #4]
  }
}
 8005064:	bf00      	nop
 8005066:	370c      	adds	r7, #12
 8005068:	46bd      	mov	sp, r7
 800506a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506e:	4770      	bx	lr

08005070 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b098      	sub	sp, #96	@ 0x60
 8005074:	af02      	add	r7, sp, #8
 8005076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2200      	movs	r2, #0
 800507c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005080:	f7fc fc12 	bl	80018a8 <HAL_GetTick>
 8005084:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f003 0308 	and.w	r3, r3, #8
 8005090:	2b08      	cmp	r3, #8
 8005092:	d12e      	bne.n	80050f2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005094:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005098:	9300      	str	r3, [sp, #0]
 800509a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800509c:	2200      	movs	r2, #0
 800509e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80050a2:	6878      	ldr	r0, [r7, #4]
 80050a4:	f000 f88c 	bl	80051c0 <UART_WaitOnFlagUntilTimeout>
 80050a8:	4603      	mov	r3, r0
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d021      	beq.n	80050f2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050b6:	e853 3f00 	ldrex	r3, [r3]
 80050ba:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80050bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80050c2:	653b      	str	r3, [r7, #80]	@ 0x50
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	461a      	mov	r2, r3
 80050ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80050cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80050ce:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050d0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80050d2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80050d4:	e841 2300 	strex	r3, r2, [r1]
 80050d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80050da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d1e6      	bne.n	80050ae <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2220      	movs	r2, #32
 80050e4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2200      	movs	r2, #0
 80050ea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80050ee:	2303      	movs	r3, #3
 80050f0:	e062      	b.n	80051b8 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f003 0304 	and.w	r3, r3, #4
 80050fc:	2b04      	cmp	r3, #4
 80050fe:	d149      	bne.n	8005194 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005100:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005104:	9300      	str	r3, [sp, #0]
 8005106:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005108:	2200      	movs	r2, #0
 800510a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f000 f856 	bl	80051c0 <UART_WaitOnFlagUntilTimeout>
 8005114:	4603      	mov	r3, r0
 8005116:	2b00      	cmp	r3, #0
 8005118:	d03c      	beq.n	8005194 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005122:	e853 3f00 	ldrex	r3, [r3]
 8005126:	623b      	str	r3, [r7, #32]
   return(result);
 8005128:	6a3b      	ldr	r3, [r7, #32]
 800512a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800512e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	461a      	mov	r2, r3
 8005136:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005138:	633b      	str	r3, [r7, #48]	@ 0x30
 800513a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800513c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800513e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005140:	e841 2300 	strex	r3, r2, [r1]
 8005144:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005146:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005148:	2b00      	cmp	r3, #0
 800514a:	d1e6      	bne.n	800511a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	3308      	adds	r3, #8
 8005152:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	e853 3f00 	ldrex	r3, [r3]
 800515a:	60fb      	str	r3, [r7, #12]
   return(result);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	f023 0301 	bic.w	r3, r3, #1
 8005162:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	3308      	adds	r3, #8
 800516a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800516c:	61fa      	str	r2, [r7, #28]
 800516e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005170:	69b9      	ldr	r1, [r7, #24]
 8005172:	69fa      	ldr	r2, [r7, #28]
 8005174:	e841 2300 	strex	r3, r2, [r1]
 8005178:	617b      	str	r3, [r7, #20]
   return(result);
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d1e5      	bne.n	800514c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2220      	movs	r2, #32
 8005184:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2200      	movs	r2, #0
 800518c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005190:	2303      	movs	r3, #3
 8005192:	e011      	b.n	80051b8 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2220      	movs	r2, #32
 8005198:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2220      	movs	r2, #32
 800519e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2200      	movs	r2, #0
 80051a6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2200      	movs	r2, #0
 80051ac:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2200      	movs	r2, #0
 80051b2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80051b6:	2300      	movs	r3, #0
}
 80051b8:	4618      	mov	r0, r3
 80051ba:	3758      	adds	r7, #88	@ 0x58
 80051bc:	46bd      	mov	sp, r7
 80051be:	bd80      	pop	{r7, pc}

080051c0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b084      	sub	sp, #16
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	60f8      	str	r0, [r7, #12]
 80051c8:	60b9      	str	r1, [r7, #8]
 80051ca:	603b      	str	r3, [r7, #0]
 80051cc:	4613      	mov	r3, r2
 80051ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051d0:	e04f      	b.n	8005272 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051d2:	69bb      	ldr	r3, [r7, #24]
 80051d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051d8:	d04b      	beq.n	8005272 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051da:	f7fc fb65 	bl	80018a8 <HAL_GetTick>
 80051de:	4602      	mov	r2, r0
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	1ad3      	subs	r3, r2, r3
 80051e4:	69ba      	ldr	r2, [r7, #24]
 80051e6:	429a      	cmp	r2, r3
 80051e8:	d302      	bcc.n	80051f0 <UART_WaitOnFlagUntilTimeout+0x30>
 80051ea:	69bb      	ldr	r3, [r7, #24]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d101      	bne.n	80051f4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80051f0:	2303      	movs	r3, #3
 80051f2:	e04e      	b.n	8005292 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f003 0304 	and.w	r3, r3, #4
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d037      	beq.n	8005272 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	2b80      	cmp	r3, #128	@ 0x80
 8005206:	d034      	beq.n	8005272 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	2b40      	cmp	r3, #64	@ 0x40
 800520c:	d031      	beq.n	8005272 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	69db      	ldr	r3, [r3, #28]
 8005214:	f003 0308 	and.w	r3, r3, #8
 8005218:	2b08      	cmp	r3, #8
 800521a:	d110      	bne.n	800523e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	2208      	movs	r2, #8
 8005222:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005224:	68f8      	ldr	r0, [r7, #12]
 8005226:	f000 f838 	bl	800529a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	2208      	movs	r2, #8
 800522e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	2200      	movs	r2, #0
 8005236:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800523a:	2301      	movs	r3, #1
 800523c:	e029      	b.n	8005292 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	69db      	ldr	r3, [r3, #28]
 8005244:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005248:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800524c:	d111      	bne.n	8005272 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005256:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005258:	68f8      	ldr	r0, [r7, #12]
 800525a:	f000 f81e 	bl	800529a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	2220      	movs	r2, #32
 8005262:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	2200      	movs	r2, #0
 800526a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800526e:	2303      	movs	r3, #3
 8005270:	e00f      	b.n	8005292 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	69da      	ldr	r2, [r3, #28]
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	4013      	ands	r3, r2
 800527c:	68ba      	ldr	r2, [r7, #8]
 800527e:	429a      	cmp	r2, r3
 8005280:	bf0c      	ite	eq
 8005282:	2301      	moveq	r3, #1
 8005284:	2300      	movne	r3, #0
 8005286:	b2db      	uxtb	r3, r3
 8005288:	461a      	mov	r2, r3
 800528a:	79fb      	ldrb	r3, [r7, #7]
 800528c:	429a      	cmp	r2, r3
 800528e:	d0a0      	beq.n	80051d2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005290:	2300      	movs	r3, #0
}
 8005292:	4618      	mov	r0, r3
 8005294:	3710      	adds	r7, #16
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}

0800529a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800529a:	b480      	push	{r7}
 800529c:	b095      	sub	sp, #84	@ 0x54
 800529e:	af00      	add	r7, sp, #0
 80052a0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052aa:	e853 3f00 	ldrex	r3, [r3]
 80052ae:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80052b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052b2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80052b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	461a      	mov	r2, r3
 80052be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80052c0:	643b      	str	r3, [r7, #64]	@ 0x40
 80052c2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052c4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80052c6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80052c8:	e841 2300 	strex	r3, r2, [r1]
 80052cc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80052ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d1e6      	bne.n	80052a2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	3308      	adds	r3, #8
 80052da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052dc:	6a3b      	ldr	r3, [r7, #32]
 80052de:	e853 3f00 	ldrex	r3, [r3]
 80052e2:	61fb      	str	r3, [r7, #28]
   return(result);
 80052e4:	69fb      	ldr	r3, [r7, #28]
 80052e6:	f023 0301 	bic.w	r3, r3, #1
 80052ea:	64bb      	str	r3, [r7, #72]	@ 0x48
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	3308      	adds	r3, #8
 80052f2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80052f4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80052f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052f8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80052fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80052fc:	e841 2300 	strex	r3, r2, [r1]
 8005300:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005304:	2b00      	cmp	r3, #0
 8005306:	d1e5      	bne.n	80052d4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800530c:	2b01      	cmp	r3, #1
 800530e:	d118      	bne.n	8005342 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	e853 3f00 	ldrex	r3, [r3]
 800531c:	60bb      	str	r3, [r7, #8]
   return(result);
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	f023 0310 	bic.w	r3, r3, #16
 8005324:	647b      	str	r3, [r7, #68]	@ 0x44
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	461a      	mov	r2, r3
 800532c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800532e:	61bb      	str	r3, [r7, #24]
 8005330:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005332:	6979      	ldr	r1, [r7, #20]
 8005334:	69ba      	ldr	r2, [r7, #24]
 8005336:	e841 2300 	strex	r3, r2, [r1]
 800533a:	613b      	str	r3, [r7, #16]
   return(result);
 800533c:	693b      	ldr	r3, [r7, #16]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d1e6      	bne.n	8005310 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2220      	movs	r2, #32
 8005346:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2200      	movs	r2, #0
 800534e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2200      	movs	r2, #0
 8005354:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005356:	bf00      	nop
 8005358:	3754      	adds	r7, #84	@ 0x54
 800535a:	46bd      	mov	sp, r7
 800535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005360:	4770      	bx	lr
	...

08005364 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005364:	b084      	sub	sp, #16
 8005366:	b580      	push	{r7, lr}
 8005368:	b084      	sub	sp, #16
 800536a:	af00      	add	r7, sp, #0
 800536c:	6078      	str	r0, [r7, #4]
 800536e:	f107 001c 	add.w	r0, r7, #28
 8005372:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005376:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800537a:	2b01      	cmp	r3, #1
 800537c:	d121      	bne.n	80053c2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005382:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	68da      	ldr	r2, [r3, #12]
 800538e:	4b21      	ldr	r3, [pc, #132]	@ (8005414 <USB_CoreInit+0xb0>)
 8005390:	4013      	ands	r3, r2
 8005392:	687a      	ldr	r2, [r7, #4]
 8005394:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	68db      	ldr	r3, [r3, #12]
 800539a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80053a2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80053a6:	2b01      	cmp	r3, #1
 80053a8:	d105      	bne.n	80053b6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	68db      	ldr	r3, [r3, #12]
 80053ae:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	f000 fa92 	bl	80058e0 <USB_CoreReset>
 80053bc:	4603      	mov	r3, r0
 80053be:	73fb      	strb	r3, [r7, #15]
 80053c0:	e010      	b.n	80053e4 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	68db      	ldr	r3, [r3, #12]
 80053c6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	f000 fa86 	bl	80058e0 <USB_CoreReset>
 80053d4:	4603      	mov	r3, r0
 80053d6:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053dc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 80053e4:	7fbb      	ldrb	r3, [r7, #30]
 80053e6:	2b01      	cmp	r3, #1
 80053e8:	d10b      	bne.n	8005402 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	689b      	ldr	r3, [r3, #8]
 80053ee:	f043 0206 	orr.w	r2, r3, #6
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	689b      	ldr	r3, [r3, #8]
 80053fa:	f043 0220 	orr.w	r2, r3, #32
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005402:	7bfb      	ldrb	r3, [r7, #15]
}
 8005404:	4618      	mov	r0, r3
 8005406:	3710      	adds	r7, #16
 8005408:	46bd      	mov	sp, r7
 800540a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800540e:	b004      	add	sp, #16
 8005410:	4770      	bx	lr
 8005412:	bf00      	nop
 8005414:	ffbdffbf 	.word	0xffbdffbf

08005418 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005418:	b480      	push	{r7}
 800541a:	b083      	sub	sp, #12
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	689b      	ldr	r3, [r3, #8]
 8005424:	f023 0201 	bic.w	r2, r3, #1
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800542c:	2300      	movs	r3, #0
}
 800542e:	4618      	mov	r0, r3
 8005430:	370c      	adds	r7, #12
 8005432:	46bd      	mov	sp, r7
 8005434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005438:	4770      	bx	lr

0800543a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800543a:	b580      	push	{r7, lr}
 800543c:	b084      	sub	sp, #16
 800543e:	af00      	add	r7, sp, #0
 8005440:	6078      	str	r0, [r7, #4]
 8005442:	460b      	mov	r3, r1
 8005444:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005446:	2300      	movs	r3, #0
 8005448:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	68db      	ldr	r3, [r3, #12]
 800544e:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005456:	78fb      	ldrb	r3, [r7, #3]
 8005458:	2b01      	cmp	r3, #1
 800545a:	d115      	bne.n	8005488 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	68db      	ldr	r3, [r3, #12]
 8005460:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005468:	200a      	movs	r0, #10
 800546a:	f7fc fa29 	bl	80018c0 <HAL_Delay>
      ms += 10U;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	330a      	adds	r3, #10
 8005472:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005474:	6878      	ldr	r0, [r7, #4]
 8005476:	f000 fa25 	bl	80058c4 <USB_GetMode>
 800547a:	4603      	mov	r3, r0
 800547c:	2b01      	cmp	r3, #1
 800547e:	d01e      	beq.n	80054be <USB_SetCurrentMode+0x84>
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	2bc7      	cmp	r3, #199	@ 0xc7
 8005484:	d9f0      	bls.n	8005468 <USB_SetCurrentMode+0x2e>
 8005486:	e01a      	b.n	80054be <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005488:	78fb      	ldrb	r3, [r7, #3]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d115      	bne.n	80054ba <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	68db      	ldr	r3, [r3, #12]
 8005492:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800549a:	200a      	movs	r0, #10
 800549c:	f7fc fa10 	bl	80018c0 <HAL_Delay>
      ms += 10U;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	330a      	adds	r3, #10
 80054a4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f000 fa0c 	bl	80058c4 <USB_GetMode>
 80054ac:	4603      	mov	r3, r0
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d005      	beq.n	80054be <USB_SetCurrentMode+0x84>
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	2bc7      	cmp	r3, #199	@ 0xc7
 80054b6:	d9f0      	bls.n	800549a <USB_SetCurrentMode+0x60>
 80054b8:	e001      	b.n	80054be <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80054ba:	2301      	movs	r3, #1
 80054bc:	e005      	b.n	80054ca <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	2bc8      	cmp	r3, #200	@ 0xc8
 80054c2:	d101      	bne.n	80054c8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80054c4:	2301      	movs	r3, #1
 80054c6:	e000      	b.n	80054ca <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80054c8:	2300      	movs	r3, #0
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	3710      	adds	r7, #16
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}
	...

080054d4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80054d4:	b084      	sub	sp, #16
 80054d6:	b580      	push	{r7, lr}
 80054d8:	b086      	sub	sp, #24
 80054da:	af00      	add	r7, sp, #0
 80054dc:	6078      	str	r0, [r7, #4]
 80054de:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80054e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80054e6:	2300      	movs	r3, #0
 80054e8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80054ee:	2300      	movs	r3, #0
 80054f0:	613b      	str	r3, [r7, #16]
 80054f2:	e009      	b.n	8005508 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80054f4:	687a      	ldr	r2, [r7, #4]
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	3340      	adds	r3, #64	@ 0x40
 80054fa:	009b      	lsls	r3, r3, #2
 80054fc:	4413      	add	r3, r2
 80054fe:	2200      	movs	r2, #0
 8005500:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005502:	693b      	ldr	r3, [r7, #16]
 8005504:	3301      	adds	r3, #1
 8005506:	613b      	str	r3, [r7, #16]
 8005508:	693b      	ldr	r3, [r7, #16]
 800550a:	2b0e      	cmp	r3, #14
 800550c:	d9f2      	bls.n	80054f4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800550e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005512:	2b00      	cmp	r3, #0
 8005514:	d11c      	bne.n	8005550 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	68fa      	ldr	r2, [r7, #12]
 8005520:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005524:	f043 0302 	orr.w	r3, r3, #2
 8005528:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800552e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	601a      	str	r2, [r3, #0]
 800554e:	e005      	b.n	800555c <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005554:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005562:	461a      	mov	r2, r3
 8005564:	2300      	movs	r3, #0
 8005566:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005568:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800556c:	2b01      	cmp	r3, #1
 800556e:	d10d      	bne.n	800558c <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005570:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005574:	2b00      	cmp	r3, #0
 8005576:	d104      	bne.n	8005582 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005578:	2100      	movs	r1, #0
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f000 f968 	bl	8005850 <USB_SetDevSpeed>
 8005580:	e008      	b.n	8005594 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005582:	2101      	movs	r1, #1
 8005584:	6878      	ldr	r0, [r7, #4]
 8005586:	f000 f963 	bl	8005850 <USB_SetDevSpeed>
 800558a:	e003      	b.n	8005594 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800558c:	2103      	movs	r1, #3
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f000 f95e 	bl	8005850 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005594:	2110      	movs	r1, #16
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f000 f8fa 	bl	8005790 <USB_FlushTxFifo>
 800559c:	4603      	mov	r3, r0
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d001      	beq.n	80055a6 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 80055a2:	2301      	movs	r3, #1
 80055a4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	f000 f924 	bl	80057f4 <USB_FlushRxFifo>
 80055ac:	4603      	mov	r3, r0
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d001      	beq.n	80055b6 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 80055b2:	2301      	movs	r3, #1
 80055b4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055bc:	461a      	mov	r2, r3
 80055be:	2300      	movs	r3, #0
 80055c0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055c8:	461a      	mov	r2, r3
 80055ca:	2300      	movs	r3, #0
 80055cc:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055d4:	461a      	mov	r2, r3
 80055d6:	2300      	movs	r3, #0
 80055d8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80055da:	2300      	movs	r3, #0
 80055dc:	613b      	str	r3, [r7, #16]
 80055de:	e043      	b.n	8005668 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80055e0:	693b      	ldr	r3, [r7, #16]
 80055e2:	015a      	lsls	r2, r3, #5
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	4413      	add	r3, r2
 80055e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80055f2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80055f6:	d118      	bne.n	800562a <USB_DevInit+0x156>
    {
      if (i == 0U)
 80055f8:	693b      	ldr	r3, [r7, #16]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d10a      	bne.n	8005614 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	015a      	lsls	r2, r3, #5
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	4413      	add	r3, r2
 8005606:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800560a:	461a      	mov	r2, r3
 800560c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005610:	6013      	str	r3, [r2, #0]
 8005612:	e013      	b.n	800563c <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005614:	693b      	ldr	r3, [r7, #16]
 8005616:	015a      	lsls	r2, r3, #5
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	4413      	add	r3, r2
 800561c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005620:	461a      	mov	r2, r3
 8005622:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005626:	6013      	str	r3, [r2, #0]
 8005628:	e008      	b.n	800563c <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	015a      	lsls	r2, r3, #5
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	4413      	add	r3, r2
 8005632:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005636:	461a      	mov	r2, r3
 8005638:	2300      	movs	r3, #0
 800563a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	015a      	lsls	r2, r3, #5
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	4413      	add	r3, r2
 8005644:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005648:	461a      	mov	r2, r3
 800564a:	2300      	movs	r3, #0
 800564c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800564e:	693b      	ldr	r3, [r7, #16]
 8005650:	015a      	lsls	r2, r3, #5
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	4413      	add	r3, r2
 8005656:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800565a:	461a      	mov	r2, r3
 800565c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005660:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	3301      	adds	r3, #1
 8005666:	613b      	str	r3, [r7, #16]
 8005668:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800566c:	461a      	mov	r2, r3
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	4293      	cmp	r3, r2
 8005672:	d3b5      	bcc.n	80055e0 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005674:	2300      	movs	r3, #0
 8005676:	613b      	str	r3, [r7, #16]
 8005678:	e043      	b.n	8005702 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	015a      	lsls	r2, r3, #5
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	4413      	add	r3, r2
 8005682:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800568c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005690:	d118      	bne.n	80056c4 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d10a      	bne.n	80056ae <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	015a      	lsls	r2, r3, #5
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	4413      	add	r3, r2
 80056a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056a4:	461a      	mov	r2, r3
 80056a6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80056aa:	6013      	str	r3, [r2, #0]
 80056ac:	e013      	b.n	80056d6 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	015a      	lsls	r2, r3, #5
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	4413      	add	r3, r2
 80056b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056ba:	461a      	mov	r2, r3
 80056bc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80056c0:	6013      	str	r3, [r2, #0]
 80056c2:	e008      	b.n	80056d6 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	015a      	lsls	r2, r3, #5
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	4413      	add	r3, r2
 80056cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056d0:	461a      	mov	r2, r3
 80056d2:	2300      	movs	r3, #0
 80056d4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	015a      	lsls	r2, r3, #5
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	4413      	add	r3, r2
 80056de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056e2:	461a      	mov	r2, r3
 80056e4:	2300      	movs	r3, #0
 80056e6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	015a      	lsls	r2, r3, #5
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	4413      	add	r3, r2
 80056f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056f4:	461a      	mov	r2, r3
 80056f6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80056fa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80056fc:	693b      	ldr	r3, [r7, #16]
 80056fe:	3301      	adds	r3, #1
 8005700:	613b      	str	r3, [r7, #16]
 8005702:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005706:	461a      	mov	r2, r3
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	4293      	cmp	r3, r2
 800570c:	d3b5      	bcc.n	800567a <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005714:	691b      	ldr	r3, [r3, #16]
 8005716:	68fa      	ldr	r2, [r7, #12]
 8005718:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800571c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005720:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2200      	movs	r2, #0
 8005726:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800572e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005730:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005734:	2b00      	cmp	r3, #0
 8005736:	d105      	bne.n	8005744 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	699b      	ldr	r3, [r3, #24]
 800573c:	f043 0210 	orr.w	r2, r3, #16
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	699a      	ldr	r2, [r3, #24]
 8005748:	4b0f      	ldr	r3, [pc, #60]	@ (8005788 <USB_DevInit+0x2b4>)
 800574a:	4313      	orrs	r3, r2
 800574c:	687a      	ldr	r2, [r7, #4]
 800574e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005750:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005754:	2b00      	cmp	r3, #0
 8005756:	d005      	beq.n	8005764 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	699b      	ldr	r3, [r3, #24]
 800575c:	f043 0208 	orr.w	r2, r3, #8
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005764:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005768:	2b01      	cmp	r3, #1
 800576a:	d105      	bne.n	8005778 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	699a      	ldr	r2, [r3, #24]
 8005770:	4b06      	ldr	r3, [pc, #24]	@ (800578c <USB_DevInit+0x2b8>)
 8005772:	4313      	orrs	r3, r2
 8005774:	687a      	ldr	r2, [r7, #4]
 8005776:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005778:	7dfb      	ldrb	r3, [r7, #23]
}
 800577a:	4618      	mov	r0, r3
 800577c:	3718      	adds	r7, #24
 800577e:	46bd      	mov	sp, r7
 8005780:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005784:	b004      	add	sp, #16
 8005786:	4770      	bx	lr
 8005788:	803c3800 	.word	0x803c3800
 800578c:	40000004 	.word	0x40000004

08005790 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005790:	b480      	push	{r7}
 8005792:	b085      	sub	sp, #20
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
 8005798:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800579a:	2300      	movs	r3, #0
 800579c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	3301      	adds	r3, #1
 80057a2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80057aa:	d901      	bls.n	80057b0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80057ac:	2303      	movs	r3, #3
 80057ae:	e01b      	b.n	80057e8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	691b      	ldr	r3, [r3, #16]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	daf2      	bge.n	800579e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80057b8:	2300      	movs	r3, #0
 80057ba:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	019b      	lsls	r3, r3, #6
 80057c0:	f043 0220 	orr.w	r2, r3, #32
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	3301      	adds	r3, #1
 80057cc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80057d4:	d901      	bls.n	80057da <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80057d6:	2303      	movs	r3, #3
 80057d8:	e006      	b.n	80057e8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	691b      	ldr	r3, [r3, #16]
 80057de:	f003 0320 	and.w	r3, r3, #32
 80057e2:	2b20      	cmp	r3, #32
 80057e4:	d0f0      	beq.n	80057c8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80057e6:	2300      	movs	r3, #0
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	3714      	adds	r7, #20
 80057ec:	46bd      	mov	sp, r7
 80057ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f2:	4770      	bx	lr

080057f4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80057f4:	b480      	push	{r7}
 80057f6:	b085      	sub	sp, #20
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80057fc:	2300      	movs	r3, #0
 80057fe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	3301      	adds	r3, #1
 8005804:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800580c:	d901      	bls.n	8005812 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800580e:	2303      	movs	r3, #3
 8005810:	e018      	b.n	8005844 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	691b      	ldr	r3, [r3, #16]
 8005816:	2b00      	cmp	r3, #0
 8005818:	daf2      	bge.n	8005800 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800581a:	2300      	movs	r3, #0
 800581c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2210      	movs	r2, #16
 8005822:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	3301      	adds	r3, #1
 8005828:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005830:	d901      	bls.n	8005836 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005832:	2303      	movs	r3, #3
 8005834:	e006      	b.n	8005844 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	691b      	ldr	r3, [r3, #16]
 800583a:	f003 0310 	and.w	r3, r3, #16
 800583e:	2b10      	cmp	r3, #16
 8005840:	d0f0      	beq.n	8005824 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005842:	2300      	movs	r3, #0
}
 8005844:	4618      	mov	r0, r3
 8005846:	3714      	adds	r7, #20
 8005848:	46bd      	mov	sp, r7
 800584a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584e:	4770      	bx	lr

08005850 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005850:	b480      	push	{r7}
 8005852:	b085      	sub	sp, #20
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
 8005858:	460b      	mov	r3, r1
 800585a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005866:	681a      	ldr	r2, [r3, #0]
 8005868:	78fb      	ldrb	r3, [r7, #3]
 800586a:	68f9      	ldr	r1, [r7, #12]
 800586c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005870:	4313      	orrs	r3, r2
 8005872:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005874:	2300      	movs	r3, #0
}
 8005876:	4618      	mov	r0, r3
 8005878:	3714      	adds	r7, #20
 800587a:	46bd      	mov	sp, r7
 800587c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005880:	4770      	bx	lr

08005882 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005882:	b480      	push	{r7}
 8005884:	b085      	sub	sp, #20
 8005886:	af00      	add	r7, sp, #0
 8005888:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	68fa      	ldr	r2, [r7, #12]
 8005898:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800589c:	f023 0303 	bic.w	r3, r3, #3
 80058a0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	68fa      	ldr	r2, [r7, #12]
 80058ac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80058b0:	f043 0302 	orr.w	r3, r3, #2
 80058b4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80058b6:	2300      	movs	r3, #0
}
 80058b8:	4618      	mov	r0, r3
 80058ba:	3714      	adds	r7, #20
 80058bc:	46bd      	mov	sp, r7
 80058be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c2:	4770      	bx	lr

080058c4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80058c4:	b480      	push	{r7}
 80058c6:	b083      	sub	sp, #12
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	695b      	ldr	r3, [r3, #20]
 80058d0:	f003 0301 	and.w	r3, r3, #1
}
 80058d4:	4618      	mov	r0, r3
 80058d6:	370c      	adds	r7, #12
 80058d8:	46bd      	mov	sp, r7
 80058da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058de:	4770      	bx	lr

080058e0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b085      	sub	sp, #20
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80058e8:	2300      	movs	r3, #0
 80058ea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	3301      	adds	r3, #1
 80058f0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80058f8:	d901      	bls.n	80058fe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80058fa:	2303      	movs	r3, #3
 80058fc:	e022      	b.n	8005944 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	691b      	ldr	r3, [r3, #16]
 8005902:	2b00      	cmp	r3, #0
 8005904:	daf2      	bge.n	80058ec <USB_CoreReset+0xc>

  count = 10U;
 8005906:	230a      	movs	r3, #10
 8005908:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 800590a:	e002      	b.n	8005912 <USB_CoreReset+0x32>
  {
    count--;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	3b01      	subs	r3, #1
 8005910:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d1f9      	bne.n	800590c <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	691b      	ldr	r3, [r3, #16]
 800591c:	f043 0201 	orr.w	r2, r3, #1
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	3301      	adds	r3, #1
 8005928:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005930:	d901      	bls.n	8005936 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8005932:	2303      	movs	r3, #3
 8005934:	e006      	b.n	8005944 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	691b      	ldr	r3, [r3, #16]
 800593a:	f003 0301 	and.w	r3, r3, #1
 800593e:	2b01      	cmp	r3, #1
 8005940:	d0f0      	beq.n	8005924 <USB_CoreReset+0x44>

  return HAL_OK;
 8005942:	2300      	movs	r3, #0
}
 8005944:	4618      	mov	r0, r3
 8005946:	3714      	adds	r7, #20
 8005948:	46bd      	mov	sp, r7
 800594a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594e:	4770      	bx	lr

08005950 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005950:	b480      	push	{r7}
 8005952:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8005954:	bf00      	nop
 8005956:	46bd      	mov	sp, r7
 8005958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595c:	4770      	bx	lr
	...

08005960 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005960:	b480      	push	{r7}
 8005962:	b085      	sub	sp, #20
 8005964:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005966:	f3ef 8305 	mrs	r3, IPSR
 800596a:	60bb      	str	r3, [r7, #8]
  return(result);
 800596c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800596e:	2b00      	cmp	r3, #0
 8005970:	d10f      	bne.n	8005992 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005972:	f3ef 8310 	mrs	r3, PRIMASK
 8005976:	607b      	str	r3, [r7, #4]
  return(result);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d105      	bne.n	800598a <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800597e:	f3ef 8311 	mrs	r3, BASEPRI
 8005982:	603b      	str	r3, [r7, #0]
  return(result);
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d007      	beq.n	800599a <osKernelInitialize+0x3a>
 800598a:	4b0e      	ldr	r3, [pc, #56]	@ (80059c4 <osKernelInitialize+0x64>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	2b02      	cmp	r3, #2
 8005990:	d103      	bne.n	800599a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8005992:	f06f 0305 	mvn.w	r3, #5
 8005996:	60fb      	str	r3, [r7, #12]
 8005998:	e00c      	b.n	80059b4 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800599a:	4b0a      	ldr	r3, [pc, #40]	@ (80059c4 <osKernelInitialize+0x64>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d105      	bne.n	80059ae <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80059a2:	4b08      	ldr	r3, [pc, #32]	@ (80059c4 <osKernelInitialize+0x64>)
 80059a4:	2201      	movs	r2, #1
 80059a6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80059a8:	2300      	movs	r3, #0
 80059aa:	60fb      	str	r3, [r7, #12]
 80059ac:	e002      	b.n	80059b4 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80059ae:	f04f 33ff 	mov.w	r3, #4294967295
 80059b2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80059b4:	68fb      	ldr	r3, [r7, #12]
}
 80059b6:	4618      	mov	r0, r3
 80059b8:	3714      	adds	r7, #20
 80059ba:	46bd      	mov	sp, r7
 80059bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c0:	4770      	bx	lr
 80059c2:	bf00      	nop
 80059c4:	20000a3c 	.word	0x20000a3c

080059c8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b084      	sub	sp, #16
 80059cc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80059ce:	f3ef 8305 	mrs	r3, IPSR
 80059d2:	60bb      	str	r3, [r7, #8]
  return(result);
 80059d4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d10f      	bne.n	80059fa <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059da:	f3ef 8310 	mrs	r3, PRIMASK
 80059de:	607b      	str	r3, [r7, #4]
  return(result);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d105      	bne.n	80059f2 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80059e6:	f3ef 8311 	mrs	r3, BASEPRI
 80059ea:	603b      	str	r3, [r7, #0]
  return(result);
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d007      	beq.n	8005a02 <osKernelStart+0x3a>
 80059f2:	4b0f      	ldr	r3, [pc, #60]	@ (8005a30 <osKernelStart+0x68>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	2b02      	cmp	r3, #2
 80059f8:	d103      	bne.n	8005a02 <osKernelStart+0x3a>
    stat = osErrorISR;
 80059fa:	f06f 0305 	mvn.w	r3, #5
 80059fe:	60fb      	str	r3, [r7, #12]
 8005a00:	e010      	b.n	8005a24 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005a02:	4b0b      	ldr	r3, [pc, #44]	@ (8005a30 <osKernelStart+0x68>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	2b01      	cmp	r3, #1
 8005a08:	d109      	bne.n	8005a1e <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005a0a:	f7ff ffa1 	bl	8005950 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005a0e:	4b08      	ldr	r3, [pc, #32]	@ (8005a30 <osKernelStart+0x68>)
 8005a10:	2202      	movs	r2, #2
 8005a12:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005a14:	f001 ff02 	bl	800781c <vTaskStartScheduler>
      stat = osOK;
 8005a18:	2300      	movs	r3, #0
 8005a1a:	60fb      	str	r3, [r7, #12]
 8005a1c:	e002      	b.n	8005a24 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8005a1e:	f04f 33ff 	mov.w	r3, #4294967295
 8005a22:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005a24:	68fb      	ldr	r3, [r7, #12]
}
 8005a26:	4618      	mov	r0, r3
 8005a28:	3710      	adds	r7, #16
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}
 8005a2e:	bf00      	nop
 8005a30:	20000a3c 	.word	0x20000a3c

08005a34 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b090      	sub	sp, #64	@ 0x40
 8005a38:	af04      	add	r7, sp, #16
 8005a3a:	60f8      	str	r0, [r7, #12]
 8005a3c:	60b9      	str	r1, [r7, #8]
 8005a3e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005a40:	2300      	movs	r3, #0
 8005a42:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a44:	f3ef 8305 	mrs	r3, IPSR
 8005a48:	61fb      	str	r3, [r7, #28]
  return(result);
 8005a4a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	f040 808f 	bne.w	8005b70 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a52:	f3ef 8310 	mrs	r3, PRIMASK
 8005a56:	61bb      	str	r3, [r7, #24]
  return(result);
 8005a58:	69bb      	ldr	r3, [r7, #24]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d105      	bne.n	8005a6a <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005a5e:	f3ef 8311 	mrs	r3, BASEPRI
 8005a62:	617b      	str	r3, [r7, #20]
  return(result);
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d003      	beq.n	8005a72 <osThreadNew+0x3e>
 8005a6a:	4b44      	ldr	r3, [pc, #272]	@ (8005b7c <osThreadNew+0x148>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	2b02      	cmp	r3, #2
 8005a70:	d07e      	beq.n	8005b70 <osThreadNew+0x13c>
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d07b      	beq.n	8005b70 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8005a78:	2380      	movs	r3, #128	@ 0x80
 8005a7a:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8005a7c:	2318      	movs	r3, #24
 8005a7e:	627b      	str	r3, [r7, #36]	@ 0x24

    name = NULL;
 8005a80:	2300      	movs	r3, #0
 8005a82:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem  = -1;
 8005a84:	f04f 33ff 	mov.w	r3, #4294967295
 8005a88:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d045      	beq.n	8005b1c <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d002      	beq.n	8005a9e <osThreadNew+0x6a>
        name = attr->name;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	699b      	ldr	r3, [r3, #24]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d002      	beq.n	8005aac <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	699b      	ldr	r3, [r3, #24]
 8005aaa:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005aac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d008      	beq.n	8005ac4 <osThreadNew+0x90>
 8005ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ab4:	2b38      	cmp	r3, #56	@ 0x38
 8005ab6:	d805      	bhi.n	8005ac4 <osThreadNew+0x90>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	f003 0301 	and.w	r3, r3, #1
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d001      	beq.n	8005ac8 <osThreadNew+0x94>
        return (NULL);
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	e054      	b.n	8005b72 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	695b      	ldr	r3, [r3, #20]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d003      	beq.n	8005ad8 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	695b      	ldr	r3, [r3, #20]
 8005ad4:	089b      	lsrs	r3, r3, #2
 8005ad6:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	689b      	ldr	r3, [r3, #8]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d00e      	beq.n	8005afe <osThreadNew+0xca>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	68db      	ldr	r3, [r3, #12]
 8005ae4:	2ba7      	cmp	r3, #167	@ 0xa7
 8005ae6:	d90a      	bls.n	8005afe <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d006      	beq.n	8005afe <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	695b      	ldr	r3, [r3, #20]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d002      	beq.n	8005afe <osThreadNew+0xca>
        mem = 1;
 8005af8:	2301      	movs	r3, #1
 8005afa:	623b      	str	r3, [r7, #32]
 8005afc:	e010      	b.n	8005b20 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	689b      	ldr	r3, [r3, #8]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d10c      	bne.n	8005b20 <osThreadNew+0xec>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	68db      	ldr	r3, [r3, #12]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d108      	bne.n	8005b20 <osThreadNew+0xec>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	691b      	ldr	r3, [r3, #16]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d104      	bne.n	8005b20 <osThreadNew+0xec>
          mem = 0;
 8005b16:	2300      	movs	r3, #0
 8005b18:	623b      	str	r3, [r7, #32]
 8005b1a:	e001      	b.n	8005b20 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8005b20:	6a3b      	ldr	r3, [r7, #32]
 8005b22:	2b01      	cmp	r3, #1
 8005b24:	d110      	bne.n	8005b48 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8005b2a:	687a      	ldr	r2, [r7, #4]
 8005b2c:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005b2e:	9202      	str	r2, [sp, #8]
 8005b30:	9301      	str	r3, [sp, #4]
 8005b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b34:	9300      	str	r3, [sp, #0]
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005b3a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005b3c:	68f8      	ldr	r0, [r7, #12]
 8005b3e:	f001 fc6f 	bl	8007420 <xTaskCreateStatic>
 8005b42:	4603      	mov	r3, r0
 8005b44:	613b      	str	r3, [r7, #16]
 8005b46:	e013      	b.n	8005b70 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8005b48:	6a3b      	ldr	r3, [r7, #32]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d110      	bne.n	8005b70 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005b4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b50:	b29a      	uxth	r2, r3
 8005b52:	f107 0310 	add.w	r3, r7, #16
 8005b56:	9301      	str	r3, [sp, #4]
 8005b58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b5a:	9300      	str	r3, [sp, #0]
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005b60:	68f8      	ldr	r0, [r7, #12]
 8005b62:	f001 fcc3 	bl	80074ec <xTaskCreate>
 8005b66:	4603      	mov	r3, r0
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	d001      	beq.n	8005b70 <osThreadNew+0x13c>
          hTask = NULL;
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005b70:	693b      	ldr	r3, [r7, #16]
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	3730      	adds	r7, #48	@ 0x30
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}
 8005b7a:	bf00      	nop
 8005b7c:	20000a3c 	.word	0x20000a3c

08005b80 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b086      	sub	sp, #24
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b88:	f3ef 8305 	mrs	r3, IPSR
 8005b8c:	613b      	str	r3, [r7, #16]
  return(result);
 8005b8e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d10f      	bne.n	8005bb4 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b94:	f3ef 8310 	mrs	r3, PRIMASK
 8005b98:	60fb      	str	r3, [r7, #12]
  return(result);
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d105      	bne.n	8005bac <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005ba0:	f3ef 8311 	mrs	r3, BASEPRI
 8005ba4:	60bb      	str	r3, [r7, #8]
  return(result);
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d007      	beq.n	8005bbc <osDelay+0x3c>
 8005bac:	4b0a      	ldr	r3, [pc, #40]	@ (8005bd8 <osDelay+0x58>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	2b02      	cmp	r3, #2
 8005bb2:	d103      	bne.n	8005bbc <osDelay+0x3c>
    stat = osErrorISR;
 8005bb4:	f06f 0305 	mvn.w	r3, #5
 8005bb8:	617b      	str	r3, [r7, #20]
 8005bba:	e007      	b.n	8005bcc <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d002      	beq.n	8005bcc <osDelay+0x4c>
      vTaskDelay(ticks);
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	f001 fdf0 	bl	80077ac <vTaskDelay>
    }
  }

  return (stat);
 8005bcc:	697b      	ldr	r3, [r7, #20]
}
 8005bce:	4618      	mov	r0, r3
 8005bd0:	3718      	adds	r7, #24
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}
 8005bd6:	bf00      	nop
 8005bd8:	20000a3c 	.word	0x20000a3c

08005bdc <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b08c      	sub	sp, #48	@ 0x30
 8005be0:	af02      	add	r7, sp, #8
 8005be2:	60f8      	str	r0, [r7, #12]
 8005be4:	60b9      	str	r1, [r7, #8]
 8005be6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8005be8:	2300      	movs	r3, #0
 8005bea:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005bec:	f3ef 8305 	mrs	r3, IPSR
 8005bf0:	61bb      	str	r3, [r7, #24]
  return(result);
 8005bf2:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	f040 8086 	bne.w	8005d06 <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005bfa:	f3ef 8310 	mrs	r3, PRIMASK
 8005bfe:	617b      	str	r3, [r7, #20]
  return(result);
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d105      	bne.n	8005c12 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005c06:	f3ef 8311 	mrs	r3, BASEPRI
 8005c0a:	613b      	str	r3, [r7, #16]
  return(result);
 8005c0c:	693b      	ldr	r3, [r7, #16]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d003      	beq.n	8005c1a <osSemaphoreNew+0x3e>
 8005c12:	4b3f      	ldr	r3, [pc, #252]	@ (8005d10 <osSemaphoreNew+0x134>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	2b02      	cmp	r3, #2
 8005c18:	d075      	beq.n	8005d06 <osSemaphoreNew+0x12a>
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d072      	beq.n	8005d06 <osSemaphoreNew+0x12a>
 8005c20:	68ba      	ldr	r2, [r7, #8]
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	429a      	cmp	r2, r3
 8005c26:	d86e      	bhi.n	8005d06 <osSemaphoreNew+0x12a>
    mem = -1;
 8005c28:	f04f 33ff 	mov.w	r3, #4294967295
 8005c2c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d015      	beq.n	8005c60 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	689b      	ldr	r3, [r3, #8]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d006      	beq.n	8005c4a <osSemaphoreNew+0x6e>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	68db      	ldr	r3, [r3, #12]
 8005c40:	2b4f      	cmp	r3, #79	@ 0x4f
 8005c42:	d902      	bls.n	8005c4a <osSemaphoreNew+0x6e>
        mem = 1;
 8005c44:	2301      	movs	r3, #1
 8005c46:	623b      	str	r3, [r7, #32]
 8005c48:	e00c      	b.n	8005c64 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	689b      	ldr	r3, [r3, #8]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d108      	bne.n	8005c64 <osSemaphoreNew+0x88>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	68db      	ldr	r3, [r3, #12]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d104      	bne.n	8005c64 <osSemaphoreNew+0x88>
          mem = 0;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	623b      	str	r3, [r7, #32]
 8005c5e:	e001      	b.n	8005c64 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8005c60:	2300      	movs	r3, #0
 8005c62:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8005c64:	6a3b      	ldr	r3, [r7, #32]
 8005c66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c6a:	d04c      	beq.n	8005d06 <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	2b01      	cmp	r3, #1
 8005c70:	d128      	bne.n	8005cc4 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 8005c72:	6a3b      	ldr	r3, [r7, #32]
 8005c74:	2b01      	cmp	r3, #1
 8005c76:	d10a      	bne.n	8005c8e <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	689b      	ldr	r3, [r3, #8]
 8005c7c:	2203      	movs	r2, #3
 8005c7e:	9200      	str	r2, [sp, #0]
 8005c80:	2200      	movs	r2, #0
 8005c82:	2100      	movs	r1, #0
 8005c84:	2001      	movs	r0, #1
 8005c86:	f000 fbc3 	bl	8006410 <xQueueGenericCreateStatic>
 8005c8a:	6278      	str	r0, [r7, #36]	@ 0x24
 8005c8c:	e005      	b.n	8005c9a <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8005c8e:	2203      	movs	r2, #3
 8005c90:	2100      	movs	r1, #0
 8005c92:	2001      	movs	r0, #1
 8005c94:	f000 fc43 	bl	800651e <xQueueGenericCreate>
 8005c98:	6278      	str	r0, [r7, #36]	@ 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8005c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d022      	beq.n	8005ce6 <osSemaphoreNew+0x10a>
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d01f      	beq.n	8005ce6 <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	2200      	movs	r2, #0
 8005caa:	2100      	movs	r1, #0
 8005cac:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005cae:	f000 fd13 	bl	80066d8 <xQueueGenericSend>
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	2b01      	cmp	r3, #1
 8005cb6:	d016      	beq.n	8005ce6 <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 8005cb8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005cba:	f001 f9db 	bl	8007074 <vQueueDelete>
            hSemaphore = NULL;
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	627b      	str	r3, [r7, #36]	@ 0x24
 8005cc2:	e010      	b.n	8005ce6 <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 8005cc4:	6a3b      	ldr	r3, [r7, #32]
 8005cc6:	2b01      	cmp	r3, #1
 8005cc8:	d108      	bne.n	8005cdc <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	689b      	ldr	r3, [r3, #8]
 8005cce:	461a      	mov	r2, r3
 8005cd0:	68b9      	ldr	r1, [r7, #8]
 8005cd2:	68f8      	ldr	r0, [r7, #12]
 8005cd4:	f000 fc89 	bl	80065ea <xQueueCreateCountingSemaphoreStatic>
 8005cd8:	6278      	str	r0, [r7, #36]	@ 0x24
 8005cda:	e004      	b.n	8005ce6 <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8005cdc:	68b9      	ldr	r1, [r7, #8]
 8005cde:	68f8      	ldr	r0, [r7, #12]
 8005ce0:	f000 fcc0 	bl	8006664 <xQueueCreateCountingSemaphore>
 8005ce4:	6278      	str	r0, [r7, #36]	@ 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8005ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d00c      	beq.n	8005d06 <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d003      	beq.n	8005cfa <osSemaphoreNew+0x11e>
          name = attr->name;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	61fb      	str	r3, [r7, #28]
 8005cf8:	e001      	b.n	8005cfe <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8005cfe:	69f9      	ldr	r1, [r7, #28]
 8005d00:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005d02:	f001 fb05 	bl	8007310 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8005d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005d08:	4618      	mov	r0, r3
 8005d0a:	3728      	adds	r7, #40	@ 0x28
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bd80      	pop	{r7, pc}
 8005d10:	20000a3c 	.word	0x20000a3c

08005d14 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b088      	sub	sp, #32
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
 8005d1c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8005d22:	2300      	movs	r3, #0
 8005d24:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8005d26:	69bb      	ldr	r3, [r7, #24]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d103      	bne.n	8005d34 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8005d2c:	f06f 0303 	mvn.w	r3, #3
 8005d30:	61fb      	str	r3, [r7, #28]
 8005d32:	e04b      	b.n	8005dcc <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d34:	f3ef 8305 	mrs	r3, IPSR
 8005d38:	617b      	str	r3, [r7, #20]
  return(result);
 8005d3a:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d10f      	bne.n	8005d60 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d40:	f3ef 8310 	mrs	r3, PRIMASK
 8005d44:	613b      	str	r3, [r7, #16]
  return(result);
 8005d46:	693b      	ldr	r3, [r7, #16]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d105      	bne.n	8005d58 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005d4c:	f3ef 8311 	mrs	r3, BASEPRI
 8005d50:	60fb      	str	r3, [r7, #12]
  return(result);
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d026      	beq.n	8005da6 <osSemaphoreAcquire+0x92>
 8005d58:	4b1f      	ldr	r3, [pc, #124]	@ (8005dd8 <osSemaphoreAcquire+0xc4>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	2b02      	cmp	r3, #2
 8005d5e:	d122      	bne.n	8005da6 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d003      	beq.n	8005d6e <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8005d66:	f06f 0303 	mvn.w	r3, #3
 8005d6a:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8005d6c:	e02d      	b.n	8005dca <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8005d6e:	2300      	movs	r3, #0
 8005d70:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8005d72:	f107 0308 	add.w	r3, r7, #8
 8005d76:	461a      	mov	r2, r3
 8005d78:	2100      	movs	r1, #0
 8005d7a:	69b8      	ldr	r0, [r7, #24]
 8005d7c:	f001 f8f2 	bl	8006f64 <xQueueReceiveFromISR>
 8005d80:	4603      	mov	r3, r0
 8005d82:	2b01      	cmp	r3, #1
 8005d84:	d003      	beq.n	8005d8e <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8005d86:	f06f 0302 	mvn.w	r3, #2
 8005d8a:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8005d8c:	e01d      	b.n	8005dca <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d01a      	beq.n	8005dca <osSemaphoreAcquire+0xb6>
 8005d94:	4b11      	ldr	r3, [pc, #68]	@ (8005ddc <osSemaphoreAcquire+0xc8>)
 8005d96:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d9a:	601a      	str	r2, [r3, #0]
 8005d9c:	f3bf 8f4f 	dsb	sy
 8005da0:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8005da4:	e011      	b.n	8005dca <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8005da6:	6839      	ldr	r1, [r7, #0]
 8005da8:	69b8      	ldr	r0, [r7, #24]
 8005daa:	f000 ffc3 	bl	8006d34 <xQueueSemaphoreTake>
 8005dae:	4603      	mov	r3, r0
 8005db0:	2b01      	cmp	r3, #1
 8005db2:	d00b      	beq.n	8005dcc <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d003      	beq.n	8005dc2 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8005dba:	f06f 0301 	mvn.w	r3, #1
 8005dbe:	61fb      	str	r3, [r7, #28]
 8005dc0:	e004      	b.n	8005dcc <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8005dc2:	f06f 0302 	mvn.w	r3, #2
 8005dc6:	61fb      	str	r3, [r7, #28]
 8005dc8:	e000      	b.n	8005dcc <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8005dca:	bf00      	nop
      }
    }
  }

  return (stat);
 8005dcc:	69fb      	ldr	r3, [r7, #28]
}
 8005dce:	4618      	mov	r0, r3
 8005dd0:	3720      	adds	r7, #32
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bd80      	pop	{r7, pc}
 8005dd6:	bf00      	nop
 8005dd8:	20000a3c 	.word	0x20000a3c
 8005ddc:	e000ed04 	.word	0xe000ed04

08005de0 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b088      	sub	sp, #32
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8005dec:	2300      	movs	r3, #0
 8005dee:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8005df0:	69bb      	ldr	r3, [r7, #24]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d103      	bne.n	8005dfe <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8005df6:	f06f 0303 	mvn.w	r3, #3
 8005dfa:	61fb      	str	r3, [r7, #28]
 8005dfc:	e03e      	b.n	8005e7c <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005dfe:	f3ef 8305 	mrs	r3, IPSR
 8005e02:	617b      	str	r3, [r7, #20]
  return(result);
 8005e04:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d10f      	bne.n	8005e2a <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e0a:	f3ef 8310 	mrs	r3, PRIMASK
 8005e0e:	613b      	str	r3, [r7, #16]
  return(result);
 8005e10:	693b      	ldr	r3, [r7, #16]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d105      	bne.n	8005e22 <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005e16:	f3ef 8311 	mrs	r3, BASEPRI
 8005e1a:	60fb      	str	r3, [r7, #12]
  return(result);
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d01e      	beq.n	8005e60 <osSemaphoreRelease+0x80>
 8005e22:	4b19      	ldr	r3, [pc, #100]	@ (8005e88 <osSemaphoreRelease+0xa8>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	2b02      	cmp	r3, #2
 8005e28:	d11a      	bne.n	8005e60 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8005e2e:	f107 0308 	add.w	r3, r7, #8
 8005e32:	4619      	mov	r1, r3
 8005e34:	69b8      	ldr	r0, [r7, #24]
 8005e36:	f000 fdfc 	bl	8006a32 <xQueueGiveFromISR>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	2b01      	cmp	r3, #1
 8005e3e:	d003      	beq.n	8005e48 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8005e40:	f06f 0302 	mvn.w	r3, #2
 8005e44:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8005e46:	e018      	b.n	8005e7a <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d015      	beq.n	8005e7a <osSemaphoreRelease+0x9a>
 8005e4e:	4b0f      	ldr	r3, [pc, #60]	@ (8005e8c <osSemaphoreRelease+0xac>)
 8005e50:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e54:	601a      	str	r2, [r3, #0]
 8005e56:	f3bf 8f4f 	dsb	sy
 8005e5a:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8005e5e:	e00c      	b.n	8005e7a <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005e60:	2300      	movs	r3, #0
 8005e62:	2200      	movs	r2, #0
 8005e64:	2100      	movs	r1, #0
 8005e66:	69b8      	ldr	r0, [r7, #24]
 8005e68:	f000 fc36 	bl	80066d8 <xQueueGenericSend>
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	2b01      	cmp	r3, #1
 8005e70:	d004      	beq.n	8005e7c <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8005e72:	f06f 0302 	mvn.w	r3, #2
 8005e76:	61fb      	str	r3, [r7, #28]
 8005e78:	e000      	b.n	8005e7c <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8005e7a:	bf00      	nop
    }
  }

  return (stat);
 8005e7c:	69fb      	ldr	r3, [r7, #28]
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	3720      	adds	r7, #32
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd80      	pop	{r7, pc}
 8005e86:	bf00      	nop
 8005e88:	20000a3c 	.word	0x20000a3c
 8005e8c:	e000ed04 	.word	0xe000ed04

08005e90 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b08c      	sub	sp, #48	@ 0x30
 8005e94:	af02      	add	r7, sp, #8
 8005e96:	60f8      	str	r0, [r7, #12]
 8005e98:	60b9      	str	r1, [r7, #8]
 8005e9a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005ea0:	f3ef 8305 	mrs	r3, IPSR
 8005ea4:	61bb      	str	r3, [r7, #24]
  return(result);
 8005ea6:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d16f      	bne.n	8005f8c <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005eac:	f3ef 8310 	mrs	r3, PRIMASK
 8005eb0:	617b      	str	r3, [r7, #20]
  return(result);
 8005eb2:	697b      	ldr	r3, [r7, #20]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d105      	bne.n	8005ec4 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005eb8:	f3ef 8311 	mrs	r3, BASEPRI
 8005ebc:	613b      	str	r3, [r7, #16]
  return(result);
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d003      	beq.n	8005ecc <osMessageQueueNew+0x3c>
 8005ec4:	4b34      	ldr	r3, [pc, #208]	@ (8005f98 <osMessageQueueNew+0x108>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	2b02      	cmp	r3, #2
 8005eca:	d05f      	beq.n	8005f8c <osMessageQueueNew+0xfc>
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d05c      	beq.n	8005f8c <osMessageQueueNew+0xfc>
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d059      	beq.n	8005f8c <osMessageQueueNew+0xfc>
    mem = -1;
 8005ed8:	f04f 33ff 	mov.w	r3, #4294967295
 8005edc:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d029      	beq.n	8005f38 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	689b      	ldr	r3, [r3, #8]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d012      	beq.n	8005f12 <osMessageQueueNew+0x82>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	68db      	ldr	r3, [r3, #12]
 8005ef0:	2b4f      	cmp	r3, #79	@ 0x4f
 8005ef2:	d90e      	bls.n	8005f12 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d00a      	beq.n	8005f12 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	695a      	ldr	r2, [r3, #20]
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	68b9      	ldr	r1, [r7, #8]
 8005f04:	fb01 f303 	mul.w	r3, r1, r3
 8005f08:	429a      	cmp	r2, r3
 8005f0a:	d302      	bcc.n	8005f12 <osMessageQueueNew+0x82>
        mem = 1;
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	623b      	str	r3, [r7, #32]
 8005f10:	e014      	b.n	8005f3c <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	689b      	ldr	r3, [r3, #8]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d110      	bne.n	8005f3c <osMessageQueueNew+0xac>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	68db      	ldr	r3, [r3, #12]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d10c      	bne.n	8005f3c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d108      	bne.n	8005f3c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	695b      	ldr	r3, [r3, #20]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d104      	bne.n	8005f3c <osMessageQueueNew+0xac>
          mem = 0;
 8005f32:	2300      	movs	r3, #0
 8005f34:	623b      	str	r3, [r7, #32]
 8005f36:	e001      	b.n	8005f3c <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8005f38:	2300      	movs	r3, #0
 8005f3a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8005f3c:	6a3b      	ldr	r3, [r7, #32]
 8005f3e:	2b01      	cmp	r3, #1
 8005f40:	d10b      	bne.n	8005f5a <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	691a      	ldr	r2, [r3, #16]
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	689b      	ldr	r3, [r3, #8]
 8005f4a:	2100      	movs	r1, #0
 8005f4c:	9100      	str	r1, [sp, #0]
 8005f4e:	68b9      	ldr	r1, [r7, #8]
 8005f50:	68f8      	ldr	r0, [r7, #12]
 8005f52:	f000 fa5d 	bl	8006410 <xQueueGenericCreateStatic>
 8005f56:	6278      	str	r0, [r7, #36]	@ 0x24
 8005f58:	e008      	b.n	8005f6c <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8005f5a:	6a3b      	ldr	r3, [r7, #32]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d105      	bne.n	8005f6c <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8005f60:	2200      	movs	r2, #0
 8005f62:	68b9      	ldr	r1, [r7, #8]
 8005f64:	68f8      	ldr	r0, [r7, #12]
 8005f66:	f000 fada 	bl	800651e <xQueueGenericCreate>
 8005f6a:	6278      	str	r0, [r7, #36]	@ 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8005f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d00c      	beq.n	8005f8c <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d003      	beq.n	8005f80 <osMessageQueueNew+0xf0>
        name = attr->name;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	61fb      	str	r3, [r7, #28]
 8005f7e:	e001      	b.n	8005f84 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8005f80:	2300      	movs	r3, #0
 8005f82:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8005f84:	69f9      	ldr	r1, [r7, #28]
 8005f86:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005f88:	f001 f9c2 	bl	8007310 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8005f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005f8e:	4618      	mov	r0, r3
 8005f90:	3728      	adds	r7, #40	@ 0x28
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bd80      	pop	{r7, pc}
 8005f96:	bf00      	nop
 8005f98:	20000a3c 	.word	0x20000a3c

08005f9c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b08a      	sub	sp, #40	@ 0x28
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	60f8      	str	r0, [r7, #12]
 8005fa4:	60b9      	str	r1, [r7, #8]
 8005fa6:	603b      	str	r3, [r7, #0]
 8005fa8:	4613      	mov	r3, r2
 8005faa:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005fb4:	f3ef 8305 	mrs	r3, IPSR
 8005fb8:	61fb      	str	r3, [r7, #28]
  return(result);
 8005fba:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d10f      	bne.n	8005fe0 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005fc0:	f3ef 8310 	mrs	r3, PRIMASK
 8005fc4:	61bb      	str	r3, [r7, #24]
  return(result);
 8005fc6:	69bb      	ldr	r3, [r7, #24]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d105      	bne.n	8005fd8 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005fcc:	f3ef 8311 	mrs	r3, BASEPRI
 8005fd0:	617b      	str	r3, [r7, #20]
  return(result);
 8005fd2:	697b      	ldr	r3, [r7, #20]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d02c      	beq.n	8006032 <osMessageQueuePut+0x96>
 8005fd8:	4b28      	ldr	r3, [pc, #160]	@ (800607c <osMessageQueuePut+0xe0>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	2b02      	cmp	r3, #2
 8005fde:	d128      	bne.n	8006032 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005fe0:	6a3b      	ldr	r3, [r7, #32]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d005      	beq.n	8005ff2 <osMessageQueuePut+0x56>
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d002      	beq.n	8005ff2 <osMessageQueuePut+0x56>
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d003      	beq.n	8005ffa <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8005ff2:	f06f 0303 	mvn.w	r3, #3
 8005ff6:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005ff8:	e039      	b.n	800606e <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8005ffe:	f107 0210 	add.w	r2, r7, #16
 8006002:	2300      	movs	r3, #0
 8006004:	68b9      	ldr	r1, [r7, #8]
 8006006:	6a38      	ldr	r0, [r7, #32]
 8006008:	f000 fc70 	bl	80068ec <xQueueGenericSendFromISR>
 800600c:	4603      	mov	r3, r0
 800600e:	2b01      	cmp	r3, #1
 8006010:	d003      	beq.n	800601a <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8006012:	f06f 0302 	mvn.w	r3, #2
 8006016:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006018:	e029      	b.n	800606e <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800601a:	693b      	ldr	r3, [r7, #16]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d026      	beq.n	800606e <osMessageQueuePut+0xd2>
 8006020:	4b17      	ldr	r3, [pc, #92]	@ (8006080 <osMessageQueuePut+0xe4>)
 8006022:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006026:	601a      	str	r2, [r3, #0]
 8006028:	f3bf 8f4f 	dsb	sy
 800602c:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006030:	e01d      	b.n	800606e <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006032:	6a3b      	ldr	r3, [r7, #32]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d002      	beq.n	800603e <osMessageQueuePut+0xa2>
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d103      	bne.n	8006046 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800603e:	f06f 0303 	mvn.w	r3, #3
 8006042:	627b      	str	r3, [r7, #36]	@ 0x24
 8006044:	e014      	b.n	8006070 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006046:	2300      	movs	r3, #0
 8006048:	683a      	ldr	r2, [r7, #0]
 800604a:	68b9      	ldr	r1, [r7, #8]
 800604c:	6a38      	ldr	r0, [r7, #32]
 800604e:	f000 fb43 	bl	80066d8 <xQueueGenericSend>
 8006052:	4603      	mov	r3, r0
 8006054:	2b01      	cmp	r3, #1
 8006056:	d00b      	beq.n	8006070 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d003      	beq.n	8006066 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800605e:	f06f 0301 	mvn.w	r3, #1
 8006062:	627b      	str	r3, [r7, #36]	@ 0x24
 8006064:	e004      	b.n	8006070 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8006066:	f06f 0302 	mvn.w	r3, #2
 800606a:	627b      	str	r3, [r7, #36]	@ 0x24
 800606c:	e000      	b.n	8006070 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800606e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8006070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006072:	4618      	mov	r0, r3
 8006074:	3728      	adds	r7, #40	@ 0x28
 8006076:	46bd      	mov	sp, r7
 8006078:	bd80      	pop	{r7, pc}
 800607a:	bf00      	nop
 800607c:	20000a3c 	.word	0x20000a3c
 8006080:	e000ed04 	.word	0xe000ed04

08006084 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8006084:	b580      	push	{r7, lr}
 8006086:	b08a      	sub	sp, #40	@ 0x28
 8006088:	af00      	add	r7, sp, #0
 800608a:	60f8      	str	r0, [r7, #12]
 800608c:	60b9      	str	r1, [r7, #8]
 800608e:	607a      	str	r2, [r7, #4]
 8006090:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006096:	2300      	movs	r3, #0
 8006098:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800609a:	f3ef 8305 	mrs	r3, IPSR
 800609e:	61fb      	str	r3, [r7, #28]
  return(result);
 80060a0:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d10f      	bne.n	80060c6 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80060a6:	f3ef 8310 	mrs	r3, PRIMASK
 80060aa:	61bb      	str	r3, [r7, #24]
  return(result);
 80060ac:	69bb      	ldr	r3, [r7, #24]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d105      	bne.n	80060be <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80060b2:	f3ef 8311 	mrs	r3, BASEPRI
 80060b6:	617b      	str	r3, [r7, #20]
  return(result);
 80060b8:	697b      	ldr	r3, [r7, #20]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d02c      	beq.n	8006118 <osMessageQueueGet+0x94>
 80060be:	4b28      	ldr	r3, [pc, #160]	@ (8006160 <osMessageQueueGet+0xdc>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	2b02      	cmp	r3, #2
 80060c4:	d128      	bne.n	8006118 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80060c6:	6a3b      	ldr	r3, [r7, #32]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d005      	beq.n	80060d8 <osMessageQueueGet+0x54>
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d002      	beq.n	80060d8 <osMessageQueueGet+0x54>
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d003      	beq.n	80060e0 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 80060d8:	f06f 0303 	mvn.w	r3, #3
 80060dc:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80060de:	e038      	b.n	8006152 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 80060e0:	2300      	movs	r3, #0
 80060e2:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80060e4:	f107 0310 	add.w	r3, r7, #16
 80060e8:	461a      	mov	r2, r3
 80060ea:	68b9      	ldr	r1, [r7, #8]
 80060ec:	6a38      	ldr	r0, [r7, #32]
 80060ee:	f000 ff39 	bl	8006f64 <xQueueReceiveFromISR>
 80060f2:	4603      	mov	r3, r0
 80060f4:	2b01      	cmp	r3, #1
 80060f6:	d003      	beq.n	8006100 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 80060f8:	f06f 0302 	mvn.w	r3, #2
 80060fc:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80060fe:	e028      	b.n	8006152 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8006100:	693b      	ldr	r3, [r7, #16]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d025      	beq.n	8006152 <osMessageQueueGet+0xce>
 8006106:	4b17      	ldr	r3, [pc, #92]	@ (8006164 <osMessageQueueGet+0xe0>)
 8006108:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800610c:	601a      	str	r2, [r3, #0]
 800610e:	f3bf 8f4f 	dsb	sy
 8006112:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006116:	e01c      	b.n	8006152 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006118:	6a3b      	ldr	r3, [r7, #32]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d002      	beq.n	8006124 <osMessageQueueGet+0xa0>
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d103      	bne.n	800612c <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8006124:	f06f 0303 	mvn.w	r3, #3
 8006128:	627b      	str	r3, [r7, #36]	@ 0x24
 800612a:	e013      	b.n	8006154 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800612c:	683a      	ldr	r2, [r7, #0]
 800612e:	68b9      	ldr	r1, [r7, #8]
 8006130:	6a38      	ldr	r0, [r7, #32]
 8006132:	f000 fd17 	bl	8006b64 <xQueueReceive>
 8006136:	4603      	mov	r3, r0
 8006138:	2b01      	cmp	r3, #1
 800613a:	d00b      	beq.n	8006154 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d003      	beq.n	800614a <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8006142:	f06f 0301 	mvn.w	r3, #1
 8006146:	627b      	str	r3, [r7, #36]	@ 0x24
 8006148:	e004      	b.n	8006154 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800614a:	f06f 0302 	mvn.w	r3, #2
 800614e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006150:	e000      	b.n	8006154 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006152:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8006154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006156:	4618      	mov	r0, r3
 8006158:	3728      	adds	r7, #40	@ 0x28
 800615a:	46bd      	mov	sp, r7
 800615c:	bd80      	pop	{r7, pc}
 800615e:	bf00      	nop
 8006160:	20000a3c 	.word	0x20000a3c
 8006164:	e000ed04 	.word	0xe000ed04

08006168 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006168:	b480      	push	{r7}
 800616a:	b085      	sub	sp, #20
 800616c:	af00      	add	r7, sp, #0
 800616e:	60f8      	str	r0, [r7, #12]
 8006170:	60b9      	str	r1, [r7, #8]
 8006172:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	4a07      	ldr	r2, [pc, #28]	@ (8006194 <vApplicationGetIdleTaskMemory+0x2c>)
 8006178:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	4a06      	ldr	r2, [pc, #24]	@ (8006198 <vApplicationGetIdleTaskMemory+0x30>)
 800617e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2280      	movs	r2, #128	@ 0x80
 8006184:	601a      	str	r2, [r3, #0]
}
 8006186:	bf00      	nop
 8006188:	3714      	adds	r7, #20
 800618a:	46bd      	mov	sp, r7
 800618c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006190:	4770      	bx	lr
 8006192:	bf00      	nop
 8006194:	20000a40 	.word	0x20000a40
 8006198:	20000ae8 	.word	0x20000ae8

0800619c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800619c:	b480      	push	{r7}
 800619e:	b085      	sub	sp, #20
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	60f8      	str	r0, [r7, #12]
 80061a4:	60b9      	str	r1, [r7, #8]
 80061a6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	4a07      	ldr	r2, [pc, #28]	@ (80061c8 <vApplicationGetTimerTaskMemory+0x2c>)
 80061ac:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	4a06      	ldr	r2, [pc, #24]	@ (80061cc <vApplicationGetTimerTaskMemory+0x30>)
 80061b2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80061ba:	601a      	str	r2, [r3, #0]
}
 80061bc:	bf00      	nop
 80061be:	3714      	adds	r7, #20
 80061c0:	46bd      	mov	sp, r7
 80061c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c6:	4770      	bx	lr
 80061c8:	20000ce8 	.word	0x20000ce8
 80061cc:	20000d90 	.word	0x20000d90

080061d0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80061d0:	b480      	push	{r7}
 80061d2:	b083      	sub	sp, #12
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	f103 0208 	add.w	r2, r3, #8
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	f04f 32ff 	mov.w	r2, #4294967295
 80061e8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	f103 0208 	add.w	r2, r3, #8
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	f103 0208 	add.w	r2, r3, #8
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2200      	movs	r2, #0
 8006202:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006204:	bf00      	nop
 8006206:	370c      	adds	r7, #12
 8006208:	46bd      	mov	sp, r7
 800620a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620e:	4770      	bx	lr

08006210 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006210:	b480      	push	{r7}
 8006212:	b083      	sub	sp, #12
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2200      	movs	r2, #0
 800621c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800621e:	bf00      	nop
 8006220:	370c      	adds	r7, #12
 8006222:	46bd      	mov	sp, r7
 8006224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006228:	4770      	bx	lr

0800622a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800622a:	b480      	push	{r7}
 800622c:	b085      	sub	sp, #20
 800622e:	af00      	add	r7, sp, #0
 8006230:	6078      	str	r0, [r7, #4]
 8006232:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	685b      	ldr	r3, [r3, #4]
 8006238:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	68fa      	ldr	r2, [r7, #12]
 800623e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	689a      	ldr	r2, [r3, #8]
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	689b      	ldr	r3, [r3, #8]
 800624c:	683a      	ldr	r2, [r7, #0]
 800624e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	683a      	ldr	r2, [r7, #0]
 8006254:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	687a      	ldr	r2, [r7, #4]
 800625a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	1c5a      	adds	r2, r3, #1
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	601a      	str	r2, [r3, #0]
}
 8006266:	bf00      	nop
 8006268:	3714      	adds	r7, #20
 800626a:	46bd      	mov	sp, r7
 800626c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006270:	4770      	bx	lr

08006272 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006272:	b480      	push	{r7}
 8006274:	b085      	sub	sp, #20
 8006276:	af00      	add	r7, sp, #0
 8006278:	6078      	str	r0, [r7, #4]
 800627a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006288:	d103      	bne.n	8006292 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	691b      	ldr	r3, [r3, #16]
 800628e:	60fb      	str	r3, [r7, #12]
 8006290:	e00c      	b.n	80062ac <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	3308      	adds	r3, #8
 8006296:	60fb      	str	r3, [r7, #12]
 8006298:	e002      	b.n	80062a0 <vListInsert+0x2e>
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	685b      	ldr	r3, [r3, #4]
 800629e:	60fb      	str	r3, [r7, #12]
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	685b      	ldr	r3, [r3, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	68ba      	ldr	r2, [r7, #8]
 80062a8:	429a      	cmp	r2, r3
 80062aa:	d2f6      	bcs.n	800629a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	685a      	ldr	r2, [r3, #4]
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	685b      	ldr	r3, [r3, #4]
 80062b8:	683a      	ldr	r2, [r7, #0]
 80062ba:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	68fa      	ldr	r2, [r7, #12]
 80062c0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	683a      	ldr	r2, [r7, #0]
 80062c6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	687a      	ldr	r2, [r7, #4]
 80062cc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	1c5a      	adds	r2, r3, #1
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	601a      	str	r2, [r3, #0]
}
 80062d8:	bf00      	nop
 80062da:	3714      	adds	r7, #20
 80062dc:	46bd      	mov	sp, r7
 80062de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e2:	4770      	bx	lr

080062e4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80062e4:	b480      	push	{r7}
 80062e6:	b085      	sub	sp, #20
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	691b      	ldr	r3, [r3, #16]
 80062f0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	685b      	ldr	r3, [r3, #4]
 80062f6:	687a      	ldr	r2, [r7, #4]
 80062f8:	6892      	ldr	r2, [r2, #8]
 80062fa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	689b      	ldr	r3, [r3, #8]
 8006300:	687a      	ldr	r2, [r7, #4]
 8006302:	6852      	ldr	r2, [r2, #4]
 8006304:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	687a      	ldr	r2, [r7, #4]
 800630c:	429a      	cmp	r2, r3
 800630e:	d103      	bne.n	8006318 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	689a      	ldr	r2, [r3, #8]
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2200      	movs	r2, #0
 800631c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	1e5a      	subs	r2, r3, #1
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
}
 800632c:	4618      	mov	r0, r3
 800632e:	3714      	adds	r7, #20
 8006330:	46bd      	mov	sp, r7
 8006332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006336:	4770      	bx	lr

08006338 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b084      	sub	sp, #16
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
 8006340:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d10d      	bne.n	8006368 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800634c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006350:	b672      	cpsid	i
 8006352:	f383 8811 	msr	BASEPRI, r3
 8006356:	f3bf 8f6f 	isb	sy
 800635a:	f3bf 8f4f 	dsb	sy
 800635e:	b662      	cpsie	i
 8006360:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006362:	bf00      	nop
 8006364:	bf00      	nop
 8006366:	e7fd      	b.n	8006364 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8006368:	f002 fd30 	bl	8008dcc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681a      	ldr	r2, [r3, #0]
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006374:	68f9      	ldr	r1, [r7, #12]
 8006376:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006378:	fb01 f303 	mul.w	r3, r1, r3
 800637c:	441a      	add	r2, r3
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	2200      	movs	r2, #0
 8006386:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681a      	ldr	r2, [r3, #0]
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681a      	ldr	r2, [r3, #0]
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006398:	3b01      	subs	r3, #1
 800639a:	68f9      	ldr	r1, [r7, #12]
 800639c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800639e:	fb01 f303 	mul.w	r3, r1, r3
 80063a2:	441a      	add	r2, r3
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	22ff      	movs	r2, #255	@ 0xff
 80063ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	22ff      	movs	r2, #255	@ 0xff
 80063b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d114      	bne.n	80063e8 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	691b      	ldr	r3, [r3, #16]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d01a      	beq.n	80063fc <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	3310      	adds	r3, #16
 80063ca:	4618      	mov	r0, r3
 80063cc:	f001 fcd2 	bl	8007d74 <xTaskRemoveFromEventList>
 80063d0:	4603      	mov	r3, r0
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d012      	beq.n	80063fc <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80063d6:	4b0d      	ldr	r3, [pc, #52]	@ (800640c <xQueueGenericReset+0xd4>)
 80063d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80063dc:	601a      	str	r2, [r3, #0]
 80063de:	f3bf 8f4f 	dsb	sy
 80063e2:	f3bf 8f6f 	isb	sy
 80063e6:	e009      	b.n	80063fc <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	3310      	adds	r3, #16
 80063ec:	4618      	mov	r0, r3
 80063ee:	f7ff feef 	bl	80061d0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	3324      	adds	r3, #36	@ 0x24
 80063f6:	4618      	mov	r0, r3
 80063f8:	f7ff feea 	bl	80061d0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80063fc:	f002 fd1c 	bl	8008e38 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006400:	2301      	movs	r3, #1
}
 8006402:	4618      	mov	r0, r3
 8006404:	3710      	adds	r7, #16
 8006406:	46bd      	mov	sp, r7
 8006408:	bd80      	pop	{r7, pc}
 800640a:	bf00      	nop
 800640c:	e000ed04 	.word	0xe000ed04

08006410 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006410:	b580      	push	{r7, lr}
 8006412:	b08e      	sub	sp, #56	@ 0x38
 8006414:	af02      	add	r7, sp, #8
 8006416:	60f8      	str	r0, [r7, #12]
 8006418:	60b9      	str	r1, [r7, #8]
 800641a:	607a      	str	r2, [r7, #4]
 800641c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d10d      	bne.n	8006440 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 8006424:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006428:	b672      	cpsid	i
 800642a:	f383 8811 	msr	BASEPRI, r3
 800642e:	f3bf 8f6f 	isb	sy
 8006432:	f3bf 8f4f 	dsb	sy
 8006436:	b662      	cpsie	i
 8006438:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800643a:	bf00      	nop
 800643c:	bf00      	nop
 800643e:	e7fd      	b.n	800643c <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d10d      	bne.n	8006462 <xQueueGenericCreateStatic+0x52>
	__asm volatile
 8006446:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800644a:	b672      	cpsid	i
 800644c:	f383 8811 	msr	BASEPRI, r3
 8006450:	f3bf 8f6f 	isb	sy
 8006454:	f3bf 8f4f 	dsb	sy
 8006458:	b662      	cpsie	i
 800645a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800645c:	bf00      	nop
 800645e:	bf00      	nop
 8006460:	e7fd      	b.n	800645e <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d002      	beq.n	800646e <xQueueGenericCreateStatic+0x5e>
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d001      	beq.n	8006472 <xQueueGenericCreateStatic+0x62>
 800646e:	2301      	movs	r3, #1
 8006470:	e000      	b.n	8006474 <xQueueGenericCreateStatic+0x64>
 8006472:	2300      	movs	r3, #0
 8006474:	2b00      	cmp	r3, #0
 8006476:	d10d      	bne.n	8006494 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 8006478:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800647c:	b672      	cpsid	i
 800647e:	f383 8811 	msr	BASEPRI, r3
 8006482:	f3bf 8f6f 	isb	sy
 8006486:	f3bf 8f4f 	dsb	sy
 800648a:	b662      	cpsie	i
 800648c:	623b      	str	r3, [r7, #32]
}
 800648e:	bf00      	nop
 8006490:	bf00      	nop
 8006492:	e7fd      	b.n	8006490 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d102      	bne.n	80064a0 <xQueueGenericCreateStatic+0x90>
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d101      	bne.n	80064a4 <xQueueGenericCreateStatic+0x94>
 80064a0:	2301      	movs	r3, #1
 80064a2:	e000      	b.n	80064a6 <xQueueGenericCreateStatic+0x96>
 80064a4:	2300      	movs	r3, #0
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d10d      	bne.n	80064c6 <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 80064aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064ae:	b672      	cpsid	i
 80064b0:	f383 8811 	msr	BASEPRI, r3
 80064b4:	f3bf 8f6f 	isb	sy
 80064b8:	f3bf 8f4f 	dsb	sy
 80064bc:	b662      	cpsie	i
 80064be:	61fb      	str	r3, [r7, #28]
}
 80064c0:	bf00      	nop
 80064c2:	bf00      	nop
 80064c4:	e7fd      	b.n	80064c2 <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80064c6:	2350      	movs	r3, #80	@ 0x50
 80064c8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80064ca:	697b      	ldr	r3, [r7, #20]
 80064cc:	2b50      	cmp	r3, #80	@ 0x50
 80064ce:	d00d      	beq.n	80064ec <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 80064d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064d4:	b672      	cpsid	i
 80064d6:	f383 8811 	msr	BASEPRI, r3
 80064da:	f3bf 8f6f 	isb	sy
 80064de:	f3bf 8f4f 	dsb	sy
 80064e2:	b662      	cpsie	i
 80064e4:	61bb      	str	r3, [r7, #24]
}
 80064e6:	bf00      	nop
 80064e8:	bf00      	nop
 80064ea:	e7fd      	b.n	80064e8 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80064ec:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80064f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d00d      	beq.n	8006514 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80064f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064fa:	2201      	movs	r2, #1
 80064fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006500:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006504:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006506:	9300      	str	r3, [sp, #0]
 8006508:	4613      	mov	r3, r2
 800650a:	687a      	ldr	r2, [r7, #4]
 800650c:	68b9      	ldr	r1, [r7, #8]
 800650e:	68f8      	ldr	r0, [r7, #12]
 8006510:	f000 f848 	bl	80065a4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006514:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8006516:	4618      	mov	r0, r3
 8006518:	3730      	adds	r7, #48	@ 0x30
 800651a:	46bd      	mov	sp, r7
 800651c:	bd80      	pop	{r7, pc}

0800651e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800651e:	b580      	push	{r7, lr}
 8006520:	b08a      	sub	sp, #40	@ 0x28
 8006522:	af02      	add	r7, sp, #8
 8006524:	60f8      	str	r0, [r7, #12]
 8006526:	60b9      	str	r1, [r7, #8]
 8006528:	4613      	mov	r3, r2
 800652a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d10d      	bne.n	800654e <xQueueGenericCreate+0x30>
	__asm volatile
 8006532:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006536:	b672      	cpsid	i
 8006538:	f383 8811 	msr	BASEPRI, r3
 800653c:	f3bf 8f6f 	isb	sy
 8006540:	f3bf 8f4f 	dsb	sy
 8006544:	b662      	cpsie	i
 8006546:	613b      	str	r3, [r7, #16]
}
 8006548:	bf00      	nop
 800654a:	bf00      	nop
 800654c:	e7fd      	b.n	800654a <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d102      	bne.n	800655a <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8006554:	2300      	movs	r3, #0
 8006556:	61fb      	str	r3, [r7, #28]
 8006558:	e004      	b.n	8006564 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	68ba      	ldr	r2, [r7, #8]
 800655e:	fb02 f303 	mul.w	r3, r2, r3
 8006562:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006564:	69fb      	ldr	r3, [r7, #28]
 8006566:	3350      	adds	r3, #80	@ 0x50
 8006568:	4618      	mov	r0, r3
 800656a:	f002 fd5d 	bl	8009028 <pvPortMalloc>
 800656e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006570:	69bb      	ldr	r3, [r7, #24]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d011      	beq.n	800659a <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006576:	69bb      	ldr	r3, [r7, #24]
 8006578:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	3350      	adds	r3, #80	@ 0x50
 800657e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006580:	69bb      	ldr	r3, [r7, #24]
 8006582:	2200      	movs	r2, #0
 8006584:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006588:	79fa      	ldrb	r2, [r7, #7]
 800658a:	69bb      	ldr	r3, [r7, #24]
 800658c:	9300      	str	r3, [sp, #0]
 800658e:	4613      	mov	r3, r2
 8006590:	697a      	ldr	r2, [r7, #20]
 8006592:	68b9      	ldr	r1, [r7, #8]
 8006594:	68f8      	ldr	r0, [r7, #12]
 8006596:	f000 f805 	bl	80065a4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800659a:	69bb      	ldr	r3, [r7, #24]
	}
 800659c:	4618      	mov	r0, r3
 800659e:	3720      	adds	r7, #32
 80065a0:	46bd      	mov	sp, r7
 80065a2:	bd80      	pop	{r7, pc}

080065a4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b084      	sub	sp, #16
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	60f8      	str	r0, [r7, #12]
 80065ac:	60b9      	str	r1, [r7, #8]
 80065ae:	607a      	str	r2, [r7, #4]
 80065b0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d103      	bne.n	80065c0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80065b8:	69bb      	ldr	r3, [r7, #24]
 80065ba:	69ba      	ldr	r2, [r7, #24]
 80065bc:	601a      	str	r2, [r3, #0]
 80065be:	e002      	b.n	80065c6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80065c0:	69bb      	ldr	r3, [r7, #24]
 80065c2:	687a      	ldr	r2, [r7, #4]
 80065c4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80065c6:	69bb      	ldr	r3, [r7, #24]
 80065c8:	68fa      	ldr	r2, [r7, #12]
 80065ca:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80065cc:	69bb      	ldr	r3, [r7, #24]
 80065ce:	68ba      	ldr	r2, [r7, #8]
 80065d0:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80065d2:	2101      	movs	r1, #1
 80065d4:	69b8      	ldr	r0, [r7, #24]
 80065d6:	f7ff feaf 	bl	8006338 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80065da:	69bb      	ldr	r3, [r7, #24]
 80065dc:	78fa      	ldrb	r2, [r7, #3]
 80065de:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80065e2:	bf00      	nop
 80065e4:	3710      	adds	r7, #16
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd80      	pop	{r7, pc}

080065ea <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80065ea:	b580      	push	{r7, lr}
 80065ec:	b08a      	sub	sp, #40	@ 0x28
 80065ee:	af02      	add	r7, sp, #8
 80065f0:	60f8      	str	r0, [r7, #12]
 80065f2:	60b9      	str	r1, [r7, #8]
 80065f4:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d10d      	bne.n	8006618 <xQueueCreateCountingSemaphoreStatic+0x2e>
	__asm volatile
 80065fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006600:	b672      	cpsid	i
 8006602:	f383 8811 	msr	BASEPRI, r3
 8006606:	f3bf 8f6f 	isb	sy
 800660a:	f3bf 8f4f 	dsb	sy
 800660e:	b662      	cpsie	i
 8006610:	61bb      	str	r3, [r7, #24]
}
 8006612:	bf00      	nop
 8006614:	bf00      	nop
 8006616:	e7fd      	b.n	8006614 <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006618:	68ba      	ldr	r2, [r7, #8]
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	429a      	cmp	r2, r3
 800661e:	d90d      	bls.n	800663c <xQueueCreateCountingSemaphoreStatic+0x52>
	__asm volatile
 8006620:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006624:	b672      	cpsid	i
 8006626:	f383 8811 	msr	BASEPRI, r3
 800662a:	f3bf 8f6f 	isb	sy
 800662e:	f3bf 8f4f 	dsb	sy
 8006632:	b662      	cpsie	i
 8006634:	617b      	str	r3, [r7, #20]
}
 8006636:	bf00      	nop
 8006638:	bf00      	nop
 800663a:	e7fd      	b.n	8006638 <xQueueCreateCountingSemaphoreStatic+0x4e>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800663c:	2302      	movs	r3, #2
 800663e:	9300      	str	r3, [sp, #0]
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2200      	movs	r2, #0
 8006644:	2100      	movs	r1, #0
 8006646:	68f8      	ldr	r0, [r7, #12]
 8006648:	f7ff fee2 	bl	8006410 <xQueueGenericCreateStatic>
 800664c:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800664e:	69fb      	ldr	r3, [r7, #28]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d002      	beq.n	800665a <xQueueCreateCountingSemaphoreStatic+0x70>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006654:	69fb      	ldr	r3, [r7, #28]
 8006656:	68ba      	ldr	r2, [r7, #8]
 8006658:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800665a:	69fb      	ldr	r3, [r7, #28]
	}
 800665c:	4618      	mov	r0, r3
 800665e:	3720      	adds	r7, #32
 8006660:	46bd      	mov	sp, r7
 8006662:	bd80      	pop	{r7, pc}

08006664 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8006664:	b580      	push	{r7, lr}
 8006666:	b086      	sub	sp, #24
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
 800666c:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d10d      	bne.n	8006690 <xQueueCreateCountingSemaphore+0x2c>
	__asm volatile
 8006674:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006678:	b672      	cpsid	i
 800667a:	f383 8811 	msr	BASEPRI, r3
 800667e:	f3bf 8f6f 	isb	sy
 8006682:	f3bf 8f4f 	dsb	sy
 8006686:	b662      	cpsie	i
 8006688:	613b      	str	r3, [r7, #16]
}
 800668a:	bf00      	nop
 800668c:	bf00      	nop
 800668e:	e7fd      	b.n	800668c <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006690:	683a      	ldr	r2, [r7, #0]
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	429a      	cmp	r2, r3
 8006696:	d90d      	bls.n	80066b4 <xQueueCreateCountingSemaphore+0x50>
	__asm volatile
 8006698:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800669c:	b672      	cpsid	i
 800669e:	f383 8811 	msr	BASEPRI, r3
 80066a2:	f3bf 8f6f 	isb	sy
 80066a6:	f3bf 8f4f 	dsb	sy
 80066aa:	b662      	cpsie	i
 80066ac:	60fb      	str	r3, [r7, #12]
}
 80066ae:	bf00      	nop
 80066b0:	bf00      	nop
 80066b2:	e7fd      	b.n	80066b0 <xQueueCreateCountingSemaphore+0x4c>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80066b4:	2202      	movs	r2, #2
 80066b6:	2100      	movs	r1, #0
 80066b8:	6878      	ldr	r0, [r7, #4]
 80066ba:	f7ff ff30 	bl	800651e <xQueueGenericCreate>
 80066be:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80066c0:	697b      	ldr	r3, [r7, #20]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d002      	beq.n	80066cc <xQueueCreateCountingSemaphore+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80066c6:	697b      	ldr	r3, [r7, #20]
 80066c8:	683a      	ldr	r2, [r7, #0]
 80066ca:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80066cc:	697b      	ldr	r3, [r7, #20]
	}
 80066ce:	4618      	mov	r0, r3
 80066d0:	3718      	adds	r7, #24
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bd80      	pop	{r7, pc}
	...

080066d8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b08e      	sub	sp, #56	@ 0x38
 80066dc:	af00      	add	r7, sp, #0
 80066de:	60f8      	str	r0, [r7, #12]
 80066e0:	60b9      	str	r1, [r7, #8]
 80066e2:	607a      	str	r2, [r7, #4]
 80066e4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80066e6:	2300      	movs	r3, #0
 80066e8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80066ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d10d      	bne.n	8006710 <xQueueGenericSend+0x38>
	__asm volatile
 80066f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066f8:	b672      	cpsid	i
 80066fa:	f383 8811 	msr	BASEPRI, r3
 80066fe:	f3bf 8f6f 	isb	sy
 8006702:	f3bf 8f4f 	dsb	sy
 8006706:	b662      	cpsie	i
 8006708:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800670a:	bf00      	nop
 800670c:	bf00      	nop
 800670e:	e7fd      	b.n	800670c <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d103      	bne.n	800671e <xQueueGenericSend+0x46>
 8006716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006718:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800671a:	2b00      	cmp	r3, #0
 800671c:	d101      	bne.n	8006722 <xQueueGenericSend+0x4a>
 800671e:	2301      	movs	r3, #1
 8006720:	e000      	b.n	8006724 <xQueueGenericSend+0x4c>
 8006722:	2300      	movs	r3, #0
 8006724:	2b00      	cmp	r3, #0
 8006726:	d10d      	bne.n	8006744 <xQueueGenericSend+0x6c>
	__asm volatile
 8006728:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800672c:	b672      	cpsid	i
 800672e:	f383 8811 	msr	BASEPRI, r3
 8006732:	f3bf 8f6f 	isb	sy
 8006736:	f3bf 8f4f 	dsb	sy
 800673a:	b662      	cpsie	i
 800673c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800673e:	bf00      	nop
 8006740:	bf00      	nop
 8006742:	e7fd      	b.n	8006740 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	2b02      	cmp	r3, #2
 8006748:	d103      	bne.n	8006752 <xQueueGenericSend+0x7a>
 800674a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800674c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800674e:	2b01      	cmp	r3, #1
 8006750:	d101      	bne.n	8006756 <xQueueGenericSend+0x7e>
 8006752:	2301      	movs	r3, #1
 8006754:	e000      	b.n	8006758 <xQueueGenericSend+0x80>
 8006756:	2300      	movs	r3, #0
 8006758:	2b00      	cmp	r3, #0
 800675a:	d10d      	bne.n	8006778 <xQueueGenericSend+0xa0>
	__asm volatile
 800675c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006760:	b672      	cpsid	i
 8006762:	f383 8811 	msr	BASEPRI, r3
 8006766:	f3bf 8f6f 	isb	sy
 800676a:	f3bf 8f4f 	dsb	sy
 800676e:	b662      	cpsie	i
 8006770:	623b      	str	r3, [r7, #32]
}
 8006772:	bf00      	nop
 8006774:	bf00      	nop
 8006776:	e7fd      	b.n	8006774 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006778:	f001 fcca 	bl	8008110 <xTaskGetSchedulerState>
 800677c:	4603      	mov	r3, r0
 800677e:	2b00      	cmp	r3, #0
 8006780:	d102      	bne.n	8006788 <xQueueGenericSend+0xb0>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d101      	bne.n	800678c <xQueueGenericSend+0xb4>
 8006788:	2301      	movs	r3, #1
 800678a:	e000      	b.n	800678e <xQueueGenericSend+0xb6>
 800678c:	2300      	movs	r3, #0
 800678e:	2b00      	cmp	r3, #0
 8006790:	d10d      	bne.n	80067ae <xQueueGenericSend+0xd6>
	__asm volatile
 8006792:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006796:	b672      	cpsid	i
 8006798:	f383 8811 	msr	BASEPRI, r3
 800679c:	f3bf 8f6f 	isb	sy
 80067a0:	f3bf 8f4f 	dsb	sy
 80067a4:	b662      	cpsie	i
 80067a6:	61fb      	str	r3, [r7, #28]
}
 80067a8:	bf00      	nop
 80067aa:	bf00      	nop
 80067ac:	e7fd      	b.n	80067aa <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80067ae:	f002 fb0d 	bl	8008dcc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80067b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80067b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067ba:	429a      	cmp	r2, r3
 80067bc:	d302      	bcc.n	80067c4 <xQueueGenericSend+0xec>
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	2b02      	cmp	r3, #2
 80067c2:	d129      	bne.n	8006818 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80067c4:	683a      	ldr	r2, [r7, #0]
 80067c6:	68b9      	ldr	r1, [r7, #8]
 80067c8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80067ca:	f000 fc91 	bl	80070f0 <prvCopyDataToQueue>
 80067ce:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80067d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d010      	beq.n	80067fa <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80067d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067da:	3324      	adds	r3, #36	@ 0x24
 80067dc:	4618      	mov	r0, r3
 80067de:	f001 fac9 	bl	8007d74 <xTaskRemoveFromEventList>
 80067e2:	4603      	mov	r3, r0
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d013      	beq.n	8006810 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80067e8:	4b3f      	ldr	r3, [pc, #252]	@ (80068e8 <xQueueGenericSend+0x210>)
 80067ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80067ee:	601a      	str	r2, [r3, #0]
 80067f0:	f3bf 8f4f 	dsb	sy
 80067f4:	f3bf 8f6f 	isb	sy
 80067f8:	e00a      	b.n	8006810 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80067fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d007      	beq.n	8006810 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006800:	4b39      	ldr	r3, [pc, #228]	@ (80068e8 <xQueueGenericSend+0x210>)
 8006802:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006806:	601a      	str	r2, [r3, #0]
 8006808:	f3bf 8f4f 	dsb	sy
 800680c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006810:	f002 fb12 	bl	8008e38 <vPortExitCritical>
				return pdPASS;
 8006814:	2301      	movs	r3, #1
 8006816:	e063      	b.n	80068e0 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d103      	bne.n	8006826 <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800681e:	f002 fb0b 	bl	8008e38 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006822:	2300      	movs	r3, #0
 8006824:	e05c      	b.n	80068e0 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006826:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006828:	2b00      	cmp	r3, #0
 800682a:	d106      	bne.n	800683a <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800682c:	f107 0314 	add.w	r3, r7, #20
 8006830:	4618      	mov	r0, r3
 8006832:	f001 fb05 	bl	8007e40 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006836:	2301      	movs	r3, #1
 8006838:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800683a:	f002 fafd 	bl	8008e38 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800683e:	f001 f861 	bl	8007904 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006842:	f002 fac3 	bl	8008dcc <vPortEnterCritical>
 8006846:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006848:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800684c:	b25b      	sxtb	r3, r3
 800684e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006852:	d103      	bne.n	800685c <xQueueGenericSend+0x184>
 8006854:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006856:	2200      	movs	r2, #0
 8006858:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800685c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800685e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006862:	b25b      	sxtb	r3, r3
 8006864:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006868:	d103      	bne.n	8006872 <xQueueGenericSend+0x19a>
 800686a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800686c:	2200      	movs	r2, #0
 800686e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006872:	f002 fae1 	bl	8008e38 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006876:	1d3a      	adds	r2, r7, #4
 8006878:	f107 0314 	add.w	r3, r7, #20
 800687c:	4611      	mov	r1, r2
 800687e:	4618      	mov	r0, r3
 8006880:	f001 faf4 	bl	8007e6c <xTaskCheckForTimeOut>
 8006884:	4603      	mov	r3, r0
 8006886:	2b00      	cmp	r3, #0
 8006888:	d124      	bne.n	80068d4 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800688a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800688c:	f000 fd28 	bl	80072e0 <prvIsQueueFull>
 8006890:	4603      	mov	r3, r0
 8006892:	2b00      	cmp	r3, #0
 8006894:	d018      	beq.n	80068c8 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006896:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006898:	3310      	adds	r3, #16
 800689a:	687a      	ldr	r2, [r7, #4]
 800689c:	4611      	mov	r1, r2
 800689e:	4618      	mov	r0, r3
 80068a0:	f001 fa12 	bl	8007cc8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80068a4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80068a6:	f000 fcb3 	bl	8007210 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80068aa:	f001 f839 	bl	8007920 <xTaskResumeAll>
 80068ae:	4603      	mov	r3, r0
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	f47f af7c 	bne.w	80067ae <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 80068b6:	4b0c      	ldr	r3, [pc, #48]	@ (80068e8 <xQueueGenericSend+0x210>)
 80068b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80068bc:	601a      	str	r2, [r3, #0]
 80068be:	f3bf 8f4f 	dsb	sy
 80068c2:	f3bf 8f6f 	isb	sy
 80068c6:	e772      	b.n	80067ae <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80068c8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80068ca:	f000 fca1 	bl	8007210 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80068ce:	f001 f827 	bl	8007920 <xTaskResumeAll>
 80068d2:	e76c      	b.n	80067ae <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80068d4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80068d6:	f000 fc9b 	bl	8007210 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80068da:	f001 f821 	bl	8007920 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80068de:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80068e0:	4618      	mov	r0, r3
 80068e2:	3738      	adds	r7, #56	@ 0x38
 80068e4:	46bd      	mov	sp, r7
 80068e6:	bd80      	pop	{r7, pc}
 80068e8:	e000ed04 	.word	0xe000ed04

080068ec <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b08e      	sub	sp, #56	@ 0x38
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	60f8      	str	r0, [r7, #12]
 80068f4:	60b9      	str	r1, [r7, #8]
 80068f6:	607a      	str	r2, [r7, #4]
 80068f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80068fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006900:	2b00      	cmp	r3, #0
 8006902:	d10d      	bne.n	8006920 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 8006904:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006908:	b672      	cpsid	i
 800690a:	f383 8811 	msr	BASEPRI, r3
 800690e:	f3bf 8f6f 	isb	sy
 8006912:	f3bf 8f4f 	dsb	sy
 8006916:	b662      	cpsie	i
 8006918:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800691a:	bf00      	nop
 800691c:	bf00      	nop
 800691e:	e7fd      	b.n	800691c <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d103      	bne.n	800692e <xQueueGenericSendFromISR+0x42>
 8006926:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800692a:	2b00      	cmp	r3, #0
 800692c:	d101      	bne.n	8006932 <xQueueGenericSendFromISR+0x46>
 800692e:	2301      	movs	r3, #1
 8006930:	e000      	b.n	8006934 <xQueueGenericSendFromISR+0x48>
 8006932:	2300      	movs	r3, #0
 8006934:	2b00      	cmp	r3, #0
 8006936:	d10d      	bne.n	8006954 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 8006938:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800693c:	b672      	cpsid	i
 800693e:	f383 8811 	msr	BASEPRI, r3
 8006942:	f3bf 8f6f 	isb	sy
 8006946:	f3bf 8f4f 	dsb	sy
 800694a:	b662      	cpsie	i
 800694c:	623b      	str	r3, [r7, #32]
}
 800694e:	bf00      	nop
 8006950:	bf00      	nop
 8006952:	e7fd      	b.n	8006950 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	2b02      	cmp	r3, #2
 8006958:	d103      	bne.n	8006962 <xQueueGenericSendFromISR+0x76>
 800695a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800695c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800695e:	2b01      	cmp	r3, #1
 8006960:	d101      	bne.n	8006966 <xQueueGenericSendFromISR+0x7a>
 8006962:	2301      	movs	r3, #1
 8006964:	e000      	b.n	8006968 <xQueueGenericSendFromISR+0x7c>
 8006966:	2300      	movs	r3, #0
 8006968:	2b00      	cmp	r3, #0
 800696a:	d10d      	bne.n	8006988 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 800696c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006970:	b672      	cpsid	i
 8006972:	f383 8811 	msr	BASEPRI, r3
 8006976:	f3bf 8f6f 	isb	sy
 800697a:	f3bf 8f4f 	dsb	sy
 800697e:	b662      	cpsie	i
 8006980:	61fb      	str	r3, [r7, #28]
}
 8006982:	bf00      	nop
 8006984:	bf00      	nop
 8006986:	e7fd      	b.n	8006984 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006988:	f002 fb08 	bl	8008f9c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800698c:	f3ef 8211 	mrs	r2, BASEPRI
 8006990:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006994:	b672      	cpsid	i
 8006996:	f383 8811 	msr	BASEPRI, r3
 800699a:	f3bf 8f6f 	isb	sy
 800699e:	f3bf 8f4f 	dsb	sy
 80069a2:	b662      	cpsie	i
 80069a4:	61ba      	str	r2, [r7, #24]
 80069a6:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80069a8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80069aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80069ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069ae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80069b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069b4:	429a      	cmp	r2, r3
 80069b6:	d302      	bcc.n	80069be <xQueueGenericSendFromISR+0xd2>
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	2b02      	cmp	r3, #2
 80069bc:	d12c      	bne.n	8006a18 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80069be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069c0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80069c4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80069c8:	683a      	ldr	r2, [r7, #0]
 80069ca:	68b9      	ldr	r1, [r7, #8]
 80069cc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80069ce:	f000 fb8f 	bl	80070f0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80069d2:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 80069d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069da:	d112      	bne.n	8006a02 <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80069dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d016      	beq.n	8006a12 <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80069e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069e6:	3324      	adds	r3, #36	@ 0x24
 80069e8:	4618      	mov	r0, r3
 80069ea:	f001 f9c3 	bl	8007d74 <xTaskRemoveFromEventList>
 80069ee:	4603      	mov	r3, r0
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d00e      	beq.n	8006a12 <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d00b      	beq.n	8006a12 <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2201      	movs	r2, #1
 80069fe:	601a      	str	r2, [r3, #0]
 8006a00:	e007      	b.n	8006a12 <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006a02:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006a06:	3301      	adds	r3, #1
 8006a08:	b2db      	uxtb	r3, r3
 8006a0a:	b25a      	sxtb	r2, r3
 8006a0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a0e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006a12:	2301      	movs	r3, #1
 8006a14:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8006a16:	e001      	b.n	8006a1c <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006a18:	2300      	movs	r3, #0
 8006a1a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a1e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006a20:	693b      	ldr	r3, [r7, #16]
 8006a22:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006a26:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006a28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	3738      	adds	r7, #56	@ 0x38
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bd80      	pop	{r7, pc}

08006a32 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006a32:	b580      	push	{r7, lr}
 8006a34:	b08e      	sub	sp, #56	@ 0x38
 8006a36:	af00      	add	r7, sp, #0
 8006a38:	6078      	str	r0, [r7, #4]
 8006a3a:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8006a40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d10d      	bne.n	8006a62 <xQueueGiveFromISR+0x30>
	__asm volatile
 8006a46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a4a:	b672      	cpsid	i
 8006a4c:	f383 8811 	msr	BASEPRI, r3
 8006a50:	f3bf 8f6f 	isb	sy
 8006a54:	f3bf 8f4f 	dsb	sy
 8006a58:	b662      	cpsie	i
 8006a5a:	623b      	str	r3, [r7, #32]
}
 8006a5c:	bf00      	nop
 8006a5e:	bf00      	nop
 8006a60:	e7fd      	b.n	8006a5e <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006a62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d00d      	beq.n	8006a86 <xQueueGiveFromISR+0x54>
	__asm volatile
 8006a6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a6e:	b672      	cpsid	i
 8006a70:	f383 8811 	msr	BASEPRI, r3
 8006a74:	f3bf 8f6f 	isb	sy
 8006a78:	f3bf 8f4f 	dsb	sy
 8006a7c:	b662      	cpsie	i
 8006a7e:	61fb      	str	r3, [r7, #28]
}
 8006a80:	bf00      	nop
 8006a82:	bf00      	nop
 8006a84:	e7fd      	b.n	8006a82 <xQueueGiveFromISR+0x50>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8006a86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d103      	bne.n	8006a96 <xQueueGiveFromISR+0x64>
 8006a8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a90:	689b      	ldr	r3, [r3, #8]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d101      	bne.n	8006a9a <xQueueGiveFromISR+0x68>
 8006a96:	2301      	movs	r3, #1
 8006a98:	e000      	b.n	8006a9c <xQueueGiveFromISR+0x6a>
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d10d      	bne.n	8006abc <xQueueGiveFromISR+0x8a>
	__asm volatile
 8006aa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006aa4:	b672      	cpsid	i
 8006aa6:	f383 8811 	msr	BASEPRI, r3
 8006aaa:	f3bf 8f6f 	isb	sy
 8006aae:	f3bf 8f4f 	dsb	sy
 8006ab2:	b662      	cpsie	i
 8006ab4:	61bb      	str	r3, [r7, #24]
}
 8006ab6:	bf00      	nop
 8006ab8:	bf00      	nop
 8006aba:	e7fd      	b.n	8006ab8 <xQueueGiveFromISR+0x86>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006abc:	f002 fa6e 	bl	8008f9c <vPortValidateInterruptPriority>
	__asm volatile
 8006ac0:	f3ef 8211 	mrs	r2, BASEPRI
 8006ac4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ac8:	b672      	cpsid	i
 8006aca:	f383 8811 	msr	BASEPRI, r3
 8006ace:	f3bf 8f6f 	isb	sy
 8006ad2:	f3bf 8f4f 	dsb	sy
 8006ad6:	b662      	cpsie	i
 8006ad8:	617a      	str	r2, [r7, #20]
 8006ada:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8006adc:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006ade:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006ae0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ae2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ae4:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006ae6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ae8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006aea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006aec:	429a      	cmp	r2, r3
 8006aee:	d22b      	bcs.n	8006b48 <xQueueGiveFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006af0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006af2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006af6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006afa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006afc:	1c5a      	adds	r2, r3, #1
 8006afe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b00:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006b02:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006b06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b0a:	d112      	bne.n	8006b32 <xQueueGiveFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006b0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d016      	beq.n	8006b42 <xQueueGiveFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006b14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b16:	3324      	adds	r3, #36	@ 0x24
 8006b18:	4618      	mov	r0, r3
 8006b1a:	f001 f92b 	bl	8007d74 <xTaskRemoveFromEventList>
 8006b1e:	4603      	mov	r3, r0
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d00e      	beq.n	8006b42 <xQueueGiveFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d00b      	beq.n	8006b42 <xQueueGiveFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	2201      	movs	r2, #1
 8006b2e:	601a      	str	r2, [r3, #0]
 8006b30:	e007      	b.n	8006b42 <xQueueGiveFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006b32:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006b36:	3301      	adds	r3, #1
 8006b38:	b2db      	uxtb	r3, r3
 8006b3a:	b25a      	sxtb	r2, r3
 8006b3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b3e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006b42:	2301      	movs	r3, #1
 8006b44:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b46:	e001      	b.n	8006b4c <xQueueGiveFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006b48:	2300      	movs	r3, #0
 8006b4a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b4e:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	f383 8811 	msr	BASEPRI, r3
}
 8006b56:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006b58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	3738      	adds	r7, #56	@ 0x38
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bd80      	pop	{r7, pc}
	...

08006b64 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b08c      	sub	sp, #48	@ 0x30
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	60f8      	str	r0, [r7, #12]
 8006b6c:	60b9      	str	r1, [r7, #8]
 8006b6e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006b70:	2300      	movs	r3, #0
 8006b72:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006b78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d10d      	bne.n	8006b9a <xQueueReceive+0x36>
	__asm volatile
 8006b7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b82:	b672      	cpsid	i
 8006b84:	f383 8811 	msr	BASEPRI, r3
 8006b88:	f3bf 8f6f 	isb	sy
 8006b8c:	f3bf 8f4f 	dsb	sy
 8006b90:	b662      	cpsie	i
 8006b92:	623b      	str	r3, [r7, #32]
}
 8006b94:	bf00      	nop
 8006b96:	bf00      	nop
 8006b98:	e7fd      	b.n	8006b96 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006b9a:	68bb      	ldr	r3, [r7, #8]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d103      	bne.n	8006ba8 <xQueueReceive+0x44>
 8006ba0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ba2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d101      	bne.n	8006bac <xQueueReceive+0x48>
 8006ba8:	2301      	movs	r3, #1
 8006baa:	e000      	b.n	8006bae <xQueueReceive+0x4a>
 8006bac:	2300      	movs	r3, #0
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d10d      	bne.n	8006bce <xQueueReceive+0x6a>
	__asm volatile
 8006bb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bb6:	b672      	cpsid	i
 8006bb8:	f383 8811 	msr	BASEPRI, r3
 8006bbc:	f3bf 8f6f 	isb	sy
 8006bc0:	f3bf 8f4f 	dsb	sy
 8006bc4:	b662      	cpsie	i
 8006bc6:	61fb      	str	r3, [r7, #28]
}
 8006bc8:	bf00      	nop
 8006bca:	bf00      	nop
 8006bcc:	e7fd      	b.n	8006bca <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006bce:	f001 fa9f 	bl	8008110 <xTaskGetSchedulerState>
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d102      	bne.n	8006bde <xQueueReceive+0x7a>
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d101      	bne.n	8006be2 <xQueueReceive+0x7e>
 8006bde:	2301      	movs	r3, #1
 8006be0:	e000      	b.n	8006be4 <xQueueReceive+0x80>
 8006be2:	2300      	movs	r3, #0
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d10d      	bne.n	8006c04 <xQueueReceive+0xa0>
	__asm volatile
 8006be8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bec:	b672      	cpsid	i
 8006bee:	f383 8811 	msr	BASEPRI, r3
 8006bf2:	f3bf 8f6f 	isb	sy
 8006bf6:	f3bf 8f4f 	dsb	sy
 8006bfa:	b662      	cpsie	i
 8006bfc:	61bb      	str	r3, [r7, #24]
}
 8006bfe:	bf00      	nop
 8006c00:	bf00      	nop
 8006c02:	e7fd      	b.n	8006c00 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006c04:	f002 f8e2 	bl	8008dcc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006c08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c0c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d01f      	beq.n	8006c54 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006c14:	68b9      	ldr	r1, [r7, #8]
 8006c16:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006c18:	f000 fad4 	bl	80071c4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006c1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c1e:	1e5a      	subs	r2, r3, #1
 8006c20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c22:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006c24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c26:	691b      	ldr	r3, [r3, #16]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d00f      	beq.n	8006c4c <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006c2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c2e:	3310      	adds	r3, #16
 8006c30:	4618      	mov	r0, r3
 8006c32:	f001 f89f 	bl	8007d74 <xTaskRemoveFromEventList>
 8006c36:	4603      	mov	r3, r0
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d007      	beq.n	8006c4c <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006c3c:	4b3c      	ldr	r3, [pc, #240]	@ (8006d30 <xQueueReceive+0x1cc>)
 8006c3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c42:	601a      	str	r2, [r3, #0]
 8006c44:	f3bf 8f4f 	dsb	sy
 8006c48:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006c4c:	f002 f8f4 	bl	8008e38 <vPortExitCritical>
				return pdPASS;
 8006c50:	2301      	movs	r3, #1
 8006c52:	e069      	b.n	8006d28 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d103      	bne.n	8006c62 <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006c5a:	f002 f8ed 	bl	8008e38 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006c5e:	2300      	movs	r3, #0
 8006c60:	e062      	b.n	8006d28 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006c62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d106      	bne.n	8006c76 <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006c68:	f107 0310 	add.w	r3, r7, #16
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	f001 f8e7 	bl	8007e40 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006c72:	2301      	movs	r3, #1
 8006c74:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006c76:	f002 f8df 	bl	8008e38 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006c7a:	f000 fe43 	bl	8007904 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006c7e:	f002 f8a5 	bl	8008dcc <vPortEnterCritical>
 8006c82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c84:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006c88:	b25b      	sxtb	r3, r3
 8006c8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c8e:	d103      	bne.n	8006c98 <xQueueReceive+0x134>
 8006c90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c92:	2200      	movs	r2, #0
 8006c94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006c98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c9a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006c9e:	b25b      	sxtb	r3, r3
 8006ca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ca4:	d103      	bne.n	8006cae <xQueueReceive+0x14a>
 8006ca6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ca8:	2200      	movs	r2, #0
 8006caa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006cae:	f002 f8c3 	bl	8008e38 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006cb2:	1d3a      	adds	r2, r7, #4
 8006cb4:	f107 0310 	add.w	r3, r7, #16
 8006cb8:	4611      	mov	r1, r2
 8006cba:	4618      	mov	r0, r3
 8006cbc:	f001 f8d6 	bl	8007e6c <xTaskCheckForTimeOut>
 8006cc0:	4603      	mov	r3, r0
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d123      	bne.n	8006d0e <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006cc6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006cc8:	f000 faf4 	bl	80072b4 <prvIsQueueEmpty>
 8006ccc:	4603      	mov	r3, r0
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d017      	beq.n	8006d02 <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006cd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cd4:	3324      	adds	r3, #36	@ 0x24
 8006cd6:	687a      	ldr	r2, [r7, #4]
 8006cd8:	4611      	mov	r1, r2
 8006cda:	4618      	mov	r0, r3
 8006cdc:	f000 fff4 	bl	8007cc8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006ce0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006ce2:	f000 fa95 	bl	8007210 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006ce6:	f000 fe1b 	bl	8007920 <xTaskResumeAll>
 8006cea:	4603      	mov	r3, r0
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d189      	bne.n	8006c04 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 8006cf0:	4b0f      	ldr	r3, [pc, #60]	@ (8006d30 <xQueueReceive+0x1cc>)
 8006cf2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006cf6:	601a      	str	r2, [r3, #0]
 8006cf8:	f3bf 8f4f 	dsb	sy
 8006cfc:	f3bf 8f6f 	isb	sy
 8006d00:	e780      	b.n	8006c04 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006d02:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006d04:	f000 fa84 	bl	8007210 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006d08:	f000 fe0a 	bl	8007920 <xTaskResumeAll>
 8006d0c:	e77a      	b.n	8006c04 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006d0e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006d10:	f000 fa7e 	bl	8007210 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006d14:	f000 fe04 	bl	8007920 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006d18:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006d1a:	f000 facb 	bl	80072b4 <prvIsQueueEmpty>
 8006d1e:	4603      	mov	r3, r0
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	f43f af6f 	beq.w	8006c04 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006d26:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006d28:	4618      	mov	r0, r3
 8006d2a:	3730      	adds	r7, #48	@ 0x30
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	bd80      	pop	{r7, pc}
 8006d30:	e000ed04 	.word	0xe000ed04

08006d34 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b08e      	sub	sp, #56	@ 0x38
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
 8006d3c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006d3e:	2300      	movs	r3, #0
 8006d40:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006d46:	2300      	movs	r3, #0
 8006d48:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006d4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d10d      	bne.n	8006d6c <xQueueSemaphoreTake+0x38>
	__asm volatile
 8006d50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d54:	b672      	cpsid	i
 8006d56:	f383 8811 	msr	BASEPRI, r3
 8006d5a:	f3bf 8f6f 	isb	sy
 8006d5e:	f3bf 8f4f 	dsb	sy
 8006d62:	b662      	cpsie	i
 8006d64:	623b      	str	r3, [r7, #32]
}
 8006d66:	bf00      	nop
 8006d68:	bf00      	nop
 8006d6a:	e7fd      	b.n	8006d68 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006d6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d00d      	beq.n	8006d90 <xQueueSemaphoreTake+0x5c>
	__asm volatile
 8006d74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d78:	b672      	cpsid	i
 8006d7a:	f383 8811 	msr	BASEPRI, r3
 8006d7e:	f3bf 8f6f 	isb	sy
 8006d82:	f3bf 8f4f 	dsb	sy
 8006d86:	b662      	cpsie	i
 8006d88:	61fb      	str	r3, [r7, #28]
}
 8006d8a:	bf00      	nop
 8006d8c:	bf00      	nop
 8006d8e:	e7fd      	b.n	8006d8c <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006d90:	f001 f9be 	bl	8008110 <xTaskGetSchedulerState>
 8006d94:	4603      	mov	r3, r0
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d102      	bne.n	8006da0 <xQueueSemaphoreTake+0x6c>
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d101      	bne.n	8006da4 <xQueueSemaphoreTake+0x70>
 8006da0:	2301      	movs	r3, #1
 8006da2:	e000      	b.n	8006da6 <xQueueSemaphoreTake+0x72>
 8006da4:	2300      	movs	r3, #0
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d10d      	bne.n	8006dc6 <xQueueSemaphoreTake+0x92>
	__asm volatile
 8006daa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dae:	b672      	cpsid	i
 8006db0:	f383 8811 	msr	BASEPRI, r3
 8006db4:	f3bf 8f6f 	isb	sy
 8006db8:	f3bf 8f4f 	dsb	sy
 8006dbc:	b662      	cpsie	i
 8006dbe:	61bb      	str	r3, [r7, #24]
}
 8006dc0:	bf00      	nop
 8006dc2:	bf00      	nop
 8006dc4:	e7fd      	b.n	8006dc2 <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006dc6:	f002 f801 	bl	8008dcc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006dca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dce:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006dd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d024      	beq.n	8006e20 <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006dd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dd8:	1e5a      	subs	r2, r3, #1
 8006dda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ddc:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006dde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d104      	bne.n	8006df0 <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006de6:	f001 fb15 	bl	8008414 <pvTaskIncrementMutexHeldCount>
 8006dea:	4602      	mov	r2, r0
 8006dec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dee:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006df0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006df2:	691b      	ldr	r3, [r3, #16]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d00f      	beq.n	8006e18 <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006df8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dfa:	3310      	adds	r3, #16
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	f000 ffb9 	bl	8007d74 <xTaskRemoveFromEventList>
 8006e02:	4603      	mov	r3, r0
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d007      	beq.n	8006e18 <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006e08:	4b55      	ldr	r3, [pc, #340]	@ (8006f60 <xQueueSemaphoreTake+0x22c>)
 8006e0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e0e:	601a      	str	r2, [r3, #0]
 8006e10:	f3bf 8f4f 	dsb	sy
 8006e14:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006e18:	f002 f80e 	bl	8008e38 <vPortExitCritical>
				return pdPASS;
 8006e1c:	2301      	movs	r3, #1
 8006e1e:	e09a      	b.n	8006f56 <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d114      	bne.n	8006e50 <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006e26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d00d      	beq.n	8006e48 <xQueueSemaphoreTake+0x114>
	__asm volatile
 8006e2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e30:	b672      	cpsid	i
 8006e32:	f383 8811 	msr	BASEPRI, r3
 8006e36:	f3bf 8f6f 	isb	sy
 8006e3a:	f3bf 8f4f 	dsb	sy
 8006e3e:	b662      	cpsie	i
 8006e40:	617b      	str	r3, [r7, #20]
}
 8006e42:	bf00      	nop
 8006e44:	bf00      	nop
 8006e46:	e7fd      	b.n	8006e44 <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006e48:	f001 fff6 	bl	8008e38 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	e082      	b.n	8006f56 <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006e50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d106      	bne.n	8006e64 <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006e56:	f107 030c 	add.w	r3, r7, #12
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	f000 fff0 	bl	8007e40 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006e60:	2301      	movs	r3, #1
 8006e62:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006e64:	f001 ffe8 	bl	8008e38 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006e68:	f000 fd4c 	bl	8007904 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006e6c:	f001 ffae 	bl	8008dcc <vPortEnterCritical>
 8006e70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e72:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006e76:	b25b      	sxtb	r3, r3
 8006e78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e7c:	d103      	bne.n	8006e86 <xQueueSemaphoreTake+0x152>
 8006e7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e80:	2200      	movs	r2, #0
 8006e82:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006e86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e88:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006e8c:	b25b      	sxtb	r3, r3
 8006e8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e92:	d103      	bne.n	8006e9c <xQueueSemaphoreTake+0x168>
 8006e94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e96:	2200      	movs	r2, #0
 8006e98:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006e9c:	f001 ffcc 	bl	8008e38 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006ea0:	463a      	mov	r2, r7
 8006ea2:	f107 030c 	add.w	r3, r7, #12
 8006ea6:	4611      	mov	r1, r2
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	f000 ffdf 	bl	8007e6c <xTaskCheckForTimeOut>
 8006eae:	4603      	mov	r3, r0
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d132      	bne.n	8006f1a <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006eb4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006eb6:	f000 f9fd 	bl	80072b4 <prvIsQueueEmpty>
 8006eba:	4603      	mov	r3, r0
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d026      	beq.n	8006f0e <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006ec0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d109      	bne.n	8006edc <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 8006ec8:	f001 ff80 	bl	8008dcc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006ecc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ece:	689b      	ldr	r3, [r3, #8]
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	f001 f93b 	bl	800814c <xTaskPriorityInherit>
 8006ed6:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8006ed8:	f001 ffae 	bl	8008e38 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006edc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ede:	3324      	adds	r3, #36	@ 0x24
 8006ee0:	683a      	ldr	r2, [r7, #0]
 8006ee2:	4611      	mov	r1, r2
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	f000 feef 	bl	8007cc8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006eea:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006eec:	f000 f990 	bl	8007210 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006ef0:	f000 fd16 	bl	8007920 <xTaskResumeAll>
 8006ef4:	4603      	mov	r3, r0
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	f47f af65 	bne.w	8006dc6 <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 8006efc:	4b18      	ldr	r3, [pc, #96]	@ (8006f60 <xQueueSemaphoreTake+0x22c>)
 8006efe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f02:	601a      	str	r2, [r3, #0]
 8006f04:	f3bf 8f4f 	dsb	sy
 8006f08:	f3bf 8f6f 	isb	sy
 8006f0c:	e75b      	b.n	8006dc6 <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006f0e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006f10:	f000 f97e 	bl	8007210 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006f14:	f000 fd04 	bl	8007920 <xTaskResumeAll>
 8006f18:	e755      	b.n	8006dc6 <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006f1a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006f1c:	f000 f978 	bl	8007210 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006f20:	f000 fcfe 	bl	8007920 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006f24:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006f26:	f000 f9c5 	bl	80072b4 <prvIsQueueEmpty>
 8006f2a:	4603      	mov	r3, r0
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	f43f af4a 	beq.w	8006dc6 <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006f32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d00d      	beq.n	8006f54 <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 8006f38:	f001 ff48 	bl	8008dcc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006f3c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006f3e:	f000 f8bf 	bl	80070c0 <prvGetDisinheritPriorityAfterTimeout>
 8006f42:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006f44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f46:	689b      	ldr	r3, [r3, #8]
 8006f48:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	f001 f9da 	bl	8008304 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006f50:	f001 ff72 	bl	8008e38 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006f54:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006f56:	4618      	mov	r0, r3
 8006f58:	3738      	adds	r7, #56	@ 0x38
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	bd80      	pop	{r7, pc}
 8006f5e:	bf00      	nop
 8006f60:	e000ed04 	.word	0xe000ed04

08006f64 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b08e      	sub	sp, #56	@ 0x38
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	60f8      	str	r0, [r7, #12]
 8006f6c:	60b9      	str	r1, [r7, #8]
 8006f6e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006f74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d10d      	bne.n	8006f96 <xQueueReceiveFromISR+0x32>
	__asm volatile
 8006f7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f7e:	b672      	cpsid	i
 8006f80:	f383 8811 	msr	BASEPRI, r3
 8006f84:	f3bf 8f6f 	isb	sy
 8006f88:	f3bf 8f4f 	dsb	sy
 8006f8c:	b662      	cpsie	i
 8006f8e:	623b      	str	r3, [r7, #32]
}
 8006f90:	bf00      	nop
 8006f92:	bf00      	nop
 8006f94:	e7fd      	b.n	8006f92 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d103      	bne.n	8006fa4 <xQueueReceiveFromISR+0x40>
 8006f9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d101      	bne.n	8006fa8 <xQueueReceiveFromISR+0x44>
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	e000      	b.n	8006faa <xQueueReceiveFromISR+0x46>
 8006fa8:	2300      	movs	r3, #0
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d10d      	bne.n	8006fca <xQueueReceiveFromISR+0x66>
	__asm volatile
 8006fae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fb2:	b672      	cpsid	i
 8006fb4:	f383 8811 	msr	BASEPRI, r3
 8006fb8:	f3bf 8f6f 	isb	sy
 8006fbc:	f3bf 8f4f 	dsb	sy
 8006fc0:	b662      	cpsie	i
 8006fc2:	61fb      	str	r3, [r7, #28]
}
 8006fc4:	bf00      	nop
 8006fc6:	bf00      	nop
 8006fc8:	e7fd      	b.n	8006fc6 <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006fca:	f001 ffe7 	bl	8008f9c <vPortValidateInterruptPriority>
	__asm volatile
 8006fce:	f3ef 8211 	mrs	r2, BASEPRI
 8006fd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fd6:	b672      	cpsid	i
 8006fd8:	f383 8811 	msr	BASEPRI, r3
 8006fdc:	f3bf 8f6f 	isb	sy
 8006fe0:	f3bf 8f4f 	dsb	sy
 8006fe4:	b662      	cpsie	i
 8006fe6:	61ba      	str	r2, [r7, #24]
 8006fe8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006fea:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006fec:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006fee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ff0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ff2:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006ff4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d02f      	beq.n	800705a <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006ffa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ffc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007000:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007004:	68b9      	ldr	r1, [r7, #8]
 8007006:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007008:	f000 f8dc 	bl	80071c4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800700c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800700e:	1e5a      	subs	r2, r3, #1
 8007010:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007012:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007014:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007018:	f1b3 3fff 	cmp.w	r3, #4294967295
 800701c:	d112      	bne.n	8007044 <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800701e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007020:	691b      	ldr	r3, [r3, #16]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d016      	beq.n	8007054 <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007026:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007028:	3310      	adds	r3, #16
 800702a:	4618      	mov	r0, r3
 800702c:	f000 fea2 	bl	8007d74 <xTaskRemoveFromEventList>
 8007030:	4603      	mov	r3, r0
 8007032:	2b00      	cmp	r3, #0
 8007034:	d00e      	beq.n	8007054 <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d00b      	beq.n	8007054 <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2201      	movs	r2, #1
 8007040:	601a      	str	r2, [r3, #0]
 8007042:	e007      	b.n	8007054 <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007044:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007048:	3301      	adds	r3, #1
 800704a:	b2db      	uxtb	r3, r3
 800704c:	b25a      	sxtb	r2, r3
 800704e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007050:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8007054:	2301      	movs	r3, #1
 8007056:	637b      	str	r3, [r7, #52]	@ 0x34
 8007058:	e001      	b.n	800705e <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 800705a:	2300      	movs	r3, #0
 800705c:	637b      	str	r3, [r7, #52]	@ 0x34
 800705e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007060:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007062:	693b      	ldr	r3, [r7, #16]
 8007064:	f383 8811 	msr	BASEPRI, r3
}
 8007068:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800706a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800706c:	4618      	mov	r0, r3
 800706e:	3738      	adds	r7, #56	@ 0x38
 8007070:	46bd      	mov	sp, r7
 8007072:	bd80      	pop	{r7, pc}

08007074 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b084      	sub	sp, #16
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d10d      	bne.n	80070a2 <vQueueDelete+0x2e>
	__asm volatile
 8007086:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800708a:	b672      	cpsid	i
 800708c:	f383 8811 	msr	BASEPRI, r3
 8007090:	f3bf 8f6f 	isb	sy
 8007094:	f3bf 8f4f 	dsb	sy
 8007098:	b662      	cpsie	i
 800709a:	60bb      	str	r3, [r7, #8]
}
 800709c:	bf00      	nop
 800709e:	bf00      	nop
 80070a0:	e7fd      	b.n	800709e <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80070a2:	68f8      	ldr	r0, [r7, #12]
 80070a4:	f000 f95e 	bl	8007364 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d102      	bne.n	80070b8 <vQueueDelete+0x44>
		{
			vPortFree( pxQueue );
 80070b2:	68f8      	ldr	r0, [r7, #12]
 80070b4:	f002 f886 	bl	80091c4 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80070b8:	bf00      	nop
 80070ba:	3710      	adds	r7, #16
 80070bc:	46bd      	mov	sp, r7
 80070be:	bd80      	pop	{r7, pc}

080070c0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80070c0:	b480      	push	{r7}
 80070c2:	b085      	sub	sp, #20
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d006      	beq.n	80070de <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 80070da:	60fb      	str	r3, [r7, #12]
 80070dc:	e001      	b.n	80070e2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80070de:	2300      	movs	r3, #0
 80070e0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80070e2:	68fb      	ldr	r3, [r7, #12]
	}
 80070e4:	4618      	mov	r0, r3
 80070e6:	3714      	adds	r7, #20
 80070e8:	46bd      	mov	sp, r7
 80070ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ee:	4770      	bx	lr

080070f0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b086      	sub	sp, #24
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	60f8      	str	r0, [r7, #12]
 80070f8:	60b9      	str	r1, [r7, #8]
 80070fa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80070fc:	2300      	movs	r3, #0
 80070fe:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007104:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800710a:	2b00      	cmp	r3, #0
 800710c:	d10d      	bne.n	800712a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d14d      	bne.n	80071b2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	689b      	ldr	r3, [r3, #8]
 800711a:	4618      	mov	r0, r3
 800711c:	f001 f87e 	bl	800821c <xTaskPriorityDisinherit>
 8007120:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	2200      	movs	r2, #0
 8007126:	609a      	str	r2, [r3, #8]
 8007128:	e043      	b.n	80071b2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d119      	bne.n	8007164 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	6858      	ldr	r0, [r3, #4]
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007138:	461a      	mov	r2, r3
 800713a:	68b9      	ldr	r1, [r7, #8]
 800713c:	f003 f9d3 	bl	800a4e6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	685a      	ldr	r2, [r3, #4]
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007148:	441a      	add	r2, r3
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	685a      	ldr	r2, [r3, #4]
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	689b      	ldr	r3, [r3, #8]
 8007156:	429a      	cmp	r2, r3
 8007158:	d32b      	bcc.n	80071b2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681a      	ldr	r2, [r3, #0]
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	605a      	str	r2, [r3, #4]
 8007162:	e026      	b.n	80071b2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	68d8      	ldr	r0, [r3, #12]
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800716c:	461a      	mov	r2, r3
 800716e:	68b9      	ldr	r1, [r7, #8]
 8007170:	f003 f9b9 	bl	800a4e6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	68da      	ldr	r2, [r3, #12]
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800717c:	425b      	negs	r3, r3
 800717e:	441a      	add	r2, r3
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	68da      	ldr	r2, [r3, #12]
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	429a      	cmp	r2, r3
 800718e:	d207      	bcs.n	80071a0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	689a      	ldr	r2, [r3, #8]
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007198:	425b      	negs	r3, r3
 800719a:	441a      	add	r2, r3
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2b02      	cmp	r3, #2
 80071a4:	d105      	bne.n	80071b2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80071a6:	693b      	ldr	r3, [r7, #16]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d002      	beq.n	80071b2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80071ac:	693b      	ldr	r3, [r7, #16]
 80071ae:	3b01      	subs	r3, #1
 80071b0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80071b2:	693b      	ldr	r3, [r7, #16]
 80071b4:	1c5a      	adds	r2, r3, #1
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80071ba:	697b      	ldr	r3, [r7, #20]
}
 80071bc:	4618      	mov	r0, r3
 80071be:	3718      	adds	r7, #24
 80071c0:	46bd      	mov	sp, r7
 80071c2:	bd80      	pop	{r7, pc}

080071c4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b082      	sub	sp, #8
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
 80071cc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d018      	beq.n	8007208 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	68da      	ldr	r2, [r3, #12]
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071de:	441a      	add	r2, r3
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	68da      	ldr	r2, [r3, #12]
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	689b      	ldr	r3, [r3, #8]
 80071ec:	429a      	cmp	r2, r3
 80071ee:	d303      	bcc.n	80071f8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681a      	ldr	r2, [r3, #0]
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	68d9      	ldr	r1, [r3, #12]
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007200:	461a      	mov	r2, r3
 8007202:	6838      	ldr	r0, [r7, #0]
 8007204:	f003 f96f 	bl	800a4e6 <memcpy>
	}
}
 8007208:	bf00      	nop
 800720a:	3708      	adds	r7, #8
 800720c:	46bd      	mov	sp, r7
 800720e:	bd80      	pop	{r7, pc}

08007210 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b084      	sub	sp, #16
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007218:	f001 fdd8 	bl	8008dcc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007222:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007224:	e011      	b.n	800724a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800722a:	2b00      	cmp	r3, #0
 800722c:	d012      	beq.n	8007254 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	3324      	adds	r3, #36	@ 0x24
 8007232:	4618      	mov	r0, r3
 8007234:	f000 fd9e 	bl	8007d74 <xTaskRemoveFromEventList>
 8007238:	4603      	mov	r3, r0
 800723a:	2b00      	cmp	r3, #0
 800723c:	d001      	beq.n	8007242 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800723e:	f000 fe7d 	bl	8007f3c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007242:	7bfb      	ldrb	r3, [r7, #15]
 8007244:	3b01      	subs	r3, #1
 8007246:	b2db      	uxtb	r3, r3
 8007248:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800724a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800724e:	2b00      	cmp	r3, #0
 8007250:	dce9      	bgt.n	8007226 <prvUnlockQueue+0x16>
 8007252:	e000      	b.n	8007256 <prvUnlockQueue+0x46>
					break;
 8007254:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	22ff      	movs	r2, #255	@ 0xff
 800725a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800725e:	f001 fdeb 	bl	8008e38 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007262:	f001 fdb3 	bl	8008dcc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800726c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800726e:	e011      	b.n	8007294 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	691b      	ldr	r3, [r3, #16]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d012      	beq.n	800729e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	3310      	adds	r3, #16
 800727c:	4618      	mov	r0, r3
 800727e:	f000 fd79 	bl	8007d74 <xTaskRemoveFromEventList>
 8007282:	4603      	mov	r3, r0
 8007284:	2b00      	cmp	r3, #0
 8007286:	d001      	beq.n	800728c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007288:	f000 fe58 	bl	8007f3c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800728c:	7bbb      	ldrb	r3, [r7, #14]
 800728e:	3b01      	subs	r3, #1
 8007290:	b2db      	uxtb	r3, r3
 8007292:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007294:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007298:	2b00      	cmp	r3, #0
 800729a:	dce9      	bgt.n	8007270 <prvUnlockQueue+0x60>
 800729c:	e000      	b.n	80072a0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800729e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	22ff      	movs	r2, #255	@ 0xff
 80072a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80072a8:	f001 fdc6 	bl	8008e38 <vPortExitCritical>
}
 80072ac:	bf00      	nop
 80072ae:	3710      	adds	r7, #16
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bd80      	pop	{r7, pc}

080072b4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b084      	sub	sp, #16
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80072bc:	f001 fd86 	bl	8008dcc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d102      	bne.n	80072ce <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80072c8:	2301      	movs	r3, #1
 80072ca:	60fb      	str	r3, [r7, #12]
 80072cc:	e001      	b.n	80072d2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80072ce:	2300      	movs	r3, #0
 80072d0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80072d2:	f001 fdb1 	bl	8008e38 <vPortExitCritical>

	return xReturn;
 80072d6:	68fb      	ldr	r3, [r7, #12]
}
 80072d8:	4618      	mov	r0, r3
 80072da:	3710      	adds	r7, #16
 80072dc:	46bd      	mov	sp, r7
 80072de:	bd80      	pop	{r7, pc}

080072e0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b084      	sub	sp, #16
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80072e8:	f001 fd70 	bl	8008dcc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072f4:	429a      	cmp	r2, r3
 80072f6:	d102      	bne.n	80072fe <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80072f8:	2301      	movs	r3, #1
 80072fa:	60fb      	str	r3, [r7, #12]
 80072fc:	e001      	b.n	8007302 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80072fe:	2300      	movs	r3, #0
 8007300:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007302:	f001 fd99 	bl	8008e38 <vPortExitCritical>

	return xReturn;
 8007306:	68fb      	ldr	r3, [r7, #12]
}
 8007308:	4618      	mov	r0, r3
 800730a:	3710      	adds	r7, #16
 800730c:	46bd      	mov	sp, r7
 800730e:	bd80      	pop	{r7, pc}

08007310 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007310:	b480      	push	{r7}
 8007312:	b085      	sub	sp, #20
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
 8007318:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800731a:	2300      	movs	r3, #0
 800731c:	60fb      	str	r3, [r7, #12]
 800731e:	e014      	b.n	800734a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007320:	4a0f      	ldr	r2, [pc, #60]	@ (8007360 <vQueueAddToRegistry+0x50>)
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d10b      	bne.n	8007344 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800732c:	490c      	ldr	r1, [pc, #48]	@ (8007360 <vQueueAddToRegistry+0x50>)
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	683a      	ldr	r2, [r7, #0]
 8007332:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007336:	4a0a      	ldr	r2, [pc, #40]	@ (8007360 <vQueueAddToRegistry+0x50>)
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	00db      	lsls	r3, r3, #3
 800733c:	4413      	add	r3, r2
 800733e:	687a      	ldr	r2, [r7, #4]
 8007340:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007342:	e006      	b.n	8007352 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	3301      	adds	r3, #1
 8007348:	60fb      	str	r3, [r7, #12]
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	2b07      	cmp	r3, #7
 800734e:	d9e7      	bls.n	8007320 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007350:	bf00      	nop
 8007352:	bf00      	nop
 8007354:	3714      	adds	r7, #20
 8007356:	46bd      	mov	sp, r7
 8007358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735c:	4770      	bx	lr
 800735e:	bf00      	nop
 8007360:	20001190 	.word	0x20001190

08007364 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8007364:	b480      	push	{r7}
 8007366:	b085      	sub	sp, #20
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800736c:	2300      	movs	r3, #0
 800736e:	60fb      	str	r3, [r7, #12]
 8007370:	e016      	b.n	80073a0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8007372:	4a10      	ldr	r2, [pc, #64]	@ (80073b4 <vQueueUnregisterQueue+0x50>)
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	00db      	lsls	r3, r3, #3
 8007378:	4413      	add	r3, r2
 800737a:	685b      	ldr	r3, [r3, #4]
 800737c:	687a      	ldr	r2, [r7, #4]
 800737e:	429a      	cmp	r2, r3
 8007380:	d10b      	bne.n	800739a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8007382:	4a0c      	ldr	r2, [pc, #48]	@ (80073b4 <vQueueUnregisterQueue+0x50>)
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	2100      	movs	r1, #0
 8007388:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800738c:	4a09      	ldr	r2, [pc, #36]	@ (80073b4 <vQueueUnregisterQueue+0x50>)
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	00db      	lsls	r3, r3, #3
 8007392:	4413      	add	r3, r2
 8007394:	2200      	movs	r2, #0
 8007396:	605a      	str	r2, [r3, #4]
				break;
 8007398:	e006      	b.n	80073a8 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	3301      	adds	r3, #1
 800739e:	60fb      	str	r3, [r7, #12]
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	2b07      	cmp	r3, #7
 80073a4:	d9e5      	bls.n	8007372 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80073a6:	bf00      	nop
 80073a8:	bf00      	nop
 80073aa:	3714      	adds	r7, #20
 80073ac:	46bd      	mov	sp, r7
 80073ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b2:	4770      	bx	lr
 80073b4:	20001190 	.word	0x20001190

080073b8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b086      	sub	sp, #24
 80073bc:	af00      	add	r7, sp, #0
 80073be:	60f8      	str	r0, [r7, #12]
 80073c0:	60b9      	str	r1, [r7, #8]
 80073c2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80073c8:	f001 fd00 	bl	8008dcc <vPortEnterCritical>
 80073cc:	697b      	ldr	r3, [r7, #20]
 80073ce:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80073d2:	b25b      	sxtb	r3, r3
 80073d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073d8:	d103      	bne.n	80073e2 <vQueueWaitForMessageRestricted+0x2a>
 80073da:	697b      	ldr	r3, [r7, #20]
 80073dc:	2200      	movs	r2, #0
 80073de:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80073e2:	697b      	ldr	r3, [r7, #20]
 80073e4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80073e8:	b25b      	sxtb	r3, r3
 80073ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073ee:	d103      	bne.n	80073f8 <vQueueWaitForMessageRestricted+0x40>
 80073f0:	697b      	ldr	r3, [r7, #20]
 80073f2:	2200      	movs	r2, #0
 80073f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80073f8:	f001 fd1e 	bl	8008e38 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80073fc:	697b      	ldr	r3, [r7, #20]
 80073fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007400:	2b00      	cmp	r3, #0
 8007402:	d106      	bne.n	8007412 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007404:	697b      	ldr	r3, [r7, #20]
 8007406:	3324      	adds	r3, #36	@ 0x24
 8007408:	687a      	ldr	r2, [r7, #4]
 800740a:	68b9      	ldr	r1, [r7, #8]
 800740c:	4618      	mov	r0, r3
 800740e:	f000 fc83 	bl	8007d18 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007412:	6978      	ldr	r0, [r7, #20]
 8007414:	f7ff fefc 	bl	8007210 <prvUnlockQueue>
	}
 8007418:	bf00      	nop
 800741a:	3718      	adds	r7, #24
 800741c:	46bd      	mov	sp, r7
 800741e:	bd80      	pop	{r7, pc}

08007420 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007420:	b580      	push	{r7, lr}
 8007422:	b08e      	sub	sp, #56	@ 0x38
 8007424:	af04      	add	r7, sp, #16
 8007426:	60f8      	str	r0, [r7, #12]
 8007428:	60b9      	str	r1, [r7, #8]
 800742a:	607a      	str	r2, [r7, #4]
 800742c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800742e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007430:	2b00      	cmp	r3, #0
 8007432:	d10d      	bne.n	8007450 <xTaskCreateStatic+0x30>
	__asm volatile
 8007434:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007438:	b672      	cpsid	i
 800743a:	f383 8811 	msr	BASEPRI, r3
 800743e:	f3bf 8f6f 	isb	sy
 8007442:	f3bf 8f4f 	dsb	sy
 8007446:	b662      	cpsie	i
 8007448:	623b      	str	r3, [r7, #32]
}
 800744a:	bf00      	nop
 800744c:	bf00      	nop
 800744e:	e7fd      	b.n	800744c <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8007450:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007452:	2b00      	cmp	r3, #0
 8007454:	d10d      	bne.n	8007472 <xTaskCreateStatic+0x52>
	__asm volatile
 8007456:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800745a:	b672      	cpsid	i
 800745c:	f383 8811 	msr	BASEPRI, r3
 8007460:	f3bf 8f6f 	isb	sy
 8007464:	f3bf 8f4f 	dsb	sy
 8007468:	b662      	cpsie	i
 800746a:	61fb      	str	r3, [r7, #28]
}
 800746c:	bf00      	nop
 800746e:	bf00      	nop
 8007470:	e7fd      	b.n	800746e <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007472:	23a8      	movs	r3, #168	@ 0xa8
 8007474:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007476:	693b      	ldr	r3, [r7, #16]
 8007478:	2ba8      	cmp	r3, #168	@ 0xa8
 800747a:	d00d      	beq.n	8007498 <xTaskCreateStatic+0x78>
	__asm volatile
 800747c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007480:	b672      	cpsid	i
 8007482:	f383 8811 	msr	BASEPRI, r3
 8007486:	f3bf 8f6f 	isb	sy
 800748a:	f3bf 8f4f 	dsb	sy
 800748e:	b662      	cpsie	i
 8007490:	61bb      	str	r3, [r7, #24]
}
 8007492:	bf00      	nop
 8007494:	bf00      	nop
 8007496:	e7fd      	b.n	8007494 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007498:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800749a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800749c:	2b00      	cmp	r3, #0
 800749e:	d01e      	beq.n	80074de <xTaskCreateStatic+0xbe>
 80074a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d01b      	beq.n	80074de <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80074a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074a8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80074aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074ac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80074ae:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80074b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074b2:	2202      	movs	r2, #2
 80074b4:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80074b8:	2300      	movs	r3, #0
 80074ba:	9303      	str	r3, [sp, #12]
 80074bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074be:	9302      	str	r3, [sp, #8]
 80074c0:	f107 0314 	add.w	r3, r7, #20
 80074c4:	9301      	str	r3, [sp, #4]
 80074c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074c8:	9300      	str	r3, [sp, #0]
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	687a      	ldr	r2, [r7, #4]
 80074ce:	68b9      	ldr	r1, [r7, #8]
 80074d0:	68f8      	ldr	r0, [r7, #12]
 80074d2:	f000 f851 	bl	8007578 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80074d6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80074d8:	f000 f8f8 	bl	80076cc <prvAddNewTaskToReadyList>
 80074dc:	e001      	b.n	80074e2 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 80074de:	2300      	movs	r3, #0
 80074e0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80074e2:	697b      	ldr	r3, [r7, #20]
	}
 80074e4:	4618      	mov	r0, r3
 80074e6:	3728      	adds	r7, #40	@ 0x28
 80074e8:	46bd      	mov	sp, r7
 80074ea:	bd80      	pop	{r7, pc}

080074ec <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b08c      	sub	sp, #48	@ 0x30
 80074f0:	af04      	add	r7, sp, #16
 80074f2:	60f8      	str	r0, [r7, #12]
 80074f4:	60b9      	str	r1, [r7, #8]
 80074f6:	603b      	str	r3, [r7, #0]
 80074f8:	4613      	mov	r3, r2
 80074fa:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80074fc:	88fb      	ldrh	r3, [r7, #6]
 80074fe:	009b      	lsls	r3, r3, #2
 8007500:	4618      	mov	r0, r3
 8007502:	f001 fd91 	bl	8009028 <pvPortMalloc>
 8007506:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007508:	697b      	ldr	r3, [r7, #20]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d00e      	beq.n	800752c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800750e:	20a8      	movs	r0, #168	@ 0xa8
 8007510:	f001 fd8a 	bl	8009028 <pvPortMalloc>
 8007514:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007516:	69fb      	ldr	r3, [r7, #28]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d003      	beq.n	8007524 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800751c:	69fb      	ldr	r3, [r7, #28]
 800751e:	697a      	ldr	r2, [r7, #20]
 8007520:	631a      	str	r2, [r3, #48]	@ 0x30
 8007522:	e005      	b.n	8007530 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007524:	6978      	ldr	r0, [r7, #20]
 8007526:	f001 fe4d 	bl	80091c4 <vPortFree>
 800752a:	e001      	b.n	8007530 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800752c:	2300      	movs	r3, #0
 800752e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007530:	69fb      	ldr	r3, [r7, #28]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d017      	beq.n	8007566 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007536:	69fb      	ldr	r3, [r7, #28]
 8007538:	2200      	movs	r2, #0
 800753a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800753e:	88fa      	ldrh	r2, [r7, #6]
 8007540:	2300      	movs	r3, #0
 8007542:	9303      	str	r3, [sp, #12]
 8007544:	69fb      	ldr	r3, [r7, #28]
 8007546:	9302      	str	r3, [sp, #8]
 8007548:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800754a:	9301      	str	r3, [sp, #4]
 800754c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800754e:	9300      	str	r3, [sp, #0]
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	68b9      	ldr	r1, [r7, #8]
 8007554:	68f8      	ldr	r0, [r7, #12]
 8007556:	f000 f80f 	bl	8007578 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800755a:	69f8      	ldr	r0, [r7, #28]
 800755c:	f000 f8b6 	bl	80076cc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007560:	2301      	movs	r3, #1
 8007562:	61bb      	str	r3, [r7, #24]
 8007564:	e002      	b.n	800756c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007566:	f04f 33ff 	mov.w	r3, #4294967295
 800756a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800756c:	69bb      	ldr	r3, [r7, #24]
	}
 800756e:	4618      	mov	r0, r3
 8007570:	3720      	adds	r7, #32
 8007572:	46bd      	mov	sp, r7
 8007574:	bd80      	pop	{r7, pc}
	...

08007578 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b088      	sub	sp, #32
 800757c:	af00      	add	r7, sp, #0
 800757e:	60f8      	str	r0, [r7, #12]
 8007580:	60b9      	str	r1, [r7, #8]
 8007582:	607a      	str	r2, [r7, #4]
 8007584:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007588:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	009b      	lsls	r3, r3, #2
 800758e:	461a      	mov	r2, r3
 8007590:	21a5      	movs	r1, #165	@ 0xa5
 8007592:	f002 feca 	bl	800a32a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007596:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007598:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800759a:	6879      	ldr	r1, [r7, #4]
 800759c:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80075a0:	440b      	add	r3, r1
 80075a2:	009b      	lsls	r3, r3, #2
 80075a4:	4413      	add	r3, r2
 80075a6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80075a8:	69bb      	ldr	r3, [r7, #24]
 80075aa:	f023 0307 	bic.w	r3, r3, #7
 80075ae:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80075b0:	69bb      	ldr	r3, [r7, #24]
 80075b2:	f003 0307 	and.w	r3, r3, #7
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d00d      	beq.n	80075d6 <prvInitialiseNewTask+0x5e>
	__asm volatile
 80075ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075be:	b672      	cpsid	i
 80075c0:	f383 8811 	msr	BASEPRI, r3
 80075c4:	f3bf 8f6f 	isb	sy
 80075c8:	f3bf 8f4f 	dsb	sy
 80075cc:	b662      	cpsie	i
 80075ce:	617b      	str	r3, [r7, #20]
}
 80075d0:	bf00      	nop
 80075d2:	bf00      	nop
 80075d4:	e7fd      	b.n	80075d2 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d01f      	beq.n	800761c <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80075dc:	2300      	movs	r3, #0
 80075de:	61fb      	str	r3, [r7, #28]
 80075e0:	e012      	b.n	8007608 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80075e2:	68ba      	ldr	r2, [r7, #8]
 80075e4:	69fb      	ldr	r3, [r7, #28]
 80075e6:	4413      	add	r3, r2
 80075e8:	7819      	ldrb	r1, [r3, #0]
 80075ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80075ec:	69fb      	ldr	r3, [r7, #28]
 80075ee:	4413      	add	r3, r2
 80075f0:	3334      	adds	r3, #52	@ 0x34
 80075f2:	460a      	mov	r2, r1
 80075f4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80075f6:	68ba      	ldr	r2, [r7, #8]
 80075f8:	69fb      	ldr	r3, [r7, #28]
 80075fa:	4413      	add	r3, r2
 80075fc:	781b      	ldrb	r3, [r3, #0]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d006      	beq.n	8007610 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007602:	69fb      	ldr	r3, [r7, #28]
 8007604:	3301      	adds	r3, #1
 8007606:	61fb      	str	r3, [r7, #28]
 8007608:	69fb      	ldr	r3, [r7, #28]
 800760a:	2b0f      	cmp	r3, #15
 800760c:	d9e9      	bls.n	80075e2 <prvInitialiseNewTask+0x6a>
 800760e:	e000      	b.n	8007612 <prvInitialiseNewTask+0x9a>
			{
				break;
 8007610:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007614:	2200      	movs	r2, #0
 8007616:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800761a:	e003      	b.n	8007624 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800761c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800761e:	2200      	movs	r2, #0
 8007620:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007624:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007626:	2b37      	cmp	r3, #55	@ 0x37
 8007628:	d901      	bls.n	800762e <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800762a:	2337      	movs	r3, #55	@ 0x37
 800762c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800762e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007630:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007632:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007634:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007636:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007638:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800763a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800763c:	2200      	movs	r2, #0
 800763e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007640:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007642:	3304      	adds	r3, #4
 8007644:	4618      	mov	r0, r3
 8007646:	f7fe fde3 	bl	8006210 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800764a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800764c:	3318      	adds	r3, #24
 800764e:	4618      	mov	r0, r3
 8007650:	f7fe fdde 	bl	8006210 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007654:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007656:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007658:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800765a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800765c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007660:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007662:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007664:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007666:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007668:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800766a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800766c:	2200      	movs	r2, #0
 800766e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007672:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007674:	2200      	movs	r2, #0
 8007676:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800767a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800767c:	3354      	adds	r3, #84	@ 0x54
 800767e:	224c      	movs	r2, #76	@ 0x4c
 8007680:	2100      	movs	r1, #0
 8007682:	4618      	mov	r0, r3
 8007684:	f002 fe51 	bl	800a32a <memset>
 8007688:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800768a:	4a0d      	ldr	r2, [pc, #52]	@ (80076c0 <prvInitialiseNewTask+0x148>)
 800768c:	659a      	str	r2, [r3, #88]	@ 0x58
 800768e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007690:	4a0c      	ldr	r2, [pc, #48]	@ (80076c4 <prvInitialiseNewTask+0x14c>)
 8007692:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007694:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007696:	4a0c      	ldr	r2, [pc, #48]	@ (80076c8 <prvInitialiseNewTask+0x150>)
 8007698:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800769a:	683a      	ldr	r2, [r7, #0]
 800769c:	68f9      	ldr	r1, [r7, #12]
 800769e:	69b8      	ldr	r0, [r7, #24]
 80076a0:	f001 fa88 	bl	8008bb4 <pxPortInitialiseStack>
 80076a4:	4602      	mov	r2, r0
 80076a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076a8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80076aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d002      	beq.n	80076b6 <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80076b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80076b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80076b6:	bf00      	nop
 80076b8:	3720      	adds	r7, #32
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd80      	pop	{r7, pc}
 80076be:	bf00      	nop
 80076c0:	2000541c 	.word	0x2000541c
 80076c4:	20005484 	.word	0x20005484
 80076c8:	200054ec 	.word	0x200054ec

080076cc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b082      	sub	sp, #8
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80076d4:	f001 fb7a 	bl	8008dcc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80076d8:	4b2d      	ldr	r3, [pc, #180]	@ (8007790 <prvAddNewTaskToReadyList+0xc4>)
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	3301      	adds	r3, #1
 80076de:	4a2c      	ldr	r2, [pc, #176]	@ (8007790 <prvAddNewTaskToReadyList+0xc4>)
 80076e0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80076e2:	4b2c      	ldr	r3, [pc, #176]	@ (8007794 <prvAddNewTaskToReadyList+0xc8>)
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d109      	bne.n	80076fe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80076ea:	4a2a      	ldr	r2, [pc, #168]	@ (8007794 <prvAddNewTaskToReadyList+0xc8>)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80076f0:	4b27      	ldr	r3, [pc, #156]	@ (8007790 <prvAddNewTaskToReadyList+0xc4>)
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	2b01      	cmp	r3, #1
 80076f6:	d110      	bne.n	800771a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80076f8:	f000 fc44 	bl	8007f84 <prvInitialiseTaskLists>
 80076fc:	e00d      	b.n	800771a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80076fe:	4b26      	ldr	r3, [pc, #152]	@ (8007798 <prvAddNewTaskToReadyList+0xcc>)
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d109      	bne.n	800771a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007706:	4b23      	ldr	r3, [pc, #140]	@ (8007794 <prvAddNewTaskToReadyList+0xc8>)
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007710:	429a      	cmp	r2, r3
 8007712:	d802      	bhi.n	800771a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007714:	4a1f      	ldr	r2, [pc, #124]	@ (8007794 <prvAddNewTaskToReadyList+0xc8>)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800771a:	4b20      	ldr	r3, [pc, #128]	@ (800779c <prvAddNewTaskToReadyList+0xd0>)
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	3301      	adds	r3, #1
 8007720:	4a1e      	ldr	r2, [pc, #120]	@ (800779c <prvAddNewTaskToReadyList+0xd0>)
 8007722:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007724:	4b1d      	ldr	r3, [pc, #116]	@ (800779c <prvAddNewTaskToReadyList+0xd0>)
 8007726:	681a      	ldr	r2, [r3, #0]
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007730:	4b1b      	ldr	r3, [pc, #108]	@ (80077a0 <prvAddNewTaskToReadyList+0xd4>)
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	429a      	cmp	r2, r3
 8007736:	d903      	bls.n	8007740 <prvAddNewTaskToReadyList+0x74>
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800773c:	4a18      	ldr	r2, [pc, #96]	@ (80077a0 <prvAddNewTaskToReadyList+0xd4>)
 800773e:	6013      	str	r3, [r2, #0]
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007744:	4613      	mov	r3, r2
 8007746:	009b      	lsls	r3, r3, #2
 8007748:	4413      	add	r3, r2
 800774a:	009b      	lsls	r3, r3, #2
 800774c:	4a15      	ldr	r2, [pc, #84]	@ (80077a4 <prvAddNewTaskToReadyList+0xd8>)
 800774e:	441a      	add	r2, r3
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	3304      	adds	r3, #4
 8007754:	4619      	mov	r1, r3
 8007756:	4610      	mov	r0, r2
 8007758:	f7fe fd67 	bl	800622a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800775c:	f001 fb6c 	bl	8008e38 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007760:	4b0d      	ldr	r3, [pc, #52]	@ (8007798 <prvAddNewTaskToReadyList+0xcc>)
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d00e      	beq.n	8007786 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007768:	4b0a      	ldr	r3, [pc, #40]	@ (8007794 <prvAddNewTaskToReadyList+0xc8>)
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007772:	429a      	cmp	r2, r3
 8007774:	d207      	bcs.n	8007786 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007776:	4b0c      	ldr	r3, [pc, #48]	@ (80077a8 <prvAddNewTaskToReadyList+0xdc>)
 8007778:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800777c:	601a      	str	r2, [r3, #0]
 800777e:	f3bf 8f4f 	dsb	sy
 8007782:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007786:	bf00      	nop
 8007788:	3708      	adds	r7, #8
 800778a:	46bd      	mov	sp, r7
 800778c:	bd80      	pop	{r7, pc}
 800778e:	bf00      	nop
 8007790:	200016a4 	.word	0x200016a4
 8007794:	200011d0 	.word	0x200011d0
 8007798:	200016b0 	.word	0x200016b0
 800779c:	200016c0 	.word	0x200016c0
 80077a0:	200016ac 	.word	0x200016ac
 80077a4:	200011d4 	.word	0x200011d4
 80077a8:	e000ed04 	.word	0xe000ed04

080077ac <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b084      	sub	sp, #16
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80077b4:	2300      	movs	r3, #0
 80077b6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d01a      	beq.n	80077f4 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80077be:	4b15      	ldr	r3, [pc, #84]	@ (8007814 <vTaskDelay+0x68>)
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d00d      	beq.n	80077e2 <vTaskDelay+0x36>
	__asm volatile
 80077c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077ca:	b672      	cpsid	i
 80077cc:	f383 8811 	msr	BASEPRI, r3
 80077d0:	f3bf 8f6f 	isb	sy
 80077d4:	f3bf 8f4f 	dsb	sy
 80077d8:	b662      	cpsie	i
 80077da:	60bb      	str	r3, [r7, #8]
}
 80077dc:	bf00      	nop
 80077de:	bf00      	nop
 80077e0:	e7fd      	b.n	80077de <vTaskDelay+0x32>
			vTaskSuspendAll();
 80077e2:	f000 f88f 	bl	8007904 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80077e6:	2100      	movs	r1, #0
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	f000 fe27 	bl	800843c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80077ee:	f000 f897 	bl	8007920 <xTaskResumeAll>
 80077f2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d107      	bne.n	800780a <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 80077fa:	4b07      	ldr	r3, [pc, #28]	@ (8007818 <vTaskDelay+0x6c>)
 80077fc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007800:	601a      	str	r2, [r3, #0]
 8007802:	f3bf 8f4f 	dsb	sy
 8007806:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800780a:	bf00      	nop
 800780c:	3710      	adds	r7, #16
 800780e:	46bd      	mov	sp, r7
 8007810:	bd80      	pop	{r7, pc}
 8007812:	bf00      	nop
 8007814:	200016cc 	.word	0x200016cc
 8007818:	e000ed04 	.word	0xe000ed04

0800781c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b08a      	sub	sp, #40	@ 0x28
 8007820:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007822:	2300      	movs	r3, #0
 8007824:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007826:	2300      	movs	r3, #0
 8007828:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800782a:	463a      	mov	r2, r7
 800782c:	1d39      	adds	r1, r7, #4
 800782e:	f107 0308 	add.w	r3, r7, #8
 8007832:	4618      	mov	r0, r3
 8007834:	f7fe fc98 	bl	8006168 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007838:	6839      	ldr	r1, [r7, #0]
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	68ba      	ldr	r2, [r7, #8]
 800783e:	9202      	str	r2, [sp, #8]
 8007840:	9301      	str	r3, [sp, #4]
 8007842:	2300      	movs	r3, #0
 8007844:	9300      	str	r3, [sp, #0]
 8007846:	2300      	movs	r3, #0
 8007848:	460a      	mov	r2, r1
 800784a:	4926      	ldr	r1, [pc, #152]	@ (80078e4 <vTaskStartScheduler+0xc8>)
 800784c:	4826      	ldr	r0, [pc, #152]	@ (80078e8 <vTaskStartScheduler+0xcc>)
 800784e:	f7ff fde7 	bl	8007420 <xTaskCreateStatic>
 8007852:	4603      	mov	r3, r0
 8007854:	4a25      	ldr	r2, [pc, #148]	@ (80078ec <vTaskStartScheduler+0xd0>)
 8007856:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007858:	4b24      	ldr	r3, [pc, #144]	@ (80078ec <vTaskStartScheduler+0xd0>)
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d002      	beq.n	8007866 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007860:	2301      	movs	r3, #1
 8007862:	617b      	str	r3, [r7, #20]
 8007864:	e001      	b.n	800786a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007866:	2300      	movs	r3, #0
 8007868:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800786a:	697b      	ldr	r3, [r7, #20]
 800786c:	2b01      	cmp	r3, #1
 800786e:	d102      	bne.n	8007876 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007870:	f000 fe38 	bl	80084e4 <xTimerCreateTimerTask>
 8007874:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007876:	697b      	ldr	r3, [r7, #20]
 8007878:	2b01      	cmp	r3, #1
 800787a:	d11d      	bne.n	80078b8 <vTaskStartScheduler+0x9c>
	__asm volatile
 800787c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007880:	b672      	cpsid	i
 8007882:	f383 8811 	msr	BASEPRI, r3
 8007886:	f3bf 8f6f 	isb	sy
 800788a:	f3bf 8f4f 	dsb	sy
 800788e:	b662      	cpsie	i
 8007890:	613b      	str	r3, [r7, #16]
}
 8007892:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007894:	4b16      	ldr	r3, [pc, #88]	@ (80078f0 <vTaskStartScheduler+0xd4>)
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	3354      	adds	r3, #84	@ 0x54
 800789a:	4a16      	ldr	r2, [pc, #88]	@ (80078f4 <vTaskStartScheduler+0xd8>)
 800789c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800789e:	4b16      	ldr	r3, [pc, #88]	@ (80078f8 <vTaskStartScheduler+0xdc>)
 80078a0:	f04f 32ff 	mov.w	r2, #4294967295
 80078a4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80078a6:	4b15      	ldr	r3, [pc, #84]	@ (80078fc <vTaskStartScheduler+0xe0>)
 80078a8:	2201      	movs	r2, #1
 80078aa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80078ac:	4b14      	ldr	r3, [pc, #80]	@ (8007900 <vTaskStartScheduler+0xe4>)
 80078ae:	2200      	movs	r2, #0
 80078b0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80078b2:	f001 fa0d 	bl	8008cd0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80078b6:	e011      	b.n	80078dc <vTaskStartScheduler+0xc0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80078b8:	697b      	ldr	r3, [r7, #20]
 80078ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078be:	d10d      	bne.n	80078dc <vTaskStartScheduler+0xc0>
	__asm volatile
 80078c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078c4:	b672      	cpsid	i
 80078c6:	f383 8811 	msr	BASEPRI, r3
 80078ca:	f3bf 8f6f 	isb	sy
 80078ce:	f3bf 8f4f 	dsb	sy
 80078d2:	b662      	cpsie	i
 80078d4:	60fb      	str	r3, [r7, #12]
}
 80078d6:	bf00      	nop
 80078d8:	bf00      	nop
 80078da:	e7fd      	b.n	80078d8 <vTaskStartScheduler+0xbc>
}
 80078dc:	bf00      	nop
 80078de:	3718      	adds	r7, #24
 80078e0:	46bd      	mov	sp, r7
 80078e2:	bd80      	pop	{r7, pc}
 80078e4:	0800db3c 	.word	0x0800db3c
 80078e8:	08007f55 	.word	0x08007f55
 80078ec:	200016c8 	.word	0x200016c8
 80078f0:	200011d0 	.word	0x200011d0
 80078f4:	2000001c 	.word	0x2000001c
 80078f8:	200016c4 	.word	0x200016c4
 80078fc:	200016b0 	.word	0x200016b0
 8007900:	200016a8 	.word	0x200016a8

08007904 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007904:	b480      	push	{r7}
 8007906:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007908:	4b04      	ldr	r3, [pc, #16]	@ (800791c <vTaskSuspendAll+0x18>)
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	3301      	adds	r3, #1
 800790e:	4a03      	ldr	r2, [pc, #12]	@ (800791c <vTaskSuspendAll+0x18>)
 8007910:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8007912:	bf00      	nop
 8007914:	46bd      	mov	sp, r7
 8007916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791a:	4770      	bx	lr
 800791c:	200016cc 	.word	0x200016cc

08007920 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b084      	sub	sp, #16
 8007924:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007926:	2300      	movs	r3, #0
 8007928:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800792a:	2300      	movs	r3, #0
 800792c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800792e:	4b43      	ldr	r3, [pc, #268]	@ (8007a3c <xTaskResumeAll+0x11c>)
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d10d      	bne.n	8007952 <xTaskResumeAll+0x32>
	__asm volatile
 8007936:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800793a:	b672      	cpsid	i
 800793c:	f383 8811 	msr	BASEPRI, r3
 8007940:	f3bf 8f6f 	isb	sy
 8007944:	f3bf 8f4f 	dsb	sy
 8007948:	b662      	cpsie	i
 800794a:	603b      	str	r3, [r7, #0]
}
 800794c:	bf00      	nop
 800794e:	bf00      	nop
 8007950:	e7fd      	b.n	800794e <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007952:	f001 fa3b 	bl	8008dcc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007956:	4b39      	ldr	r3, [pc, #228]	@ (8007a3c <xTaskResumeAll+0x11c>)
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	3b01      	subs	r3, #1
 800795c:	4a37      	ldr	r2, [pc, #220]	@ (8007a3c <xTaskResumeAll+0x11c>)
 800795e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007960:	4b36      	ldr	r3, [pc, #216]	@ (8007a3c <xTaskResumeAll+0x11c>)
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d162      	bne.n	8007a2e <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007968:	4b35      	ldr	r3, [pc, #212]	@ (8007a40 <xTaskResumeAll+0x120>)
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d05e      	beq.n	8007a2e <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007970:	e02f      	b.n	80079d2 <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007972:	4b34      	ldr	r3, [pc, #208]	@ (8007a44 <xTaskResumeAll+0x124>)
 8007974:	68db      	ldr	r3, [r3, #12]
 8007976:	68db      	ldr	r3, [r3, #12]
 8007978:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	3318      	adds	r3, #24
 800797e:	4618      	mov	r0, r3
 8007980:	f7fe fcb0 	bl	80062e4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	3304      	adds	r3, #4
 8007988:	4618      	mov	r0, r3
 800798a:	f7fe fcab 	bl	80062e4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007992:	4b2d      	ldr	r3, [pc, #180]	@ (8007a48 <xTaskResumeAll+0x128>)
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	429a      	cmp	r2, r3
 8007998:	d903      	bls.n	80079a2 <xTaskResumeAll+0x82>
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800799e:	4a2a      	ldr	r2, [pc, #168]	@ (8007a48 <xTaskResumeAll+0x128>)
 80079a0:	6013      	str	r3, [r2, #0]
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079a6:	4613      	mov	r3, r2
 80079a8:	009b      	lsls	r3, r3, #2
 80079aa:	4413      	add	r3, r2
 80079ac:	009b      	lsls	r3, r3, #2
 80079ae:	4a27      	ldr	r2, [pc, #156]	@ (8007a4c <xTaskResumeAll+0x12c>)
 80079b0:	441a      	add	r2, r3
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	3304      	adds	r3, #4
 80079b6:	4619      	mov	r1, r3
 80079b8:	4610      	mov	r0, r2
 80079ba:	f7fe fc36 	bl	800622a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079c2:	4b23      	ldr	r3, [pc, #140]	@ (8007a50 <xTaskResumeAll+0x130>)
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079c8:	429a      	cmp	r2, r3
 80079ca:	d302      	bcc.n	80079d2 <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 80079cc:	4b21      	ldr	r3, [pc, #132]	@ (8007a54 <xTaskResumeAll+0x134>)
 80079ce:	2201      	movs	r2, #1
 80079d0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80079d2:	4b1c      	ldr	r3, [pc, #112]	@ (8007a44 <xTaskResumeAll+0x124>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d1cb      	bne.n	8007972 <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d001      	beq.n	80079e4 <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80079e0:	f000 fb76 	bl	80080d0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80079e4:	4b1c      	ldr	r3, [pc, #112]	@ (8007a58 <xTaskResumeAll+0x138>)
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d010      	beq.n	8007a12 <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80079f0:	f000 f846 	bl	8007a80 <xTaskIncrementTick>
 80079f4:	4603      	mov	r3, r0
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d002      	beq.n	8007a00 <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 80079fa:	4b16      	ldr	r3, [pc, #88]	@ (8007a54 <xTaskResumeAll+0x134>)
 80079fc:	2201      	movs	r2, #1
 80079fe:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	3b01      	subs	r3, #1
 8007a04:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d1f1      	bne.n	80079f0 <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 8007a0c:	4b12      	ldr	r3, [pc, #72]	@ (8007a58 <xTaskResumeAll+0x138>)
 8007a0e:	2200      	movs	r2, #0
 8007a10:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007a12:	4b10      	ldr	r3, [pc, #64]	@ (8007a54 <xTaskResumeAll+0x134>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d009      	beq.n	8007a2e <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007a1e:	4b0f      	ldr	r3, [pc, #60]	@ (8007a5c <xTaskResumeAll+0x13c>)
 8007a20:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007a24:	601a      	str	r2, [r3, #0]
 8007a26:	f3bf 8f4f 	dsb	sy
 8007a2a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007a2e:	f001 fa03 	bl	8008e38 <vPortExitCritical>

	return xAlreadyYielded;
 8007a32:	68bb      	ldr	r3, [r7, #8]
}
 8007a34:	4618      	mov	r0, r3
 8007a36:	3710      	adds	r7, #16
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	bd80      	pop	{r7, pc}
 8007a3c:	200016cc 	.word	0x200016cc
 8007a40:	200016a4 	.word	0x200016a4
 8007a44:	20001664 	.word	0x20001664
 8007a48:	200016ac 	.word	0x200016ac
 8007a4c:	200011d4 	.word	0x200011d4
 8007a50:	200011d0 	.word	0x200011d0
 8007a54:	200016b8 	.word	0x200016b8
 8007a58:	200016b4 	.word	0x200016b4
 8007a5c:	e000ed04 	.word	0xe000ed04

08007a60 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007a60:	b480      	push	{r7}
 8007a62:	b083      	sub	sp, #12
 8007a64:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007a66:	4b05      	ldr	r3, [pc, #20]	@ (8007a7c <xTaskGetTickCount+0x1c>)
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007a6c:	687b      	ldr	r3, [r7, #4]
}
 8007a6e:	4618      	mov	r0, r3
 8007a70:	370c      	adds	r7, #12
 8007a72:	46bd      	mov	sp, r7
 8007a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a78:	4770      	bx	lr
 8007a7a:	bf00      	nop
 8007a7c:	200016a8 	.word	0x200016a8

08007a80 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b086      	sub	sp, #24
 8007a84:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007a86:	2300      	movs	r3, #0
 8007a88:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007a8a:	4b50      	ldr	r3, [pc, #320]	@ (8007bcc <xTaskIncrementTick+0x14c>)
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	f040 808c 	bne.w	8007bac <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007a94:	4b4e      	ldr	r3, [pc, #312]	@ (8007bd0 <xTaskIncrementTick+0x150>)
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	3301      	adds	r3, #1
 8007a9a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007a9c:	4a4c      	ldr	r2, [pc, #304]	@ (8007bd0 <xTaskIncrementTick+0x150>)
 8007a9e:	693b      	ldr	r3, [r7, #16]
 8007aa0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007aa2:	693b      	ldr	r3, [r7, #16]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d123      	bne.n	8007af0 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8007aa8:	4b4a      	ldr	r3, [pc, #296]	@ (8007bd4 <xTaskIncrementTick+0x154>)
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d00d      	beq.n	8007ace <xTaskIncrementTick+0x4e>
	__asm volatile
 8007ab2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ab6:	b672      	cpsid	i
 8007ab8:	f383 8811 	msr	BASEPRI, r3
 8007abc:	f3bf 8f6f 	isb	sy
 8007ac0:	f3bf 8f4f 	dsb	sy
 8007ac4:	b662      	cpsie	i
 8007ac6:	603b      	str	r3, [r7, #0]
}
 8007ac8:	bf00      	nop
 8007aca:	bf00      	nop
 8007acc:	e7fd      	b.n	8007aca <xTaskIncrementTick+0x4a>
 8007ace:	4b41      	ldr	r3, [pc, #260]	@ (8007bd4 <xTaskIncrementTick+0x154>)
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	60fb      	str	r3, [r7, #12]
 8007ad4:	4b40      	ldr	r3, [pc, #256]	@ (8007bd8 <xTaskIncrementTick+0x158>)
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	4a3e      	ldr	r2, [pc, #248]	@ (8007bd4 <xTaskIncrementTick+0x154>)
 8007ada:	6013      	str	r3, [r2, #0]
 8007adc:	4a3e      	ldr	r2, [pc, #248]	@ (8007bd8 <xTaskIncrementTick+0x158>)
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	6013      	str	r3, [r2, #0]
 8007ae2:	4b3e      	ldr	r3, [pc, #248]	@ (8007bdc <xTaskIncrementTick+0x15c>)
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	3301      	adds	r3, #1
 8007ae8:	4a3c      	ldr	r2, [pc, #240]	@ (8007bdc <xTaskIncrementTick+0x15c>)
 8007aea:	6013      	str	r3, [r2, #0]
 8007aec:	f000 faf0 	bl	80080d0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007af0:	4b3b      	ldr	r3, [pc, #236]	@ (8007be0 <xTaskIncrementTick+0x160>)
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	693a      	ldr	r2, [r7, #16]
 8007af6:	429a      	cmp	r2, r3
 8007af8:	d349      	bcc.n	8007b8e <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007afa:	4b36      	ldr	r3, [pc, #216]	@ (8007bd4 <xTaskIncrementTick+0x154>)
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d104      	bne.n	8007b0e <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b04:	4b36      	ldr	r3, [pc, #216]	@ (8007be0 <xTaskIncrementTick+0x160>)
 8007b06:	f04f 32ff 	mov.w	r2, #4294967295
 8007b0a:	601a      	str	r2, [r3, #0]
					break;
 8007b0c:	e03f      	b.n	8007b8e <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b0e:	4b31      	ldr	r3, [pc, #196]	@ (8007bd4 <xTaskIncrementTick+0x154>)
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	68db      	ldr	r3, [r3, #12]
 8007b14:	68db      	ldr	r3, [r3, #12]
 8007b16:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007b18:	68bb      	ldr	r3, [r7, #8]
 8007b1a:	685b      	ldr	r3, [r3, #4]
 8007b1c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007b1e:	693a      	ldr	r2, [r7, #16]
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	429a      	cmp	r2, r3
 8007b24:	d203      	bcs.n	8007b2e <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007b26:	4a2e      	ldr	r2, [pc, #184]	@ (8007be0 <xTaskIncrementTick+0x160>)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007b2c:	e02f      	b.n	8007b8e <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007b2e:	68bb      	ldr	r3, [r7, #8]
 8007b30:	3304      	adds	r3, #4
 8007b32:	4618      	mov	r0, r3
 8007b34:	f7fe fbd6 	bl	80062e4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007b38:	68bb      	ldr	r3, [r7, #8]
 8007b3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d004      	beq.n	8007b4a <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007b40:	68bb      	ldr	r3, [r7, #8]
 8007b42:	3318      	adds	r3, #24
 8007b44:	4618      	mov	r0, r3
 8007b46:	f7fe fbcd 	bl	80062e4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007b4a:	68bb      	ldr	r3, [r7, #8]
 8007b4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b4e:	4b25      	ldr	r3, [pc, #148]	@ (8007be4 <xTaskIncrementTick+0x164>)
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	429a      	cmp	r2, r3
 8007b54:	d903      	bls.n	8007b5e <xTaskIncrementTick+0xde>
 8007b56:	68bb      	ldr	r3, [r7, #8]
 8007b58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b5a:	4a22      	ldr	r2, [pc, #136]	@ (8007be4 <xTaskIncrementTick+0x164>)
 8007b5c:	6013      	str	r3, [r2, #0]
 8007b5e:	68bb      	ldr	r3, [r7, #8]
 8007b60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b62:	4613      	mov	r3, r2
 8007b64:	009b      	lsls	r3, r3, #2
 8007b66:	4413      	add	r3, r2
 8007b68:	009b      	lsls	r3, r3, #2
 8007b6a:	4a1f      	ldr	r2, [pc, #124]	@ (8007be8 <xTaskIncrementTick+0x168>)
 8007b6c:	441a      	add	r2, r3
 8007b6e:	68bb      	ldr	r3, [r7, #8]
 8007b70:	3304      	adds	r3, #4
 8007b72:	4619      	mov	r1, r3
 8007b74:	4610      	mov	r0, r2
 8007b76:	f7fe fb58 	bl	800622a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007b7a:	68bb      	ldr	r3, [r7, #8]
 8007b7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b7e:	4b1b      	ldr	r3, [pc, #108]	@ (8007bec <xTaskIncrementTick+0x16c>)
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b84:	429a      	cmp	r2, r3
 8007b86:	d3b8      	bcc.n	8007afa <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8007b88:	2301      	movs	r3, #1
 8007b8a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007b8c:	e7b5      	b.n	8007afa <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007b8e:	4b17      	ldr	r3, [pc, #92]	@ (8007bec <xTaskIncrementTick+0x16c>)
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b94:	4914      	ldr	r1, [pc, #80]	@ (8007be8 <xTaskIncrementTick+0x168>)
 8007b96:	4613      	mov	r3, r2
 8007b98:	009b      	lsls	r3, r3, #2
 8007b9a:	4413      	add	r3, r2
 8007b9c:	009b      	lsls	r3, r3, #2
 8007b9e:	440b      	add	r3, r1
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	2b01      	cmp	r3, #1
 8007ba4:	d907      	bls.n	8007bb6 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8007ba6:	2301      	movs	r3, #1
 8007ba8:	617b      	str	r3, [r7, #20]
 8007baa:	e004      	b.n	8007bb6 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007bac:	4b10      	ldr	r3, [pc, #64]	@ (8007bf0 <xTaskIncrementTick+0x170>)
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	3301      	adds	r3, #1
 8007bb2:	4a0f      	ldr	r2, [pc, #60]	@ (8007bf0 <xTaskIncrementTick+0x170>)
 8007bb4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007bb6:	4b0f      	ldr	r3, [pc, #60]	@ (8007bf4 <xTaskIncrementTick+0x174>)
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d001      	beq.n	8007bc2 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8007bbe:	2301      	movs	r3, #1
 8007bc0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007bc2:	697b      	ldr	r3, [r7, #20]
}
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	3718      	adds	r7, #24
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	bd80      	pop	{r7, pc}
 8007bcc:	200016cc 	.word	0x200016cc
 8007bd0:	200016a8 	.word	0x200016a8
 8007bd4:	2000165c 	.word	0x2000165c
 8007bd8:	20001660 	.word	0x20001660
 8007bdc:	200016bc 	.word	0x200016bc
 8007be0:	200016c4 	.word	0x200016c4
 8007be4:	200016ac 	.word	0x200016ac
 8007be8:	200011d4 	.word	0x200011d4
 8007bec:	200011d0 	.word	0x200011d0
 8007bf0:	200016b4 	.word	0x200016b4
 8007bf4:	200016b8 	.word	0x200016b8

08007bf8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007bf8:	b480      	push	{r7}
 8007bfa:	b085      	sub	sp, #20
 8007bfc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007bfe:	4b2c      	ldr	r3, [pc, #176]	@ (8007cb0 <vTaskSwitchContext+0xb8>)
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d003      	beq.n	8007c0e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007c06:	4b2b      	ldr	r3, [pc, #172]	@ (8007cb4 <vTaskSwitchContext+0xbc>)
 8007c08:	2201      	movs	r2, #1
 8007c0a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007c0c:	e049      	b.n	8007ca2 <vTaskSwitchContext+0xaa>
		xYieldPending = pdFALSE;
 8007c0e:	4b29      	ldr	r3, [pc, #164]	@ (8007cb4 <vTaskSwitchContext+0xbc>)
 8007c10:	2200      	movs	r2, #0
 8007c12:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c14:	4b28      	ldr	r3, [pc, #160]	@ (8007cb8 <vTaskSwitchContext+0xc0>)
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	60fb      	str	r3, [r7, #12]
 8007c1a:	e013      	b.n	8007c44 <vTaskSwitchContext+0x4c>
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d10d      	bne.n	8007c3e <vTaskSwitchContext+0x46>
	__asm volatile
 8007c22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c26:	b672      	cpsid	i
 8007c28:	f383 8811 	msr	BASEPRI, r3
 8007c2c:	f3bf 8f6f 	isb	sy
 8007c30:	f3bf 8f4f 	dsb	sy
 8007c34:	b662      	cpsie	i
 8007c36:	607b      	str	r3, [r7, #4]
}
 8007c38:	bf00      	nop
 8007c3a:	bf00      	nop
 8007c3c:	e7fd      	b.n	8007c3a <vTaskSwitchContext+0x42>
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	3b01      	subs	r3, #1
 8007c42:	60fb      	str	r3, [r7, #12]
 8007c44:	491d      	ldr	r1, [pc, #116]	@ (8007cbc <vTaskSwitchContext+0xc4>)
 8007c46:	68fa      	ldr	r2, [r7, #12]
 8007c48:	4613      	mov	r3, r2
 8007c4a:	009b      	lsls	r3, r3, #2
 8007c4c:	4413      	add	r3, r2
 8007c4e:	009b      	lsls	r3, r3, #2
 8007c50:	440b      	add	r3, r1
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d0e1      	beq.n	8007c1c <vTaskSwitchContext+0x24>
 8007c58:	68fa      	ldr	r2, [r7, #12]
 8007c5a:	4613      	mov	r3, r2
 8007c5c:	009b      	lsls	r3, r3, #2
 8007c5e:	4413      	add	r3, r2
 8007c60:	009b      	lsls	r3, r3, #2
 8007c62:	4a16      	ldr	r2, [pc, #88]	@ (8007cbc <vTaskSwitchContext+0xc4>)
 8007c64:	4413      	add	r3, r2
 8007c66:	60bb      	str	r3, [r7, #8]
 8007c68:	68bb      	ldr	r3, [r7, #8]
 8007c6a:	685b      	ldr	r3, [r3, #4]
 8007c6c:	685a      	ldr	r2, [r3, #4]
 8007c6e:	68bb      	ldr	r3, [r7, #8]
 8007c70:	605a      	str	r2, [r3, #4]
 8007c72:	68bb      	ldr	r3, [r7, #8]
 8007c74:	685a      	ldr	r2, [r3, #4]
 8007c76:	68bb      	ldr	r3, [r7, #8]
 8007c78:	3308      	adds	r3, #8
 8007c7a:	429a      	cmp	r2, r3
 8007c7c:	d104      	bne.n	8007c88 <vTaskSwitchContext+0x90>
 8007c7e:	68bb      	ldr	r3, [r7, #8]
 8007c80:	685b      	ldr	r3, [r3, #4]
 8007c82:	685a      	ldr	r2, [r3, #4]
 8007c84:	68bb      	ldr	r3, [r7, #8]
 8007c86:	605a      	str	r2, [r3, #4]
 8007c88:	68bb      	ldr	r3, [r7, #8]
 8007c8a:	685b      	ldr	r3, [r3, #4]
 8007c8c:	68db      	ldr	r3, [r3, #12]
 8007c8e:	4a0c      	ldr	r2, [pc, #48]	@ (8007cc0 <vTaskSwitchContext+0xc8>)
 8007c90:	6013      	str	r3, [r2, #0]
 8007c92:	4a09      	ldr	r2, [pc, #36]	@ (8007cb8 <vTaskSwitchContext+0xc0>)
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007c98:	4b09      	ldr	r3, [pc, #36]	@ (8007cc0 <vTaskSwitchContext+0xc8>)
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	3354      	adds	r3, #84	@ 0x54
 8007c9e:	4a09      	ldr	r2, [pc, #36]	@ (8007cc4 <vTaskSwitchContext+0xcc>)
 8007ca0:	6013      	str	r3, [r2, #0]
}
 8007ca2:	bf00      	nop
 8007ca4:	3714      	adds	r7, #20
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cac:	4770      	bx	lr
 8007cae:	bf00      	nop
 8007cb0:	200016cc 	.word	0x200016cc
 8007cb4:	200016b8 	.word	0x200016b8
 8007cb8:	200016ac 	.word	0x200016ac
 8007cbc:	200011d4 	.word	0x200011d4
 8007cc0:	200011d0 	.word	0x200011d0
 8007cc4:	2000001c 	.word	0x2000001c

08007cc8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b084      	sub	sp, #16
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
 8007cd0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d10d      	bne.n	8007cf4 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8007cd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cdc:	b672      	cpsid	i
 8007cde:	f383 8811 	msr	BASEPRI, r3
 8007ce2:	f3bf 8f6f 	isb	sy
 8007ce6:	f3bf 8f4f 	dsb	sy
 8007cea:	b662      	cpsie	i
 8007cec:	60fb      	str	r3, [r7, #12]
}
 8007cee:	bf00      	nop
 8007cf0:	bf00      	nop
 8007cf2:	e7fd      	b.n	8007cf0 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007cf4:	4b07      	ldr	r3, [pc, #28]	@ (8007d14 <vTaskPlaceOnEventList+0x4c>)
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	3318      	adds	r3, #24
 8007cfa:	4619      	mov	r1, r3
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	f7fe fab8 	bl	8006272 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007d02:	2101      	movs	r1, #1
 8007d04:	6838      	ldr	r0, [r7, #0]
 8007d06:	f000 fb99 	bl	800843c <prvAddCurrentTaskToDelayedList>
}
 8007d0a:	bf00      	nop
 8007d0c:	3710      	adds	r7, #16
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	bd80      	pop	{r7, pc}
 8007d12:	bf00      	nop
 8007d14:	200011d0 	.word	0x200011d0

08007d18 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b086      	sub	sp, #24
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	60f8      	str	r0, [r7, #12]
 8007d20:	60b9      	str	r1, [r7, #8]
 8007d22:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d10d      	bne.n	8007d46 <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 8007d2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d2e:	b672      	cpsid	i
 8007d30:	f383 8811 	msr	BASEPRI, r3
 8007d34:	f3bf 8f6f 	isb	sy
 8007d38:	f3bf 8f4f 	dsb	sy
 8007d3c:	b662      	cpsie	i
 8007d3e:	617b      	str	r3, [r7, #20]
}
 8007d40:	bf00      	nop
 8007d42:	bf00      	nop
 8007d44:	e7fd      	b.n	8007d42 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007d46:	4b0a      	ldr	r3, [pc, #40]	@ (8007d70 <vTaskPlaceOnEventListRestricted+0x58>)
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	3318      	adds	r3, #24
 8007d4c:	4619      	mov	r1, r3
 8007d4e:	68f8      	ldr	r0, [r7, #12]
 8007d50:	f7fe fa6b 	bl	800622a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d002      	beq.n	8007d60 <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 8007d5a:	f04f 33ff 	mov.w	r3, #4294967295
 8007d5e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007d60:	6879      	ldr	r1, [r7, #4]
 8007d62:	68b8      	ldr	r0, [r7, #8]
 8007d64:	f000 fb6a 	bl	800843c <prvAddCurrentTaskToDelayedList>
	}
 8007d68:	bf00      	nop
 8007d6a:	3718      	adds	r7, #24
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	bd80      	pop	{r7, pc}
 8007d70:	200011d0 	.word	0x200011d0

08007d74 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b086      	sub	sp, #24
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	68db      	ldr	r3, [r3, #12]
 8007d80:	68db      	ldr	r3, [r3, #12]
 8007d82:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007d84:	693b      	ldr	r3, [r7, #16]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d10d      	bne.n	8007da6 <xTaskRemoveFromEventList+0x32>
	__asm volatile
 8007d8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d8e:	b672      	cpsid	i
 8007d90:	f383 8811 	msr	BASEPRI, r3
 8007d94:	f3bf 8f6f 	isb	sy
 8007d98:	f3bf 8f4f 	dsb	sy
 8007d9c:	b662      	cpsie	i
 8007d9e:	60fb      	str	r3, [r7, #12]
}
 8007da0:	bf00      	nop
 8007da2:	bf00      	nop
 8007da4:	e7fd      	b.n	8007da2 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007da6:	693b      	ldr	r3, [r7, #16]
 8007da8:	3318      	adds	r3, #24
 8007daa:	4618      	mov	r0, r3
 8007dac:	f7fe fa9a 	bl	80062e4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007db0:	4b1d      	ldr	r3, [pc, #116]	@ (8007e28 <xTaskRemoveFromEventList+0xb4>)
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d11d      	bne.n	8007df4 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007db8:	693b      	ldr	r3, [r7, #16]
 8007dba:	3304      	adds	r3, #4
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	f7fe fa91 	bl	80062e4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007dc2:	693b      	ldr	r3, [r7, #16]
 8007dc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007dc6:	4b19      	ldr	r3, [pc, #100]	@ (8007e2c <xTaskRemoveFromEventList+0xb8>)
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	429a      	cmp	r2, r3
 8007dcc:	d903      	bls.n	8007dd6 <xTaskRemoveFromEventList+0x62>
 8007dce:	693b      	ldr	r3, [r7, #16]
 8007dd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dd2:	4a16      	ldr	r2, [pc, #88]	@ (8007e2c <xTaskRemoveFromEventList+0xb8>)
 8007dd4:	6013      	str	r3, [r2, #0]
 8007dd6:	693b      	ldr	r3, [r7, #16]
 8007dd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007dda:	4613      	mov	r3, r2
 8007ddc:	009b      	lsls	r3, r3, #2
 8007dde:	4413      	add	r3, r2
 8007de0:	009b      	lsls	r3, r3, #2
 8007de2:	4a13      	ldr	r2, [pc, #76]	@ (8007e30 <xTaskRemoveFromEventList+0xbc>)
 8007de4:	441a      	add	r2, r3
 8007de6:	693b      	ldr	r3, [r7, #16]
 8007de8:	3304      	adds	r3, #4
 8007dea:	4619      	mov	r1, r3
 8007dec:	4610      	mov	r0, r2
 8007dee:	f7fe fa1c 	bl	800622a <vListInsertEnd>
 8007df2:	e005      	b.n	8007e00 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007df4:	693b      	ldr	r3, [r7, #16]
 8007df6:	3318      	adds	r3, #24
 8007df8:	4619      	mov	r1, r3
 8007dfa:	480e      	ldr	r0, [pc, #56]	@ (8007e34 <xTaskRemoveFromEventList+0xc0>)
 8007dfc:	f7fe fa15 	bl	800622a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007e00:	693b      	ldr	r3, [r7, #16]
 8007e02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e04:	4b0c      	ldr	r3, [pc, #48]	@ (8007e38 <xTaskRemoveFromEventList+0xc4>)
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e0a:	429a      	cmp	r2, r3
 8007e0c:	d905      	bls.n	8007e1a <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007e0e:	2301      	movs	r3, #1
 8007e10:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007e12:	4b0a      	ldr	r3, [pc, #40]	@ (8007e3c <xTaskRemoveFromEventList+0xc8>)
 8007e14:	2201      	movs	r2, #1
 8007e16:	601a      	str	r2, [r3, #0]
 8007e18:	e001      	b.n	8007e1e <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007e1e:	697b      	ldr	r3, [r7, #20]
}
 8007e20:	4618      	mov	r0, r3
 8007e22:	3718      	adds	r7, #24
 8007e24:	46bd      	mov	sp, r7
 8007e26:	bd80      	pop	{r7, pc}
 8007e28:	200016cc 	.word	0x200016cc
 8007e2c:	200016ac 	.word	0x200016ac
 8007e30:	200011d4 	.word	0x200011d4
 8007e34:	20001664 	.word	0x20001664
 8007e38:	200011d0 	.word	0x200011d0
 8007e3c:	200016b8 	.word	0x200016b8

08007e40 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007e40:	b480      	push	{r7}
 8007e42:	b083      	sub	sp, #12
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007e48:	4b06      	ldr	r3, [pc, #24]	@ (8007e64 <vTaskInternalSetTimeOutState+0x24>)
 8007e4a:	681a      	ldr	r2, [r3, #0]
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007e50:	4b05      	ldr	r3, [pc, #20]	@ (8007e68 <vTaskInternalSetTimeOutState+0x28>)
 8007e52:	681a      	ldr	r2, [r3, #0]
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	605a      	str	r2, [r3, #4]
}
 8007e58:	bf00      	nop
 8007e5a:	370c      	adds	r7, #12
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e62:	4770      	bx	lr
 8007e64:	200016bc 	.word	0x200016bc
 8007e68:	200016a8 	.word	0x200016a8

08007e6c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b088      	sub	sp, #32
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
 8007e74:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d10d      	bne.n	8007e98 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 8007e7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e80:	b672      	cpsid	i
 8007e82:	f383 8811 	msr	BASEPRI, r3
 8007e86:	f3bf 8f6f 	isb	sy
 8007e8a:	f3bf 8f4f 	dsb	sy
 8007e8e:	b662      	cpsie	i
 8007e90:	613b      	str	r3, [r7, #16]
}
 8007e92:	bf00      	nop
 8007e94:	bf00      	nop
 8007e96:	e7fd      	b.n	8007e94 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d10d      	bne.n	8007eba <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 8007e9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ea2:	b672      	cpsid	i
 8007ea4:	f383 8811 	msr	BASEPRI, r3
 8007ea8:	f3bf 8f6f 	isb	sy
 8007eac:	f3bf 8f4f 	dsb	sy
 8007eb0:	b662      	cpsie	i
 8007eb2:	60fb      	str	r3, [r7, #12]
}
 8007eb4:	bf00      	nop
 8007eb6:	bf00      	nop
 8007eb8:	e7fd      	b.n	8007eb6 <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 8007eba:	f000 ff87 	bl	8008dcc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007ebe:	4b1d      	ldr	r3, [pc, #116]	@ (8007f34 <xTaskCheckForTimeOut+0xc8>)
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	685b      	ldr	r3, [r3, #4]
 8007ec8:	69ba      	ldr	r2, [r7, #24]
 8007eca:	1ad3      	subs	r3, r2, r3
 8007ecc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ed6:	d102      	bne.n	8007ede <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007ed8:	2300      	movs	r3, #0
 8007eda:	61fb      	str	r3, [r7, #28]
 8007edc:	e023      	b.n	8007f26 <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681a      	ldr	r2, [r3, #0]
 8007ee2:	4b15      	ldr	r3, [pc, #84]	@ (8007f38 <xTaskCheckForTimeOut+0xcc>)
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	429a      	cmp	r2, r3
 8007ee8:	d007      	beq.n	8007efa <xTaskCheckForTimeOut+0x8e>
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	685b      	ldr	r3, [r3, #4]
 8007eee:	69ba      	ldr	r2, [r7, #24]
 8007ef0:	429a      	cmp	r2, r3
 8007ef2:	d302      	bcc.n	8007efa <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007ef4:	2301      	movs	r3, #1
 8007ef6:	61fb      	str	r3, [r7, #28]
 8007ef8:	e015      	b.n	8007f26 <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	697a      	ldr	r2, [r7, #20]
 8007f00:	429a      	cmp	r2, r3
 8007f02:	d20b      	bcs.n	8007f1c <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	681a      	ldr	r2, [r3, #0]
 8007f08:	697b      	ldr	r3, [r7, #20]
 8007f0a:	1ad2      	subs	r2, r2, r3
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007f10:	6878      	ldr	r0, [r7, #4]
 8007f12:	f7ff ff95 	bl	8007e40 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007f16:	2300      	movs	r3, #0
 8007f18:	61fb      	str	r3, [r7, #28]
 8007f1a:	e004      	b.n	8007f26 <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	2200      	movs	r2, #0
 8007f20:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007f22:	2301      	movs	r3, #1
 8007f24:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007f26:	f000 ff87 	bl	8008e38 <vPortExitCritical>

	return xReturn;
 8007f2a:	69fb      	ldr	r3, [r7, #28]
}
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	3720      	adds	r7, #32
 8007f30:	46bd      	mov	sp, r7
 8007f32:	bd80      	pop	{r7, pc}
 8007f34:	200016a8 	.word	0x200016a8
 8007f38:	200016bc 	.word	0x200016bc

08007f3c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007f3c:	b480      	push	{r7}
 8007f3e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007f40:	4b03      	ldr	r3, [pc, #12]	@ (8007f50 <vTaskMissedYield+0x14>)
 8007f42:	2201      	movs	r2, #1
 8007f44:	601a      	str	r2, [r3, #0]
}
 8007f46:	bf00      	nop
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4e:	4770      	bx	lr
 8007f50:	200016b8 	.word	0x200016b8

08007f54 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b082      	sub	sp, #8
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007f5c:	f000 f852 	bl	8008004 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007f60:	4b06      	ldr	r3, [pc, #24]	@ (8007f7c <prvIdleTask+0x28>)
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	2b01      	cmp	r3, #1
 8007f66:	d9f9      	bls.n	8007f5c <prvIdleTask+0x8>
			{
				taskYIELD();
 8007f68:	4b05      	ldr	r3, [pc, #20]	@ (8007f80 <prvIdleTask+0x2c>)
 8007f6a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007f6e:	601a      	str	r2, [r3, #0]
 8007f70:	f3bf 8f4f 	dsb	sy
 8007f74:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007f78:	e7f0      	b.n	8007f5c <prvIdleTask+0x8>
 8007f7a:	bf00      	nop
 8007f7c:	200011d4 	.word	0x200011d4
 8007f80:	e000ed04 	.word	0xe000ed04

08007f84 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b082      	sub	sp, #8
 8007f88:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	607b      	str	r3, [r7, #4]
 8007f8e:	e00c      	b.n	8007faa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007f90:	687a      	ldr	r2, [r7, #4]
 8007f92:	4613      	mov	r3, r2
 8007f94:	009b      	lsls	r3, r3, #2
 8007f96:	4413      	add	r3, r2
 8007f98:	009b      	lsls	r3, r3, #2
 8007f9a:	4a12      	ldr	r2, [pc, #72]	@ (8007fe4 <prvInitialiseTaskLists+0x60>)
 8007f9c:	4413      	add	r3, r2
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	f7fe f916 	bl	80061d0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	3301      	adds	r3, #1
 8007fa8:	607b      	str	r3, [r7, #4]
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	2b37      	cmp	r3, #55	@ 0x37
 8007fae:	d9ef      	bls.n	8007f90 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007fb0:	480d      	ldr	r0, [pc, #52]	@ (8007fe8 <prvInitialiseTaskLists+0x64>)
 8007fb2:	f7fe f90d 	bl	80061d0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007fb6:	480d      	ldr	r0, [pc, #52]	@ (8007fec <prvInitialiseTaskLists+0x68>)
 8007fb8:	f7fe f90a 	bl	80061d0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007fbc:	480c      	ldr	r0, [pc, #48]	@ (8007ff0 <prvInitialiseTaskLists+0x6c>)
 8007fbe:	f7fe f907 	bl	80061d0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007fc2:	480c      	ldr	r0, [pc, #48]	@ (8007ff4 <prvInitialiseTaskLists+0x70>)
 8007fc4:	f7fe f904 	bl	80061d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007fc8:	480b      	ldr	r0, [pc, #44]	@ (8007ff8 <prvInitialiseTaskLists+0x74>)
 8007fca:	f7fe f901 	bl	80061d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007fce:	4b0b      	ldr	r3, [pc, #44]	@ (8007ffc <prvInitialiseTaskLists+0x78>)
 8007fd0:	4a05      	ldr	r2, [pc, #20]	@ (8007fe8 <prvInitialiseTaskLists+0x64>)
 8007fd2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007fd4:	4b0a      	ldr	r3, [pc, #40]	@ (8008000 <prvInitialiseTaskLists+0x7c>)
 8007fd6:	4a05      	ldr	r2, [pc, #20]	@ (8007fec <prvInitialiseTaskLists+0x68>)
 8007fd8:	601a      	str	r2, [r3, #0]
}
 8007fda:	bf00      	nop
 8007fdc:	3708      	adds	r7, #8
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	bd80      	pop	{r7, pc}
 8007fe2:	bf00      	nop
 8007fe4:	200011d4 	.word	0x200011d4
 8007fe8:	20001634 	.word	0x20001634
 8007fec:	20001648 	.word	0x20001648
 8007ff0:	20001664 	.word	0x20001664
 8007ff4:	20001678 	.word	0x20001678
 8007ff8:	20001690 	.word	0x20001690
 8007ffc:	2000165c 	.word	0x2000165c
 8008000:	20001660 	.word	0x20001660

08008004 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b082      	sub	sp, #8
 8008008:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800800a:	e019      	b.n	8008040 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800800c:	f000 fede 	bl	8008dcc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008010:	4b10      	ldr	r3, [pc, #64]	@ (8008054 <prvCheckTasksWaitingTermination+0x50>)
 8008012:	68db      	ldr	r3, [r3, #12]
 8008014:	68db      	ldr	r3, [r3, #12]
 8008016:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	3304      	adds	r3, #4
 800801c:	4618      	mov	r0, r3
 800801e:	f7fe f961 	bl	80062e4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008022:	4b0d      	ldr	r3, [pc, #52]	@ (8008058 <prvCheckTasksWaitingTermination+0x54>)
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	3b01      	subs	r3, #1
 8008028:	4a0b      	ldr	r2, [pc, #44]	@ (8008058 <prvCheckTasksWaitingTermination+0x54>)
 800802a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800802c:	4b0b      	ldr	r3, [pc, #44]	@ (800805c <prvCheckTasksWaitingTermination+0x58>)
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	3b01      	subs	r3, #1
 8008032:	4a0a      	ldr	r2, [pc, #40]	@ (800805c <prvCheckTasksWaitingTermination+0x58>)
 8008034:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008036:	f000 feff 	bl	8008e38 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	f000 f810 	bl	8008060 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008040:	4b06      	ldr	r3, [pc, #24]	@ (800805c <prvCheckTasksWaitingTermination+0x58>)
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d1e1      	bne.n	800800c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008048:	bf00      	nop
 800804a:	bf00      	nop
 800804c:	3708      	adds	r7, #8
 800804e:	46bd      	mov	sp, r7
 8008050:	bd80      	pop	{r7, pc}
 8008052:	bf00      	nop
 8008054:	20001678 	.word	0x20001678
 8008058:	200016a4 	.word	0x200016a4
 800805c:	2000168c 	.word	0x2000168c

08008060 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008060:	b580      	push	{r7, lr}
 8008062:	b084      	sub	sp, #16
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	3354      	adds	r3, #84	@ 0x54
 800806c:	4618      	mov	r0, r3
 800806e:	f002 f979 	bl	800a364 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008078:	2b00      	cmp	r3, #0
 800807a:	d108      	bne.n	800808e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008080:	4618      	mov	r0, r3
 8008082:	f001 f89f 	bl	80091c4 <vPortFree>
				vPortFree( pxTCB );
 8008086:	6878      	ldr	r0, [r7, #4]
 8008088:	f001 f89c 	bl	80091c4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800808c:	e01b      	b.n	80080c6 <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008094:	2b01      	cmp	r3, #1
 8008096:	d103      	bne.n	80080a0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008098:	6878      	ldr	r0, [r7, #4]
 800809a:	f001 f893 	bl	80091c4 <vPortFree>
	}
 800809e:	e012      	b.n	80080c6 <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80080a6:	2b02      	cmp	r3, #2
 80080a8:	d00d      	beq.n	80080c6 <prvDeleteTCB+0x66>
	__asm volatile
 80080aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080ae:	b672      	cpsid	i
 80080b0:	f383 8811 	msr	BASEPRI, r3
 80080b4:	f3bf 8f6f 	isb	sy
 80080b8:	f3bf 8f4f 	dsb	sy
 80080bc:	b662      	cpsie	i
 80080be:	60fb      	str	r3, [r7, #12]
}
 80080c0:	bf00      	nop
 80080c2:	bf00      	nop
 80080c4:	e7fd      	b.n	80080c2 <prvDeleteTCB+0x62>
	}
 80080c6:	bf00      	nop
 80080c8:	3710      	adds	r7, #16
 80080ca:	46bd      	mov	sp, r7
 80080cc:	bd80      	pop	{r7, pc}
	...

080080d0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80080d0:	b480      	push	{r7}
 80080d2:	b083      	sub	sp, #12
 80080d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80080d6:	4b0c      	ldr	r3, [pc, #48]	@ (8008108 <prvResetNextTaskUnblockTime+0x38>)
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d104      	bne.n	80080ea <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80080e0:	4b0a      	ldr	r3, [pc, #40]	@ (800810c <prvResetNextTaskUnblockTime+0x3c>)
 80080e2:	f04f 32ff 	mov.w	r2, #4294967295
 80080e6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80080e8:	e008      	b.n	80080fc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80080ea:	4b07      	ldr	r3, [pc, #28]	@ (8008108 <prvResetNextTaskUnblockTime+0x38>)
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	68db      	ldr	r3, [r3, #12]
 80080f0:	68db      	ldr	r3, [r3, #12]
 80080f2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	685b      	ldr	r3, [r3, #4]
 80080f8:	4a04      	ldr	r2, [pc, #16]	@ (800810c <prvResetNextTaskUnblockTime+0x3c>)
 80080fa:	6013      	str	r3, [r2, #0]
}
 80080fc:	bf00      	nop
 80080fe:	370c      	adds	r7, #12
 8008100:	46bd      	mov	sp, r7
 8008102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008106:	4770      	bx	lr
 8008108:	2000165c 	.word	0x2000165c
 800810c:	200016c4 	.word	0x200016c4

08008110 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008110:	b480      	push	{r7}
 8008112:	b083      	sub	sp, #12
 8008114:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008116:	4b0b      	ldr	r3, [pc, #44]	@ (8008144 <xTaskGetSchedulerState+0x34>)
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d102      	bne.n	8008124 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800811e:	2301      	movs	r3, #1
 8008120:	607b      	str	r3, [r7, #4]
 8008122:	e008      	b.n	8008136 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008124:	4b08      	ldr	r3, [pc, #32]	@ (8008148 <xTaskGetSchedulerState+0x38>)
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d102      	bne.n	8008132 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800812c:	2302      	movs	r3, #2
 800812e:	607b      	str	r3, [r7, #4]
 8008130:	e001      	b.n	8008136 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008132:	2300      	movs	r3, #0
 8008134:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008136:	687b      	ldr	r3, [r7, #4]
	}
 8008138:	4618      	mov	r0, r3
 800813a:	370c      	adds	r7, #12
 800813c:	46bd      	mov	sp, r7
 800813e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008142:	4770      	bx	lr
 8008144:	200016b0 	.word	0x200016b0
 8008148:	200016cc 	.word	0x200016cc

0800814c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800814c:	b580      	push	{r7, lr}
 800814e:	b084      	sub	sp, #16
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008158:	2300      	movs	r3, #0
 800815a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d051      	beq.n	8008206 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008162:	68bb      	ldr	r3, [r7, #8]
 8008164:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008166:	4b2a      	ldr	r3, [pc, #168]	@ (8008210 <xTaskPriorityInherit+0xc4>)
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800816c:	429a      	cmp	r2, r3
 800816e:	d241      	bcs.n	80081f4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008170:	68bb      	ldr	r3, [r7, #8]
 8008172:	699b      	ldr	r3, [r3, #24]
 8008174:	2b00      	cmp	r3, #0
 8008176:	db06      	blt.n	8008186 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008178:	4b25      	ldr	r3, [pc, #148]	@ (8008210 <xTaskPriorityInherit+0xc4>)
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800817e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008182:	68bb      	ldr	r3, [r7, #8]
 8008184:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008186:	68bb      	ldr	r3, [r7, #8]
 8008188:	6959      	ldr	r1, [r3, #20]
 800818a:	68bb      	ldr	r3, [r7, #8]
 800818c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800818e:	4613      	mov	r3, r2
 8008190:	009b      	lsls	r3, r3, #2
 8008192:	4413      	add	r3, r2
 8008194:	009b      	lsls	r3, r3, #2
 8008196:	4a1f      	ldr	r2, [pc, #124]	@ (8008214 <xTaskPriorityInherit+0xc8>)
 8008198:	4413      	add	r3, r2
 800819a:	4299      	cmp	r1, r3
 800819c:	d122      	bne.n	80081e4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800819e:	68bb      	ldr	r3, [r7, #8]
 80081a0:	3304      	adds	r3, #4
 80081a2:	4618      	mov	r0, r3
 80081a4:	f7fe f89e 	bl	80062e4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80081a8:	4b19      	ldr	r3, [pc, #100]	@ (8008210 <xTaskPriorityInherit+0xc4>)
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081ae:	68bb      	ldr	r3, [r7, #8]
 80081b0:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80081b2:	68bb      	ldr	r3, [r7, #8]
 80081b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081b6:	4b18      	ldr	r3, [pc, #96]	@ (8008218 <xTaskPriorityInherit+0xcc>)
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	429a      	cmp	r2, r3
 80081bc:	d903      	bls.n	80081c6 <xTaskPriorityInherit+0x7a>
 80081be:	68bb      	ldr	r3, [r7, #8]
 80081c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081c2:	4a15      	ldr	r2, [pc, #84]	@ (8008218 <xTaskPriorityInherit+0xcc>)
 80081c4:	6013      	str	r3, [r2, #0]
 80081c6:	68bb      	ldr	r3, [r7, #8]
 80081c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081ca:	4613      	mov	r3, r2
 80081cc:	009b      	lsls	r3, r3, #2
 80081ce:	4413      	add	r3, r2
 80081d0:	009b      	lsls	r3, r3, #2
 80081d2:	4a10      	ldr	r2, [pc, #64]	@ (8008214 <xTaskPriorityInherit+0xc8>)
 80081d4:	441a      	add	r2, r3
 80081d6:	68bb      	ldr	r3, [r7, #8]
 80081d8:	3304      	adds	r3, #4
 80081da:	4619      	mov	r1, r3
 80081dc:	4610      	mov	r0, r2
 80081de:	f7fe f824 	bl	800622a <vListInsertEnd>
 80081e2:	e004      	b.n	80081ee <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80081e4:	4b0a      	ldr	r3, [pc, #40]	@ (8008210 <xTaskPriorityInherit+0xc4>)
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081ea:	68bb      	ldr	r3, [r7, #8]
 80081ec:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80081ee:	2301      	movs	r3, #1
 80081f0:	60fb      	str	r3, [r7, #12]
 80081f2:	e008      	b.n	8008206 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80081f4:	68bb      	ldr	r3, [r7, #8]
 80081f6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80081f8:	4b05      	ldr	r3, [pc, #20]	@ (8008210 <xTaskPriorityInherit+0xc4>)
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081fe:	429a      	cmp	r2, r3
 8008200:	d201      	bcs.n	8008206 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008202:	2301      	movs	r3, #1
 8008204:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008206:	68fb      	ldr	r3, [r7, #12]
	}
 8008208:	4618      	mov	r0, r3
 800820a:	3710      	adds	r7, #16
 800820c:	46bd      	mov	sp, r7
 800820e:	bd80      	pop	{r7, pc}
 8008210:	200011d0 	.word	0x200011d0
 8008214:	200011d4 	.word	0x200011d4
 8008218:	200016ac 	.word	0x200016ac

0800821c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800821c:	b580      	push	{r7, lr}
 800821e:	b086      	sub	sp, #24
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008228:	2300      	movs	r3, #0
 800822a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d05c      	beq.n	80082ec <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008232:	4b31      	ldr	r3, [pc, #196]	@ (80082f8 <xTaskPriorityDisinherit+0xdc>)
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	693a      	ldr	r2, [r7, #16]
 8008238:	429a      	cmp	r2, r3
 800823a:	d00d      	beq.n	8008258 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 800823c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008240:	b672      	cpsid	i
 8008242:	f383 8811 	msr	BASEPRI, r3
 8008246:	f3bf 8f6f 	isb	sy
 800824a:	f3bf 8f4f 	dsb	sy
 800824e:	b662      	cpsie	i
 8008250:	60fb      	str	r3, [r7, #12]
}
 8008252:	bf00      	nop
 8008254:	bf00      	nop
 8008256:	e7fd      	b.n	8008254 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8008258:	693b      	ldr	r3, [r7, #16]
 800825a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800825c:	2b00      	cmp	r3, #0
 800825e:	d10d      	bne.n	800827c <xTaskPriorityDisinherit+0x60>
	__asm volatile
 8008260:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008264:	b672      	cpsid	i
 8008266:	f383 8811 	msr	BASEPRI, r3
 800826a:	f3bf 8f6f 	isb	sy
 800826e:	f3bf 8f4f 	dsb	sy
 8008272:	b662      	cpsie	i
 8008274:	60bb      	str	r3, [r7, #8]
}
 8008276:	bf00      	nop
 8008278:	bf00      	nop
 800827a:	e7fd      	b.n	8008278 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 800827c:	693b      	ldr	r3, [r7, #16]
 800827e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008280:	1e5a      	subs	r2, r3, #1
 8008282:	693b      	ldr	r3, [r7, #16]
 8008284:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008286:	693b      	ldr	r3, [r7, #16]
 8008288:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800828a:	693b      	ldr	r3, [r7, #16]
 800828c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800828e:	429a      	cmp	r2, r3
 8008290:	d02c      	beq.n	80082ec <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008292:	693b      	ldr	r3, [r7, #16]
 8008294:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008296:	2b00      	cmp	r3, #0
 8008298:	d128      	bne.n	80082ec <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800829a:	693b      	ldr	r3, [r7, #16]
 800829c:	3304      	adds	r3, #4
 800829e:	4618      	mov	r0, r3
 80082a0:	f7fe f820 	bl	80062e4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80082a4:	693b      	ldr	r3, [r7, #16]
 80082a6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80082a8:	693b      	ldr	r3, [r7, #16]
 80082aa:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80082ac:	693b      	ldr	r3, [r7, #16]
 80082ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082b0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80082b4:	693b      	ldr	r3, [r7, #16]
 80082b6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80082b8:	693b      	ldr	r3, [r7, #16]
 80082ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80082bc:	4b0f      	ldr	r3, [pc, #60]	@ (80082fc <xTaskPriorityDisinherit+0xe0>)
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	429a      	cmp	r2, r3
 80082c2:	d903      	bls.n	80082cc <xTaskPriorityDisinherit+0xb0>
 80082c4:	693b      	ldr	r3, [r7, #16]
 80082c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082c8:	4a0c      	ldr	r2, [pc, #48]	@ (80082fc <xTaskPriorityDisinherit+0xe0>)
 80082ca:	6013      	str	r3, [r2, #0]
 80082cc:	693b      	ldr	r3, [r7, #16]
 80082ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80082d0:	4613      	mov	r3, r2
 80082d2:	009b      	lsls	r3, r3, #2
 80082d4:	4413      	add	r3, r2
 80082d6:	009b      	lsls	r3, r3, #2
 80082d8:	4a09      	ldr	r2, [pc, #36]	@ (8008300 <xTaskPriorityDisinherit+0xe4>)
 80082da:	441a      	add	r2, r3
 80082dc:	693b      	ldr	r3, [r7, #16]
 80082de:	3304      	adds	r3, #4
 80082e0:	4619      	mov	r1, r3
 80082e2:	4610      	mov	r0, r2
 80082e4:	f7fd ffa1 	bl	800622a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80082e8:	2301      	movs	r3, #1
 80082ea:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80082ec:	697b      	ldr	r3, [r7, #20]
	}
 80082ee:	4618      	mov	r0, r3
 80082f0:	3718      	adds	r7, #24
 80082f2:	46bd      	mov	sp, r7
 80082f4:	bd80      	pop	{r7, pc}
 80082f6:	bf00      	nop
 80082f8:	200011d0 	.word	0x200011d0
 80082fc:	200016ac 	.word	0x200016ac
 8008300:	200011d4 	.word	0x200011d4

08008304 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008304:	b580      	push	{r7, lr}
 8008306:	b088      	sub	sp, #32
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
 800830c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008312:	2301      	movs	r3, #1
 8008314:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d070      	beq.n	80083fe <vTaskPriorityDisinheritAfterTimeout+0xfa>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800831c:	69bb      	ldr	r3, [r7, #24]
 800831e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008320:	2b00      	cmp	r3, #0
 8008322:	d10d      	bne.n	8008340 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 8008324:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008328:	b672      	cpsid	i
 800832a:	f383 8811 	msr	BASEPRI, r3
 800832e:	f3bf 8f6f 	isb	sy
 8008332:	f3bf 8f4f 	dsb	sy
 8008336:	b662      	cpsie	i
 8008338:	60fb      	str	r3, [r7, #12]
}
 800833a:	bf00      	nop
 800833c:	bf00      	nop
 800833e:	e7fd      	b.n	800833c <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008340:	69bb      	ldr	r3, [r7, #24]
 8008342:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008344:	683a      	ldr	r2, [r7, #0]
 8008346:	429a      	cmp	r2, r3
 8008348:	d902      	bls.n	8008350 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800834a:	683b      	ldr	r3, [r7, #0]
 800834c:	61fb      	str	r3, [r7, #28]
 800834e:	e002      	b.n	8008356 <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008350:	69bb      	ldr	r3, [r7, #24]
 8008352:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008354:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008356:	69bb      	ldr	r3, [r7, #24]
 8008358:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800835a:	69fa      	ldr	r2, [r7, #28]
 800835c:	429a      	cmp	r2, r3
 800835e:	d04e      	beq.n	80083fe <vTaskPriorityDisinheritAfterTimeout+0xfa>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008360:	69bb      	ldr	r3, [r7, #24]
 8008362:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008364:	697a      	ldr	r2, [r7, #20]
 8008366:	429a      	cmp	r2, r3
 8008368:	d149      	bne.n	80083fe <vTaskPriorityDisinheritAfterTimeout+0xfa>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800836a:	4b27      	ldr	r3, [pc, #156]	@ (8008408 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	69ba      	ldr	r2, [r7, #24]
 8008370:	429a      	cmp	r2, r3
 8008372:	d10d      	bne.n	8008390 <vTaskPriorityDisinheritAfterTimeout+0x8c>
	__asm volatile
 8008374:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008378:	b672      	cpsid	i
 800837a:	f383 8811 	msr	BASEPRI, r3
 800837e:	f3bf 8f6f 	isb	sy
 8008382:	f3bf 8f4f 	dsb	sy
 8008386:	b662      	cpsie	i
 8008388:	60bb      	str	r3, [r7, #8]
}
 800838a:	bf00      	nop
 800838c:	bf00      	nop
 800838e:	e7fd      	b.n	800838c <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008390:	69bb      	ldr	r3, [r7, #24]
 8008392:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008394:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008396:	69bb      	ldr	r3, [r7, #24]
 8008398:	69fa      	ldr	r2, [r7, #28]
 800839a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800839c:	69bb      	ldr	r3, [r7, #24]
 800839e:	699b      	ldr	r3, [r3, #24]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	db04      	blt.n	80083ae <vTaskPriorityDisinheritAfterTimeout+0xaa>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80083a4:	69fb      	ldr	r3, [r7, #28]
 80083a6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80083aa:	69bb      	ldr	r3, [r7, #24]
 80083ac:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80083ae:	69bb      	ldr	r3, [r7, #24]
 80083b0:	6959      	ldr	r1, [r3, #20]
 80083b2:	693a      	ldr	r2, [r7, #16]
 80083b4:	4613      	mov	r3, r2
 80083b6:	009b      	lsls	r3, r3, #2
 80083b8:	4413      	add	r3, r2
 80083ba:	009b      	lsls	r3, r3, #2
 80083bc:	4a13      	ldr	r2, [pc, #76]	@ (800840c <vTaskPriorityDisinheritAfterTimeout+0x108>)
 80083be:	4413      	add	r3, r2
 80083c0:	4299      	cmp	r1, r3
 80083c2:	d11c      	bne.n	80083fe <vTaskPriorityDisinheritAfterTimeout+0xfa>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80083c4:	69bb      	ldr	r3, [r7, #24]
 80083c6:	3304      	adds	r3, #4
 80083c8:	4618      	mov	r0, r3
 80083ca:	f7fd ff8b 	bl	80062e4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80083ce:	69bb      	ldr	r3, [r7, #24]
 80083d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083d2:	4b0f      	ldr	r3, [pc, #60]	@ (8008410 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	429a      	cmp	r2, r3
 80083d8:	d903      	bls.n	80083e2 <vTaskPriorityDisinheritAfterTimeout+0xde>
 80083da:	69bb      	ldr	r3, [r7, #24]
 80083dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083de:	4a0c      	ldr	r2, [pc, #48]	@ (8008410 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 80083e0:	6013      	str	r3, [r2, #0]
 80083e2:	69bb      	ldr	r3, [r7, #24]
 80083e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083e6:	4613      	mov	r3, r2
 80083e8:	009b      	lsls	r3, r3, #2
 80083ea:	4413      	add	r3, r2
 80083ec:	009b      	lsls	r3, r3, #2
 80083ee:	4a07      	ldr	r2, [pc, #28]	@ (800840c <vTaskPriorityDisinheritAfterTimeout+0x108>)
 80083f0:	441a      	add	r2, r3
 80083f2:	69bb      	ldr	r3, [r7, #24]
 80083f4:	3304      	adds	r3, #4
 80083f6:	4619      	mov	r1, r3
 80083f8:	4610      	mov	r0, r2
 80083fa:	f7fd ff16 	bl	800622a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80083fe:	bf00      	nop
 8008400:	3720      	adds	r7, #32
 8008402:	46bd      	mov	sp, r7
 8008404:	bd80      	pop	{r7, pc}
 8008406:	bf00      	nop
 8008408:	200011d0 	.word	0x200011d0
 800840c:	200011d4 	.word	0x200011d4
 8008410:	200016ac 	.word	0x200016ac

08008414 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008414:	b480      	push	{r7}
 8008416:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008418:	4b07      	ldr	r3, [pc, #28]	@ (8008438 <pvTaskIncrementMutexHeldCount+0x24>)
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d004      	beq.n	800842a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008420:	4b05      	ldr	r3, [pc, #20]	@ (8008438 <pvTaskIncrementMutexHeldCount+0x24>)
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008426:	3201      	adds	r2, #1
 8008428:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800842a:	4b03      	ldr	r3, [pc, #12]	@ (8008438 <pvTaskIncrementMutexHeldCount+0x24>)
 800842c:	681b      	ldr	r3, [r3, #0]
	}
 800842e:	4618      	mov	r0, r3
 8008430:	46bd      	mov	sp, r7
 8008432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008436:	4770      	bx	lr
 8008438:	200011d0 	.word	0x200011d0

0800843c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b084      	sub	sp, #16
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
 8008444:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008446:	4b21      	ldr	r3, [pc, #132]	@ (80084cc <prvAddCurrentTaskToDelayedList+0x90>)
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800844c:	4b20      	ldr	r3, [pc, #128]	@ (80084d0 <prvAddCurrentTaskToDelayedList+0x94>)
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	3304      	adds	r3, #4
 8008452:	4618      	mov	r0, r3
 8008454:	f7fd ff46 	bl	80062e4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800845e:	d10a      	bne.n	8008476 <prvAddCurrentTaskToDelayedList+0x3a>
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d007      	beq.n	8008476 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008466:	4b1a      	ldr	r3, [pc, #104]	@ (80084d0 <prvAddCurrentTaskToDelayedList+0x94>)
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	3304      	adds	r3, #4
 800846c:	4619      	mov	r1, r3
 800846e:	4819      	ldr	r0, [pc, #100]	@ (80084d4 <prvAddCurrentTaskToDelayedList+0x98>)
 8008470:	f7fd fedb 	bl	800622a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008474:	e026      	b.n	80084c4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008476:	68fa      	ldr	r2, [r7, #12]
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	4413      	add	r3, r2
 800847c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800847e:	4b14      	ldr	r3, [pc, #80]	@ (80084d0 <prvAddCurrentTaskToDelayedList+0x94>)
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	68ba      	ldr	r2, [r7, #8]
 8008484:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008486:	68ba      	ldr	r2, [r7, #8]
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	429a      	cmp	r2, r3
 800848c:	d209      	bcs.n	80084a2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800848e:	4b12      	ldr	r3, [pc, #72]	@ (80084d8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008490:	681a      	ldr	r2, [r3, #0]
 8008492:	4b0f      	ldr	r3, [pc, #60]	@ (80084d0 <prvAddCurrentTaskToDelayedList+0x94>)
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	3304      	adds	r3, #4
 8008498:	4619      	mov	r1, r3
 800849a:	4610      	mov	r0, r2
 800849c:	f7fd fee9 	bl	8006272 <vListInsert>
}
 80084a0:	e010      	b.n	80084c4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80084a2:	4b0e      	ldr	r3, [pc, #56]	@ (80084dc <prvAddCurrentTaskToDelayedList+0xa0>)
 80084a4:	681a      	ldr	r2, [r3, #0]
 80084a6:	4b0a      	ldr	r3, [pc, #40]	@ (80084d0 <prvAddCurrentTaskToDelayedList+0x94>)
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	3304      	adds	r3, #4
 80084ac:	4619      	mov	r1, r3
 80084ae:	4610      	mov	r0, r2
 80084b0:	f7fd fedf 	bl	8006272 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80084b4:	4b0a      	ldr	r3, [pc, #40]	@ (80084e0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	68ba      	ldr	r2, [r7, #8]
 80084ba:	429a      	cmp	r2, r3
 80084bc:	d202      	bcs.n	80084c4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80084be:	4a08      	ldr	r2, [pc, #32]	@ (80084e0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80084c0:	68bb      	ldr	r3, [r7, #8]
 80084c2:	6013      	str	r3, [r2, #0]
}
 80084c4:	bf00      	nop
 80084c6:	3710      	adds	r7, #16
 80084c8:	46bd      	mov	sp, r7
 80084ca:	bd80      	pop	{r7, pc}
 80084cc:	200016a8 	.word	0x200016a8
 80084d0:	200011d0 	.word	0x200011d0
 80084d4:	20001690 	.word	0x20001690
 80084d8:	20001660 	.word	0x20001660
 80084dc:	2000165c 	.word	0x2000165c
 80084e0:	200016c4 	.word	0x200016c4

080084e4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b08a      	sub	sp, #40	@ 0x28
 80084e8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80084ea:	2300      	movs	r3, #0
 80084ec:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80084ee:	f000 fb21 	bl	8008b34 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80084f2:	4b1e      	ldr	r3, [pc, #120]	@ (800856c <xTimerCreateTimerTask+0x88>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d021      	beq.n	800853e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80084fa:	2300      	movs	r3, #0
 80084fc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80084fe:	2300      	movs	r3, #0
 8008500:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008502:	1d3a      	adds	r2, r7, #4
 8008504:	f107 0108 	add.w	r1, r7, #8
 8008508:	f107 030c 	add.w	r3, r7, #12
 800850c:	4618      	mov	r0, r3
 800850e:	f7fd fe45 	bl	800619c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008512:	6879      	ldr	r1, [r7, #4]
 8008514:	68bb      	ldr	r3, [r7, #8]
 8008516:	68fa      	ldr	r2, [r7, #12]
 8008518:	9202      	str	r2, [sp, #8]
 800851a:	9301      	str	r3, [sp, #4]
 800851c:	2302      	movs	r3, #2
 800851e:	9300      	str	r3, [sp, #0]
 8008520:	2300      	movs	r3, #0
 8008522:	460a      	mov	r2, r1
 8008524:	4912      	ldr	r1, [pc, #72]	@ (8008570 <xTimerCreateTimerTask+0x8c>)
 8008526:	4813      	ldr	r0, [pc, #76]	@ (8008574 <xTimerCreateTimerTask+0x90>)
 8008528:	f7fe ff7a 	bl	8007420 <xTaskCreateStatic>
 800852c:	4603      	mov	r3, r0
 800852e:	4a12      	ldr	r2, [pc, #72]	@ (8008578 <xTimerCreateTimerTask+0x94>)
 8008530:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008532:	4b11      	ldr	r3, [pc, #68]	@ (8008578 <xTimerCreateTimerTask+0x94>)
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d001      	beq.n	800853e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800853a:	2301      	movs	r3, #1
 800853c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800853e:	697b      	ldr	r3, [r7, #20]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d10d      	bne.n	8008560 <xTimerCreateTimerTask+0x7c>
	__asm volatile
 8008544:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008548:	b672      	cpsid	i
 800854a:	f383 8811 	msr	BASEPRI, r3
 800854e:	f3bf 8f6f 	isb	sy
 8008552:	f3bf 8f4f 	dsb	sy
 8008556:	b662      	cpsie	i
 8008558:	613b      	str	r3, [r7, #16]
}
 800855a:	bf00      	nop
 800855c:	bf00      	nop
 800855e:	e7fd      	b.n	800855c <xTimerCreateTimerTask+0x78>
	return xReturn;
 8008560:	697b      	ldr	r3, [r7, #20]
}
 8008562:	4618      	mov	r0, r3
 8008564:	3718      	adds	r7, #24
 8008566:	46bd      	mov	sp, r7
 8008568:	bd80      	pop	{r7, pc}
 800856a:	bf00      	nop
 800856c:	20001700 	.word	0x20001700
 8008570:	0800db44 	.word	0x0800db44
 8008574:	080086bd 	.word	0x080086bd
 8008578:	20001704 	.word	0x20001704

0800857c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b08a      	sub	sp, #40	@ 0x28
 8008580:	af00      	add	r7, sp, #0
 8008582:	60f8      	str	r0, [r7, #12]
 8008584:	60b9      	str	r1, [r7, #8]
 8008586:	607a      	str	r2, [r7, #4]
 8008588:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800858a:	2300      	movs	r3, #0
 800858c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d10d      	bne.n	80085b0 <xTimerGenericCommand+0x34>
	__asm volatile
 8008594:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008598:	b672      	cpsid	i
 800859a:	f383 8811 	msr	BASEPRI, r3
 800859e:	f3bf 8f6f 	isb	sy
 80085a2:	f3bf 8f4f 	dsb	sy
 80085a6:	b662      	cpsie	i
 80085a8:	623b      	str	r3, [r7, #32]
}
 80085aa:	bf00      	nop
 80085ac:	bf00      	nop
 80085ae:	e7fd      	b.n	80085ac <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80085b0:	4b19      	ldr	r3, [pc, #100]	@ (8008618 <xTimerGenericCommand+0x9c>)
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d02a      	beq.n	800860e <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80085b8:	68bb      	ldr	r3, [r7, #8]
 80085ba:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80085c4:	68bb      	ldr	r3, [r7, #8]
 80085c6:	2b05      	cmp	r3, #5
 80085c8:	dc18      	bgt.n	80085fc <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80085ca:	f7ff fda1 	bl	8008110 <xTaskGetSchedulerState>
 80085ce:	4603      	mov	r3, r0
 80085d0:	2b02      	cmp	r3, #2
 80085d2:	d109      	bne.n	80085e8 <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80085d4:	4b10      	ldr	r3, [pc, #64]	@ (8008618 <xTimerGenericCommand+0x9c>)
 80085d6:	6818      	ldr	r0, [r3, #0]
 80085d8:	f107 0110 	add.w	r1, r7, #16
 80085dc:	2300      	movs	r3, #0
 80085de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80085e0:	f7fe f87a 	bl	80066d8 <xQueueGenericSend>
 80085e4:	6278      	str	r0, [r7, #36]	@ 0x24
 80085e6:	e012      	b.n	800860e <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80085e8:	4b0b      	ldr	r3, [pc, #44]	@ (8008618 <xTimerGenericCommand+0x9c>)
 80085ea:	6818      	ldr	r0, [r3, #0]
 80085ec:	f107 0110 	add.w	r1, r7, #16
 80085f0:	2300      	movs	r3, #0
 80085f2:	2200      	movs	r2, #0
 80085f4:	f7fe f870 	bl	80066d8 <xQueueGenericSend>
 80085f8:	6278      	str	r0, [r7, #36]	@ 0x24
 80085fa:	e008      	b.n	800860e <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80085fc:	4b06      	ldr	r3, [pc, #24]	@ (8008618 <xTimerGenericCommand+0x9c>)
 80085fe:	6818      	ldr	r0, [r3, #0]
 8008600:	f107 0110 	add.w	r1, r7, #16
 8008604:	2300      	movs	r3, #0
 8008606:	683a      	ldr	r2, [r7, #0]
 8008608:	f7fe f970 	bl	80068ec <xQueueGenericSendFromISR>
 800860c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800860e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008610:	4618      	mov	r0, r3
 8008612:	3728      	adds	r7, #40	@ 0x28
 8008614:	46bd      	mov	sp, r7
 8008616:	bd80      	pop	{r7, pc}
 8008618:	20001700 	.word	0x20001700

0800861c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b088      	sub	sp, #32
 8008620:	af02      	add	r7, sp, #8
 8008622:	6078      	str	r0, [r7, #4]
 8008624:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008626:	4b24      	ldr	r3, [pc, #144]	@ (80086b8 <prvProcessExpiredTimer+0x9c>)
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	68db      	ldr	r3, [r3, #12]
 800862c:	68db      	ldr	r3, [r3, #12]
 800862e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008630:	697b      	ldr	r3, [r7, #20]
 8008632:	3304      	adds	r3, #4
 8008634:	4618      	mov	r0, r3
 8008636:	f7fd fe55 	bl	80062e4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800863a:	697b      	ldr	r3, [r7, #20]
 800863c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008640:	f003 0304 	and.w	r3, r3, #4
 8008644:	2b00      	cmp	r3, #0
 8008646:	d025      	beq.n	8008694 <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008648:	697b      	ldr	r3, [r7, #20]
 800864a:	699a      	ldr	r2, [r3, #24]
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	18d1      	adds	r1, r2, r3
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	683a      	ldr	r2, [r7, #0]
 8008654:	6978      	ldr	r0, [r7, #20]
 8008656:	f000 f8d7 	bl	8008808 <prvInsertTimerInActiveList>
 800865a:	4603      	mov	r3, r0
 800865c:	2b00      	cmp	r3, #0
 800865e:	d022      	beq.n	80086a6 <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008660:	2300      	movs	r3, #0
 8008662:	9300      	str	r3, [sp, #0]
 8008664:	2300      	movs	r3, #0
 8008666:	687a      	ldr	r2, [r7, #4]
 8008668:	2100      	movs	r1, #0
 800866a:	6978      	ldr	r0, [r7, #20]
 800866c:	f7ff ff86 	bl	800857c <xTimerGenericCommand>
 8008670:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008672:	693b      	ldr	r3, [r7, #16]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d116      	bne.n	80086a6 <prvProcessExpiredTimer+0x8a>
	__asm volatile
 8008678:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800867c:	b672      	cpsid	i
 800867e:	f383 8811 	msr	BASEPRI, r3
 8008682:	f3bf 8f6f 	isb	sy
 8008686:	f3bf 8f4f 	dsb	sy
 800868a:	b662      	cpsie	i
 800868c:	60fb      	str	r3, [r7, #12]
}
 800868e:	bf00      	nop
 8008690:	bf00      	nop
 8008692:	e7fd      	b.n	8008690 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008694:	697b      	ldr	r3, [r7, #20]
 8008696:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800869a:	f023 0301 	bic.w	r3, r3, #1
 800869e:	b2da      	uxtb	r2, r3
 80086a0:	697b      	ldr	r3, [r7, #20]
 80086a2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80086a6:	697b      	ldr	r3, [r7, #20]
 80086a8:	6a1b      	ldr	r3, [r3, #32]
 80086aa:	6978      	ldr	r0, [r7, #20]
 80086ac:	4798      	blx	r3
}
 80086ae:	bf00      	nop
 80086b0:	3718      	adds	r7, #24
 80086b2:	46bd      	mov	sp, r7
 80086b4:	bd80      	pop	{r7, pc}
 80086b6:	bf00      	nop
 80086b8:	200016f8 	.word	0x200016f8

080086bc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	b084      	sub	sp, #16
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80086c4:	f107 0308 	add.w	r3, r7, #8
 80086c8:	4618      	mov	r0, r3
 80086ca:	f000 f859 	bl	8008780 <prvGetNextExpireTime>
 80086ce:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80086d0:	68bb      	ldr	r3, [r7, #8]
 80086d2:	4619      	mov	r1, r3
 80086d4:	68f8      	ldr	r0, [r7, #12]
 80086d6:	f000 f805 	bl	80086e4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80086da:	f000 f8d7 	bl	800888c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80086de:	bf00      	nop
 80086e0:	e7f0      	b.n	80086c4 <prvTimerTask+0x8>
	...

080086e4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b084      	sub	sp, #16
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
 80086ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80086ee:	f7ff f909 	bl	8007904 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80086f2:	f107 0308 	add.w	r3, r7, #8
 80086f6:	4618      	mov	r0, r3
 80086f8:	f000 f866 	bl	80087c8 <prvSampleTimeNow>
 80086fc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80086fe:	68bb      	ldr	r3, [r7, #8]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d130      	bne.n	8008766 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d10a      	bne.n	8008720 <prvProcessTimerOrBlockTask+0x3c>
 800870a:	687a      	ldr	r2, [r7, #4]
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	429a      	cmp	r2, r3
 8008710:	d806      	bhi.n	8008720 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008712:	f7ff f905 	bl	8007920 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008716:	68f9      	ldr	r1, [r7, #12]
 8008718:	6878      	ldr	r0, [r7, #4]
 800871a:	f7ff ff7f 	bl	800861c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800871e:	e024      	b.n	800876a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d008      	beq.n	8008738 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008726:	4b13      	ldr	r3, [pc, #76]	@ (8008774 <prvProcessTimerOrBlockTask+0x90>)
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d101      	bne.n	8008734 <prvProcessTimerOrBlockTask+0x50>
 8008730:	2301      	movs	r3, #1
 8008732:	e000      	b.n	8008736 <prvProcessTimerOrBlockTask+0x52>
 8008734:	2300      	movs	r3, #0
 8008736:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008738:	4b0f      	ldr	r3, [pc, #60]	@ (8008778 <prvProcessTimerOrBlockTask+0x94>)
 800873a:	6818      	ldr	r0, [r3, #0]
 800873c:	687a      	ldr	r2, [r7, #4]
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	1ad3      	subs	r3, r2, r3
 8008742:	683a      	ldr	r2, [r7, #0]
 8008744:	4619      	mov	r1, r3
 8008746:	f7fe fe37 	bl	80073b8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800874a:	f7ff f8e9 	bl	8007920 <xTaskResumeAll>
 800874e:	4603      	mov	r3, r0
 8008750:	2b00      	cmp	r3, #0
 8008752:	d10a      	bne.n	800876a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008754:	4b09      	ldr	r3, [pc, #36]	@ (800877c <prvProcessTimerOrBlockTask+0x98>)
 8008756:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800875a:	601a      	str	r2, [r3, #0]
 800875c:	f3bf 8f4f 	dsb	sy
 8008760:	f3bf 8f6f 	isb	sy
}
 8008764:	e001      	b.n	800876a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008766:	f7ff f8db 	bl	8007920 <xTaskResumeAll>
}
 800876a:	bf00      	nop
 800876c:	3710      	adds	r7, #16
 800876e:	46bd      	mov	sp, r7
 8008770:	bd80      	pop	{r7, pc}
 8008772:	bf00      	nop
 8008774:	200016fc 	.word	0x200016fc
 8008778:	20001700 	.word	0x20001700
 800877c:	e000ed04 	.word	0xe000ed04

08008780 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008780:	b480      	push	{r7}
 8008782:	b085      	sub	sp, #20
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008788:	4b0e      	ldr	r3, [pc, #56]	@ (80087c4 <prvGetNextExpireTime+0x44>)
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d101      	bne.n	8008796 <prvGetNextExpireTime+0x16>
 8008792:	2201      	movs	r2, #1
 8008794:	e000      	b.n	8008798 <prvGetNextExpireTime+0x18>
 8008796:	2200      	movs	r2, #0
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d105      	bne.n	80087b0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80087a4:	4b07      	ldr	r3, [pc, #28]	@ (80087c4 <prvGetNextExpireTime+0x44>)
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	68db      	ldr	r3, [r3, #12]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	60fb      	str	r3, [r7, #12]
 80087ae:	e001      	b.n	80087b4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80087b0:	2300      	movs	r3, #0
 80087b2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80087b4:	68fb      	ldr	r3, [r7, #12]
}
 80087b6:	4618      	mov	r0, r3
 80087b8:	3714      	adds	r7, #20
 80087ba:	46bd      	mov	sp, r7
 80087bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c0:	4770      	bx	lr
 80087c2:	bf00      	nop
 80087c4:	200016f8 	.word	0x200016f8

080087c8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b084      	sub	sp, #16
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80087d0:	f7ff f946 	bl	8007a60 <xTaskGetTickCount>
 80087d4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80087d6:	4b0b      	ldr	r3, [pc, #44]	@ (8008804 <prvSampleTimeNow+0x3c>)
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	68fa      	ldr	r2, [r7, #12]
 80087dc:	429a      	cmp	r2, r3
 80087de:	d205      	bcs.n	80087ec <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80087e0:	f000 f940 	bl	8008a64 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2201      	movs	r2, #1
 80087e8:	601a      	str	r2, [r3, #0]
 80087ea:	e002      	b.n	80087f2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2200      	movs	r2, #0
 80087f0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80087f2:	4a04      	ldr	r2, [pc, #16]	@ (8008804 <prvSampleTimeNow+0x3c>)
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80087f8:	68fb      	ldr	r3, [r7, #12]
}
 80087fa:	4618      	mov	r0, r3
 80087fc:	3710      	adds	r7, #16
 80087fe:	46bd      	mov	sp, r7
 8008800:	bd80      	pop	{r7, pc}
 8008802:	bf00      	nop
 8008804:	20001708 	.word	0x20001708

08008808 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008808:	b580      	push	{r7, lr}
 800880a:	b086      	sub	sp, #24
 800880c:	af00      	add	r7, sp, #0
 800880e:	60f8      	str	r0, [r7, #12]
 8008810:	60b9      	str	r1, [r7, #8]
 8008812:	607a      	str	r2, [r7, #4]
 8008814:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008816:	2300      	movs	r3, #0
 8008818:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	68ba      	ldr	r2, [r7, #8]
 800881e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	68fa      	ldr	r2, [r7, #12]
 8008824:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008826:	68ba      	ldr	r2, [r7, #8]
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	429a      	cmp	r2, r3
 800882c:	d812      	bhi.n	8008854 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800882e:	687a      	ldr	r2, [r7, #4]
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	1ad2      	subs	r2, r2, r3
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	699b      	ldr	r3, [r3, #24]
 8008838:	429a      	cmp	r2, r3
 800883a:	d302      	bcc.n	8008842 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800883c:	2301      	movs	r3, #1
 800883e:	617b      	str	r3, [r7, #20]
 8008840:	e01b      	b.n	800887a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008842:	4b10      	ldr	r3, [pc, #64]	@ (8008884 <prvInsertTimerInActiveList+0x7c>)
 8008844:	681a      	ldr	r2, [r3, #0]
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	3304      	adds	r3, #4
 800884a:	4619      	mov	r1, r3
 800884c:	4610      	mov	r0, r2
 800884e:	f7fd fd10 	bl	8006272 <vListInsert>
 8008852:	e012      	b.n	800887a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008854:	687a      	ldr	r2, [r7, #4]
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	429a      	cmp	r2, r3
 800885a:	d206      	bcs.n	800886a <prvInsertTimerInActiveList+0x62>
 800885c:	68ba      	ldr	r2, [r7, #8]
 800885e:	683b      	ldr	r3, [r7, #0]
 8008860:	429a      	cmp	r2, r3
 8008862:	d302      	bcc.n	800886a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008864:	2301      	movs	r3, #1
 8008866:	617b      	str	r3, [r7, #20]
 8008868:	e007      	b.n	800887a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800886a:	4b07      	ldr	r3, [pc, #28]	@ (8008888 <prvInsertTimerInActiveList+0x80>)
 800886c:	681a      	ldr	r2, [r3, #0]
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	3304      	adds	r3, #4
 8008872:	4619      	mov	r1, r3
 8008874:	4610      	mov	r0, r2
 8008876:	f7fd fcfc 	bl	8006272 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800887a:	697b      	ldr	r3, [r7, #20]
}
 800887c:	4618      	mov	r0, r3
 800887e:	3718      	adds	r7, #24
 8008880:	46bd      	mov	sp, r7
 8008882:	bd80      	pop	{r7, pc}
 8008884:	200016fc 	.word	0x200016fc
 8008888:	200016f8 	.word	0x200016f8

0800888c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800888c:	b580      	push	{r7, lr}
 800888e:	b08e      	sub	sp, #56	@ 0x38
 8008890:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008892:	e0d4      	b.n	8008a3e <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	2b00      	cmp	r3, #0
 8008898:	da1b      	bge.n	80088d2 <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800889a:	1d3b      	adds	r3, r7, #4
 800889c:	3304      	adds	r3, #4
 800889e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80088a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d10d      	bne.n	80088c2 <prvProcessReceivedCommands+0x36>
	__asm volatile
 80088a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088aa:	b672      	cpsid	i
 80088ac:	f383 8811 	msr	BASEPRI, r3
 80088b0:	f3bf 8f6f 	isb	sy
 80088b4:	f3bf 8f4f 	dsb	sy
 80088b8:	b662      	cpsie	i
 80088ba:	61fb      	str	r3, [r7, #28]
}
 80088bc:	bf00      	nop
 80088be:	bf00      	nop
 80088c0:	e7fd      	b.n	80088be <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80088c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80088c8:	6850      	ldr	r0, [r2, #4]
 80088ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80088cc:	6892      	ldr	r2, [r2, #8]
 80088ce:	4611      	mov	r1, r2
 80088d0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	f2c0 80b2 	blt.w	8008a3e <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80088de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088e0:	695b      	ldr	r3, [r3, #20]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d004      	beq.n	80088f0 <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80088e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088e8:	3304      	adds	r3, #4
 80088ea:	4618      	mov	r0, r3
 80088ec:	f7fd fcfa 	bl	80062e4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80088f0:	463b      	mov	r3, r7
 80088f2:	4618      	mov	r0, r3
 80088f4:	f7ff ff68 	bl	80087c8 <prvSampleTimeNow>
 80088f8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	2b09      	cmp	r3, #9
 80088fe:	f200 809b 	bhi.w	8008a38 <prvProcessReceivedCommands+0x1ac>
 8008902:	a201      	add	r2, pc, #4	@ (adr r2, 8008908 <prvProcessReceivedCommands+0x7c>)
 8008904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008908:	08008931 	.word	0x08008931
 800890c:	08008931 	.word	0x08008931
 8008910:	08008931 	.word	0x08008931
 8008914:	080089ab 	.word	0x080089ab
 8008918:	080089bf 	.word	0x080089bf
 800891c:	08008a0f 	.word	0x08008a0f
 8008920:	08008931 	.word	0x08008931
 8008924:	08008931 	.word	0x08008931
 8008928:	080089ab 	.word	0x080089ab
 800892c:	080089bf 	.word	0x080089bf
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008930:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008932:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008936:	f043 0301 	orr.w	r3, r3, #1
 800893a:	b2da      	uxtb	r2, r3
 800893c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800893e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008942:	68ba      	ldr	r2, [r7, #8]
 8008944:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008946:	699b      	ldr	r3, [r3, #24]
 8008948:	18d1      	adds	r1, r2, r3
 800894a:	68bb      	ldr	r3, [r7, #8]
 800894c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800894e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008950:	f7ff ff5a 	bl	8008808 <prvInsertTimerInActiveList>
 8008954:	4603      	mov	r3, r0
 8008956:	2b00      	cmp	r3, #0
 8008958:	d070      	beq.n	8008a3c <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800895a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800895c:	6a1b      	ldr	r3, [r3, #32]
 800895e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008960:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008962:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008964:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008968:	f003 0304 	and.w	r3, r3, #4
 800896c:	2b00      	cmp	r3, #0
 800896e:	d065      	beq.n	8008a3c <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008970:	68ba      	ldr	r2, [r7, #8]
 8008972:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008974:	699b      	ldr	r3, [r3, #24]
 8008976:	441a      	add	r2, r3
 8008978:	2300      	movs	r3, #0
 800897a:	9300      	str	r3, [sp, #0]
 800897c:	2300      	movs	r3, #0
 800897e:	2100      	movs	r1, #0
 8008980:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008982:	f7ff fdfb 	bl	800857c <xTimerGenericCommand>
 8008986:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008988:	6a3b      	ldr	r3, [r7, #32]
 800898a:	2b00      	cmp	r3, #0
 800898c:	d156      	bne.n	8008a3c <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 800898e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008992:	b672      	cpsid	i
 8008994:	f383 8811 	msr	BASEPRI, r3
 8008998:	f3bf 8f6f 	isb	sy
 800899c:	f3bf 8f4f 	dsb	sy
 80089a0:	b662      	cpsie	i
 80089a2:	61bb      	str	r3, [r7, #24]
}
 80089a4:	bf00      	nop
 80089a6:	bf00      	nop
 80089a8:	e7fd      	b.n	80089a6 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80089aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089ac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80089b0:	f023 0301 	bic.w	r3, r3, #1
 80089b4:	b2da      	uxtb	r2, r3
 80089b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089b8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80089bc:	e03f      	b.n	8008a3e <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80089be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089c0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80089c4:	f043 0301 	orr.w	r3, r3, #1
 80089c8:	b2da      	uxtb	r2, r3
 80089ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089cc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80089d0:	68ba      	ldr	r2, [r7, #8]
 80089d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089d4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80089d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089d8:	699b      	ldr	r3, [r3, #24]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d10d      	bne.n	80089fa <prvProcessReceivedCommands+0x16e>
	__asm volatile
 80089de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089e2:	b672      	cpsid	i
 80089e4:	f383 8811 	msr	BASEPRI, r3
 80089e8:	f3bf 8f6f 	isb	sy
 80089ec:	f3bf 8f4f 	dsb	sy
 80089f0:	b662      	cpsie	i
 80089f2:	617b      	str	r3, [r7, #20]
}
 80089f4:	bf00      	nop
 80089f6:	bf00      	nop
 80089f8:	e7fd      	b.n	80089f6 <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80089fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089fc:	699a      	ldr	r2, [r3, #24]
 80089fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a00:	18d1      	adds	r1, r2, r3
 8008a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008a06:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008a08:	f7ff fefe 	bl	8008808 <prvInsertTimerInActiveList>
					break;
 8008a0c:	e017      	b.n	8008a3e <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008a0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a10:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008a14:	f003 0302 	and.w	r3, r3, #2
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d103      	bne.n	8008a24 <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 8008a1c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008a1e:	f000 fbd1 	bl	80091c4 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008a22:	e00c      	b.n	8008a3e <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008a24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a26:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008a2a:	f023 0301 	bic.w	r3, r3, #1
 8008a2e:	b2da      	uxtb	r2, r3
 8008a30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a32:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008a36:	e002      	b.n	8008a3e <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 8008a38:	bf00      	nop
 8008a3a:	e000      	b.n	8008a3e <prvProcessReceivedCommands+0x1b2>
					break;
 8008a3c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008a3e:	4b08      	ldr	r3, [pc, #32]	@ (8008a60 <prvProcessReceivedCommands+0x1d4>)
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	1d39      	adds	r1, r7, #4
 8008a44:	2200      	movs	r2, #0
 8008a46:	4618      	mov	r0, r3
 8008a48:	f7fe f88c 	bl	8006b64 <xQueueReceive>
 8008a4c:	4603      	mov	r3, r0
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	f47f af20 	bne.w	8008894 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008a54:	bf00      	nop
 8008a56:	bf00      	nop
 8008a58:	3730      	adds	r7, #48	@ 0x30
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	bd80      	pop	{r7, pc}
 8008a5e:	bf00      	nop
 8008a60:	20001700 	.word	0x20001700

08008a64 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b088      	sub	sp, #32
 8008a68:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008a6a:	e04b      	b.n	8008b04 <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008a6c:	4b2f      	ldr	r3, [pc, #188]	@ (8008b2c <prvSwitchTimerLists+0xc8>)
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	68db      	ldr	r3, [r3, #12]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a76:	4b2d      	ldr	r3, [pc, #180]	@ (8008b2c <prvSwitchTimerLists+0xc8>)
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	68db      	ldr	r3, [r3, #12]
 8008a7c:	68db      	ldr	r3, [r3, #12]
 8008a7e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	3304      	adds	r3, #4
 8008a84:	4618      	mov	r0, r3
 8008a86:	f7fd fc2d 	bl	80062e4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	6a1b      	ldr	r3, [r3, #32]
 8008a8e:	68f8      	ldr	r0, [r7, #12]
 8008a90:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008a98:	f003 0304 	and.w	r3, r3, #4
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d031      	beq.n	8008b04 <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	699b      	ldr	r3, [r3, #24]
 8008aa4:	693a      	ldr	r2, [r7, #16]
 8008aa6:	4413      	add	r3, r2
 8008aa8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008aaa:	68ba      	ldr	r2, [r7, #8]
 8008aac:	693b      	ldr	r3, [r7, #16]
 8008aae:	429a      	cmp	r2, r3
 8008ab0:	d90e      	bls.n	8008ad0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	68ba      	ldr	r2, [r7, #8]
 8008ab6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	68fa      	ldr	r2, [r7, #12]
 8008abc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008abe:	4b1b      	ldr	r3, [pc, #108]	@ (8008b2c <prvSwitchTimerLists+0xc8>)
 8008ac0:	681a      	ldr	r2, [r3, #0]
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	3304      	adds	r3, #4
 8008ac6:	4619      	mov	r1, r3
 8008ac8:	4610      	mov	r0, r2
 8008aca:	f7fd fbd2 	bl	8006272 <vListInsert>
 8008ace:	e019      	b.n	8008b04 <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	9300      	str	r3, [sp, #0]
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	693a      	ldr	r2, [r7, #16]
 8008ad8:	2100      	movs	r1, #0
 8008ada:	68f8      	ldr	r0, [r7, #12]
 8008adc:	f7ff fd4e 	bl	800857c <xTimerGenericCommand>
 8008ae0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d10d      	bne.n	8008b04 <prvSwitchTimerLists+0xa0>
	__asm volatile
 8008ae8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008aec:	b672      	cpsid	i
 8008aee:	f383 8811 	msr	BASEPRI, r3
 8008af2:	f3bf 8f6f 	isb	sy
 8008af6:	f3bf 8f4f 	dsb	sy
 8008afa:	b662      	cpsie	i
 8008afc:	603b      	str	r3, [r7, #0]
}
 8008afe:	bf00      	nop
 8008b00:	bf00      	nop
 8008b02:	e7fd      	b.n	8008b00 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008b04:	4b09      	ldr	r3, [pc, #36]	@ (8008b2c <prvSwitchTimerLists+0xc8>)
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d1ae      	bne.n	8008a6c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008b0e:	4b07      	ldr	r3, [pc, #28]	@ (8008b2c <prvSwitchTimerLists+0xc8>)
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008b14:	4b06      	ldr	r3, [pc, #24]	@ (8008b30 <prvSwitchTimerLists+0xcc>)
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	4a04      	ldr	r2, [pc, #16]	@ (8008b2c <prvSwitchTimerLists+0xc8>)
 8008b1a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008b1c:	4a04      	ldr	r2, [pc, #16]	@ (8008b30 <prvSwitchTimerLists+0xcc>)
 8008b1e:	697b      	ldr	r3, [r7, #20]
 8008b20:	6013      	str	r3, [r2, #0]
}
 8008b22:	bf00      	nop
 8008b24:	3718      	adds	r7, #24
 8008b26:	46bd      	mov	sp, r7
 8008b28:	bd80      	pop	{r7, pc}
 8008b2a:	bf00      	nop
 8008b2c:	200016f8 	.word	0x200016f8
 8008b30:	200016fc 	.word	0x200016fc

08008b34 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b082      	sub	sp, #8
 8008b38:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008b3a:	f000 f947 	bl	8008dcc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008b3e:	4b15      	ldr	r3, [pc, #84]	@ (8008b94 <prvCheckForValidListAndQueue+0x60>)
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d120      	bne.n	8008b88 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008b46:	4814      	ldr	r0, [pc, #80]	@ (8008b98 <prvCheckForValidListAndQueue+0x64>)
 8008b48:	f7fd fb42 	bl	80061d0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008b4c:	4813      	ldr	r0, [pc, #76]	@ (8008b9c <prvCheckForValidListAndQueue+0x68>)
 8008b4e:	f7fd fb3f 	bl	80061d0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008b52:	4b13      	ldr	r3, [pc, #76]	@ (8008ba0 <prvCheckForValidListAndQueue+0x6c>)
 8008b54:	4a10      	ldr	r2, [pc, #64]	@ (8008b98 <prvCheckForValidListAndQueue+0x64>)
 8008b56:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008b58:	4b12      	ldr	r3, [pc, #72]	@ (8008ba4 <prvCheckForValidListAndQueue+0x70>)
 8008b5a:	4a10      	ldr	r2, [pc, #64]	@ (8008b9c <prvCheckForValidListAndQueue+0x68>)
 8008b5c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008b5e:	2300      	movs	r3, #0
 8008b60:	9300      	str	r3, [sp, #0]
 8008b62:	4b11      	ldr	r3, [pc, #68]	@ (8008ba8 <prvCheckForValidListAndQueue+0x74>)
 8008b64:	4a11      	ldr	r2, [pc, #68]	@ (8008bac <prvCheckForValidListAndQueue+0x78>)
 8008b66:	2110      	movs	r1, #16
 8008b68:	200a      	movs	r0, #10
 8008b6a:	f7fd fc51 	bl	8006410 <xQueueGenericCreateStatic>
 8008b6e:	4603      	mov	r3, r0
 8008b70:	4a08      	ldr	r2, [pc, #32]	@ (8008b94 <prvCheckForValidListAndQueue+0x60>)
 8008b72:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008b74:	4b07      	ldr	r3, [pc, #28]	@ (8008b94 <prvCheckForValidListAndQueue+0x60>)
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d005      	beq.n	8008b88 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008b7c:	4b05      	ldr	r3, [pc, #20]	@ (8008b94 <prvCheckForValidListAndQueue+0x60>)
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	490b      	ldr	r1, [pc, #44]	@ (8008bb0 <prvCheckForValidListAndQueue+0x7c>)
 8008b82:	4618      	mov	r0, r3
 8008b84:	f7fe fbc4 	bl	8007310 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008b88:	f000 f956 	bl	8008e38 <vPortExitCritical>
}
 8008b8c:	bf00      	nop
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	bd80      	pop	{r7, pc}
 8008b92:	bf00      	nop
 8008b94:	20001700 	.word	0x20001700
 8008b98:	200016d0 	.word	0x200016d0
 8008b9c:	200016e4 	.word	0x200016e4
 8008ba0:	200016f8 	.word	0x200016f8
 8008ba4:	200016fc 	.word	0x200016fc
 8008ba8:	200017ac 	.word	0x200017ac
 8008bac:	2000170c 	.word	0x2000170c
 8008bb0:	0800db4c 	.word	0x0800db4c

08008bb4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008bb4:	b480      	push	{r7}
 8008bb6:	b085      	sub	sp, #20
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	60f8      	str	r0, [r7, #12]
 8008bbc:	60b9      	str	r1, [r7, #8]
 8008bbe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	3b04      	subs	r3, #4
 8008bc4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008bcc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	3b04      	subs	r3, #4
 8008bd2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008bd4:	68bb      	ldr	r3, [r7, #8]
 8008bd6:	f023 0201 	bic.w	r2, r3, #1
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	3b04      	subs	r3, #4
 8008be2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008be4:	4a0c      	ldr	r2, [pc, #48]	@ (8008c18 <pxPortInitialiseStack+0x64>)
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	3b14      	subs	r3, #20
 8008bee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008bf0:	687a      	ldr	r2, [r7, #4]
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	3b04      	subs	r3, #4
 8008bfa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	f06f 0202 	mvn.w	r2, #2
 8008c02:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	3b20      	subs	r3, #32
 8008c08:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008c0a:	68fb      	ldr	r3, [r7, #12]
}
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	3714      	adds	r7, #20
 8008c10:	46bd      	mov	sp, r7
 8008c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c16:	4770      	bx	lr
 8008c18:	08008c1d 	.word	0x08008c1d

08008c1c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008c1c:	b480      	push	{r7}
 8008c1e:	b085      	sub	sp, #20
 8008c20:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008c22:	2300      	movs	r3, #0
 8008c24:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008c26:	4b15      	ldr	r3, [pc, #84]	@ (8008c7c <prvTaskExitError+0x60>)
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c2e:	d00d      	beq.n	8008c4c <prvTaskExitError+0x30>
	__asm volatile
 8008c30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c34:	b672      	cpsid	i
 8008c36:	f383 8811 	msr	BASEPRI, r3
 8008c3a:	f3bf 8f6f 	isb	sy
 8008c3e:	f3bf 8f4f 	dsb	sy
 8008c42:	b662      	cpsie	i
 8008c44:	60fb      	str	r3, [r7, #12]
}
 8008c46:	bf00      	nop
 8008c48:	bf00      	nop
 8008c4a:	e7fd      	b.n	8008c48 <prvTaskExitError+0x2c>
	__asm volatile
 8008c4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c50:	b672      	cpsid	i
 8008c52:	f383 8811 	msr	BASEPRI, r3
 8008c56:	f3bf 8f6f 	isb	sy
 8008c5a:	f3bf 8f4f 	dsb	sy
 8008c5e:	b662      	cpsie	i
 8008c60:	60bb      	str	r3, [r7, #8]
}
 8008c62:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008c64:	bf00      	nop
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d0fc      	beq.n	8008c66 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008c6c:	bf00      	nop
 8008c6e:	bf00      	nop
 8008c70:	3714      	adds	r7, #20
 8008c72:	46bd      	mov	sp, r7
 8008c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c78:	4770      	bx	lr
 8008c7a:	bf00      	nop
 8008c7c:	2000000c 	.word	0x2000000c

08008c80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008c80:	4b07      	ldr	r3, [pc, #28]	@ (8008ca0 <pxCurrentTCBConst2>)
 8008c82:	6819      	ldr	r1, [r3, #0]
 8008c84:	6808      	ldr	r0, [r1, #0]
 8008c86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c8a:	f380 8809 	msr	PSP, r0
 8008c8e:	f3bf 8f6f 	isb	sy
 8008c92:	f04f 0000 	mov.w	r0, #0
 8008c96:	f380 8811 	msr	BASEPRI, r0
 8008c9a:	4770      	bx	lr
 8008c9c:	f3af 8000 	nop.w

08008ca0 <pxCurrentTCBConst2>:
 8008ca0:	200011d0 	.word	0x200011d0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008ca4:	bf00      	nop
 8008ca6:	bf00      	nop

08008ca8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008ca8:	4808      	ldr	r0, [pc, #32]	@ (8008ccc <prvPortStartFirstTask+0x24>)
 8008caa:	6800      	ldr	r0, [r0, #0]
 8008cac:	6800      	ldr	r0, [r0, #0]
 8008cae:	f380 8808 	msr	MSP, r0
 8008cb2:	f04f 0000 	mov.w	r0, #0
 8008cb6:	f380 8814 	msr	CONTROL, r0
 8008cba:	b662      	cpsie	i
 8008cbc:	b661      	cpsie	f
 8008cbe:	f3bf 8f4f 	dsb	sy
 8008cc2:	f3bf 8f6f 	isb	sy
 8008cc6:	df00      	svc	0
 8008cc8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008cca:	bf00      	nop
 8008ccc:	e000ed08 	.word	0xe000ed08

08008cd0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	b084      	sub	sp, #16
 8008cd4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008cd6:	4b37      	ldr	r3, [pc, #220]	@ (8008db4 <xPortStartScheduler+0xe4>)
 8008cd8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	781b      	ldrb	r3, [r3, #0]
 8008cde:	b2db      	uxtb	r3, r3
 8008ce0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	22ff      	movs	r2, #255	@ 0xff
 8008ce6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	781b      	ldrb	r3, [r3, #0]
 8008cec:	b2db      	uxtb	r3, r3
 8008cee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008cf0:	78fb      	ldrb	r3, [r7, #3]
 8008cf2:	b2db      	uxtb	r3, r3
 8008cf4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008cf8:	b2da      	uxtb	r2, r3
 8008cfa:	4b2f      	ldr	r3, [pc, #188]	@ (8008db8 <xPortStartScheduler+0xe8>)
 8008cfc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008cfe:	4b2f      	ldr	r3, [pc, #188]	@ (8008dbc <xPortStartScheduler+0xec>)
 8008d00:	2207      	movs	r2, #7
 8008d02:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008d04:	e009      	b.n	8008d1a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8008d06:	4b2d      	ldr	r3, [pc, #180]	@ (8008dbc <xPortStartScheduler+0xec>)
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	3b01      	subs	r3, #1
 8008d0c:	4a2b      	ldr	r2, [pc, #172]	@ (8008dbc <xPortStartScheduler+0xec>)
 8008d0e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008d10:	78fb      	ldrb	r3, [r7, #3]
 8008d12:	b2db      	uxtb	r3, r3
 8008d14:	005b      	lsls	r3, r3, #1
 8008d16:	b2db      	uxtb	r3, r3
 8008d18:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008d1a:	78fb      	ldrb	r3, [r7, #3]
 8008d1c:	b2db      	uxtb	r3, r3
 8008d1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008d22:	2b80      	cmp	r3, #128	@ 0x80
 8008d24:	d0ef      	beq.n	8008d06 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008d26:	4b25      	ldr	r3, [pc, #148]	@ (8008dbc <xPortStartScheduler+0xec>)
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	f1c3 0307 	rsb	r3, r3, #7
 8008d2e:	2b04      	cmp	r3, #4
 8008d30:	d00d      	beq.n	8008d4e <xPortStartScheduler+0x7e>
	__asm volatile
 8008d32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d36:	b672      	cpsid	i
 8008d38:	f383 8811 	msr	BASEPRI, r3
 8008d3c:	f3bf 8f6f 	isb	sy
 8008d40:	f3bf 8f4f 	dsb	sy
 8008d44:	b662      	cpsie	i
 8008d46:	60bb      	str	r3, [r7, #8]
}
 8008d48:	bf00      	nop
 8008d4a:	bf00      	nop
 8008d4c:	e7fd      	b.n	8008d4a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008d4e:	4b1b      	ldr	r3, [pc, #108]	@ (8008dbc <xPortStartScheduler+0xec>)
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	021b      	lsls	r3, r3, #8
 8008d54:	4a19      	ldr	r2, [pc, #100]	@ (8008dbc <xPortStartScheduler+0xec>)
 8008d56:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008d58:	4b18      	ldr	r3, [pc, #96]	@ (8008dbc <xPortStartScheduler+0xec>)
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008d60:	4a16      	ldr	r2, [pc, #88]	@ (8008dbc <xPortStartScheduler+0xec>)
 8008d62:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	b2da      	uxtb	r2, r3
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008d6c:	4b14      	ldr	r3, [pc, #80]	@ (8008dc0 <xPortStartScheduler+0xf0>)
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	4a13      	ldr	r2, [pc, #76]	@ (8008dc0 <xPortStartScheduler+0xf0>)
 8008d72:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008d76:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008d78:	4b11      	ldr	r3, [pc, #68]	@ (8008dc0 <xPortStartScheduler+0xf0>)
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	4a10      	ldr	r2, [pc, #64]	@ (8008dc0 <xPortStartScheduler+0xf0>)
 8008d7e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008d82:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008d84:	f000 f8dc 	bl	8008f40 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008d88:	4b0e      	ldr	r3, [pc, #56]	@ (8008dc4 <xPortStartScheduler+0xf4>)
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008d8e:	f000 f8fb 	bl	8008f88 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008d92:	4b0d      	ldr	r3, [pc, #52]	@ (8008dc8 <xPortStartScheduler+0xf8>)
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	4a0c      	ldr	r2, [pc, #48]	@ (8008dc8 <xPortStartScheduler+0xf8>)
 8008d98:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8008d9c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008d9e:	f7ff ff83 	bl	8008ca8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008da2:	f7fe ff29 	bl	8007bf8 <vTaskSwitchContext>
	prvTaskExitError();
 8008da6:	f7ff ff39 	bl	8008c1c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008daa:	2300      	movs	r3, #0
}
 8008dac:	4618      	mov	r0, r3
 8008dae:	3710      	adds	r7, #16
 8008db0:	46bd      	mov	sp, r7
 8008db2:	bd80      	pop	{r7, pc}
 8008db4:	e000e400 	.word	0xe000e400
 8008db8:	200017fc 	.word	0x200017fc
 8008dbc:	20001800 	.word	0x20001800
 8008dc0:	e000ed20 	.word	0xe000ed20
 8008dc4:	2000000c 	.word	0x2000000c
 8008dc8:	e000ef34 	.word	0xe000ef34

08008dcc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008dcc:	b480      	push	{r7}
 8008dce:	b083      	sub	sp, #12
 8008dd0:	af00      	add	r7, sp, #0
	__asm volatile
 8008dd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dd6:	b672      	cpsid	i
 8008dd8:	f383 8811 	msr	BASEPRI, r3
 8008ddc:	f3bf 8f6f 	isb	sy
 8008de0:	f3bf 8f4f 	dsb	sy
 8008de4:	b662      	cpsie	i
 8008de6:	607b      	str	r3, [r7, #4]
}
 8008de8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008dea:	4b11      	ldr	r3, [pc, #68]	@ (8008e30 <vPortEnterCritical+0x64>)
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	3301      	adds	r3, #1
 8008df0:	4a0f      	ldr	r2, [pc, #60]	@ (8008e30 <vPortEnterCritical+0x64>)
 8008df2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008df4:	4b0e      	ldr	r3, [pc, #56]	@ (8008e30 <vPortEnterCritical+0x64>)
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	2b01      	cmp	r3, #1
 8008dfa:	d112      	bne.n	8008e22 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008dfc:	4b0d      	ldr	r3, [pc, #52]	@ (8008e34 <vPortEnterCritical+0x68>)
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	b2db      	uxtb	r3, r3
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d00d      	beq.n	8008e22 <vPortEnterCritical+0x56>
	__asm volatile
 8008e06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e0a:	b672      	cpsid	i
 8008e0c:	f383 8811 	msr	BASEPRI, r3
 8008e10:	f3bf 8f6f 	isb	sy
 8008e14:	f3bf 8f4f 	dsb	sy
 8008e18:	b662      	cpsie	i
 8008e1a:	603b      	str	r3, [r7, #0]
}
 8008e1c:	bf00      	nop
 8008e1e:	bf00      	nop
 8008e20:	e7fd      	b.n	8008e1e <vPortEnterCritical+0x52>
	}
}
 8008e22:	bf00      	nop
 8008e24:	370c      	adds	r7, #12
 8008e26:	46bd      	mov	sp, r7
 8008e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2c:	4770      	bx	lr
 8008e2e:	bf00      	nop
 8008e30:	2000000c 	.word	0x2000000c
 8008e34:	e000ed04 	.word	0xe000ed04

08008e38 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008e38:	b480      	push	{r7}
 8008e3a:	b083      	sub	sp, #12
 8008e3c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008e3e:	4b13      	ldr	r3, [pc, #76]	@ (8008e8c <vPortExitCritical+0x54>)
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d10d      	bne.n	8008e62 <vPortExitCritical+0x2a>
	__asm volatile
 8008e46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e4a:	b672      	cpsid	i
 8008e4c:	f383 8811 	msr	BASEPRI, r3
 8008e50:	f3bf 8f6f 	isb	sy
 8008e54:	f3bf 8f4f 	dsb	sy
 8008e58:	b662      	cpsie	i
 8008e5a:	607b      	str	r3, [r7, #4]
}
 8008e5c:	bf00      	nop
 8008e5e:	bf00      	nop
 8008e60:	e7fd      	b.n	8008e5e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8008e62:	4b0a      	ldr	r3, [pc, #40]	@ (8008e8c <vPortExitCritical+0x54>)
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	3b01      	subs	r3, #1
 8008e68:	4a08      	ldr	r2, [pc, #32]	@ (8008e8c <vPortExitCritical+0x54>)
 8008e6a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008e6c:	4b07      	ldr	r3, [pc, #28]	@ (8008e8c <vPortExitCritical+0x54>)
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d105      	bne.n	8008e80 <vPortExitCritical+0x48>
 8008e74:	2300      	movs	r3, #0
 8008e76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008e78:	683b      	ldr	r3, [r7, #0]
 8008e7a:	f383 8811 	msr	BASEPRI, r3
}
 8008e7e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008e80:	bf00      	nop
 8008e82:	370c      	adds	r7, #12
 8008e84:	46bd      	mov	sp, r7
 8008e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8a:	4770      	bx	lr
 8008e8c:	2000000c 	.word	0x2000000c

08008e90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008e90:	f3ef 8009 	mrs	r0, PSP
 8008e94:	f3bf 8f6f 	isb	sy
 8008e98:	4b15      	ldr	r3, [pc, #84]	@ (8008ef0 <pxCurrentTCBConst>)
 8008e9a:	681a      	ldr	r2, [r3, #0]
 8008e9c:	f01e 0f10 	tst.w	lr, #16
 8008ea0:	bf08      	it	eq
 8008ea2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008ea6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008eaa:	6010      	str	r0, [r2, #0]
 8008eac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008eb0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008eb4:	b672      	cpsid	i
 8008eb6:	f380 8811 	msr	BASEPRI, r0
 8008eba:	f3bf 8f4f 	dsb	sy
 8008ebe:	f3bf 8f6f 	isb	sy
 8008ec2:	b662      	cpsie	i
 8008ec4:	f7fe fe98 	bl	8007bf8 <vTaskSwitchContext>
 8008ec8:	f04f 0000 	mov.w	r0, #0
 8008ecc:	f380 8811 	msr	BASEPRI, r0
 8008ed0:	bc09      	pop	{r0, r3}
 8008ed2:	6819      	ldr	r1, [r3, #0]
 8008ed4:	6808      	ldr	r0, [r1, #0]
 8008ed6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008eda:	f01e 0f10 	tst.w	lr, #16
 8008ede:	bf08      	it	eq
 8008ee0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008ee4:	f380 8809 	msr	PSP, r0
 8008ee8:	f3bf 8f6f 	isb	sy
 8008eec:	4770      	bx	lr
 8008eee:	bf00      	nop

08008ef0 <pxCurrentTCBConst>:
 8008ef0:	200011d0 	.word	0x200011d0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008ef4:	bf00      	nop
 8008ef6:	bf00      	nop

08008ef8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b082      	sub	sp, #8
 8008efc:	af00      	add	r7, sp, #0
	__asm volatile
 8008efe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f02:	b672      	cpsid	i
 8008f04:	f383 8811 	msr	BASEPRI, r3
 8008f08:	f3bf 8f6f 	isb	sy
 8008f0c:	f3bf 8f4f 	dsb	sy
 8008f10:	b662      	cpsie	i
 8008f12:	607b      	str	r3, [r7, #4]
}
 8008f14:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008f16:	f7fe fdb3 	bl	8007a80 <xTaskIncrementTick>
 8008f1a:	4603      	mov	r3, r0
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d003      	beq.n	8008f28 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008f20:	4b06      	ldr	r3, [pc, #24]	@ (8008f3c <SysTick_Handler+0x44>)
 8008f22:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008f26:	601a      	str	r2, [r3, #0]
 8008f28:	2300      	movs	r3, #0
 8008f2a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008f2c:	683b      	ldr	r3, [r7, #0]
 8008f2e:	f383 8811 	msr	BASEPRI, r3
}
 8008f32:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008f34:	bf00      	nop
 8008f36:	3708      	adds	r7, #8
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	bd80      	pop	{r7, pc}
 8008f3c:	e000ed04 	.word	0xe000ed04

08008f40 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008f40:	b480      	push	{r7}
 8008f42:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008f44:	4b0b      	ldr	r3, [pc, #44]	@ (8008f74 <vPortSetupTimerInterrupt+0x34>)
 8008f46:	2200      	movs	r2, #0
 8008f48:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008f4a:	4b0b      	ldr	r3, [pc, #44]	@ (8008f78 <vPortSetupTimerInterrupt+0x38>)
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008f50:	4b0a      	ldr	r3, [pc, #40]	@ (8008f7c <vPortSetupTimerInterrupt+0x3c>)
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	4a0a      	ldr	r2, [pc, #40]	@ (8008f80 <vPortSetupTimerInterrupt+0x40>)
 8008f56:	fba2 2303 	umull	r2, r3, r2, r3
 8008f5a:	099b      	lsrs	r3, r3, #6
 8008f5c:	4a09      	ldr	r2, [pc, #36]	@ (8008f84 <vPortSetupTimerInterrupt+0x44>)
 8008f5e:	3b01      	subs	r3, #1
 8008f60:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008f62:	4b04      	ldr	r3, [pc, #16]	@ (8008f74 <vPortSetupTimerInterrupt+0x34>)
 8008f64:	2207      	movs	r2, #7
 8008f66:	601a      	str	r2, [r3, #0]
}
 8008f68:	bf00      	nop
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f70:	4770      	bx	lr
 8008f72:	bf00      	nop
 8008f74:	e000e010 	.word	0xe000e010
 8008f78:	e000e018 	.word	0xe000e018
 8008f7c:	20000000 	.word	0x20000000
 8008f80:	10624dd3 	.word	0x10624dd3
 8008f84:	e000e014 	.word	0xe000e014

08008f88 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008f88:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008f98 <vPortEnableVFP+0x10>
 8008f8c:	6801      	ldr	r1, [r0, #0]
 8008f8e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8008f92:	6001      	str	r1, [r0, #0]
 8008f94:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008f96:	bf00      	nop
 8008f98:	e000ed88 	.word	0xe000ed88

08008f9c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008f9c:	b480      	push	{r7}
 8008f9e:	b085      	sub	sp, #20
 8008fa0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008fa2:	f3ef 8305 	mrs	r3, IPSR
 8008fa6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	2b0f      	cmp	r3, #15
 8008fac:	d917      	bls.n	8008fde <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008fae:	4a1a      	ldr	r2, [pc, #104]	@ (8009018 <vPortValidateInterruptPriority+0x7c>)
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	4413      	add	r3, r2
 8008fb4:	781b      	ldrb	r3, [r3, #0]
 8008fb6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008fb8:	4b18      	ldr	r3, [pc, #96]	@ (800901c <vPortValidateInterruptPriority+0x80>)
 8008fba:	781b      	ldrb	r3, [r3, #0]
 8008fbc:	7afa      	ldrb	r2, [r7, #11]
 8008fbe:	429a      	cmp	r2, r3
 8008fc0:	d20d      	bcs.n	8008fde <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8008fc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fc6:	b672      	cpsid	i
 8008fc8:	f383 8811 	msr	BASEPRI, r3
 8008fcc:	f3bf 8f6f 	isb	sy
 8008fd0:	f3bf 8f4f 	dsb	sy
 8008fd4:	b662      	cpsie	i
 8008fd6:	607b      	str	r3, [r7, #4]
}
 8008fd8:	bf00      	nop
 8008fda:	bf00      	nop
 8008fdc:	e7fd      	b.n	8008fda <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008fde:	4b10      	ldr	r3, [pc, #64]	@ (8009020 <vPortValidateInterruptPriority+0x84>)
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008fe6:	4b0f      	ldr	r3, [pc, #60]	@ (8009024 <vPortValidateInterruptPriority+0x88>)
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	429a      	cmp	r2, r3
 8008fec:	d90d      	bls.n	800900a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 8008fee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ff2:	b672      	cpsid	i
 8008ff4:	f383 8811 	msr	BASEPRI, r3
 8008ff8:	f3bf 8f6f 	isb	sy
 8008ffc:	f3bf 8f4f 	dsb	sy
 8009000:	b662      	cpsie	i
 8009002:	603b      	str	r3, [r7, #0]
}
 8009004:	bf00      	nop
 8009006:	bf00      	nop
 8009008:	e7fd      	b.n	8009006 <vPortValidateInterruptPriority+0x6a>
	}
 800900a:	bf00      	nop
 800900c:	3714      	adds	r7, #20
 800900e:	46bd      	mov	sp, r7
 8009010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009014:	4770      	bx	lr
 8009016:	bf00      	nop
 8009018:	e000e3f0 	.word	0xe000e3f0
 800901c:	200017fc 	.word	0x200017fc
 8009020:	e000ed0c 	.word	0xe000ed0c
 8009024:	20001800 	.word	0x20001800

08009028 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b08a      	sub	sp, #40	@ 0x28
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009030:	2300      	movs	r3, #0
 8009032:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009034:	f7fe fc66 	bl	8007904 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009038:	4b5d      	ldr	r3, [pc, #372]	@ (80091b0 <pvPortMalloc+0x188>)
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	2b00      	cmp	r3, #0
 800903e:	d101      	bne.n	8009044 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009040:	f000 f920 	bl	8009284 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009044:	4b5b      	ldr	r3, [pc, #364]	@ (80091b4 <pvPortMalloc+0x18c>)
 8009046:	681a      	ldr	r2, [r3, #0]
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	4013      	ands	r3, r2
 800904c:	2b00      	cmp	r3, #0
 800904e:	f040 8094 	bne.w	800917a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	2b00      	cmp	r3, #0
 8009056:	d020      	beq.n	800909a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8009058:	2208      	movs	r2, #8
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	4413      	add	r3, r2
 800905e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	f003 0307 	and.w	r3, r3, #7
 8009066:	2b00      	cmp	r3, #0
 8009068:	d017      	beq.n	800909a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	f023 0307 	bic.w	r3, r3, #7
 8009070:	3308      	adds	r3, #8
 8009072:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	f003 0307 	and.w	r3, r3, #7
 800907a:	2b00      	cmp	r3, #0
 800907c:	d00d      	beq.n	800909a <pvPortMalloc+0x72>
	__asm volatile
 800907e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009082:	b672      	cpsid	i
 8009084:	f383 8811 	msr	BASEPRI, r3
 8009088:	f3bf 8f6f 	isb	sy
 800908c:	f3bf 8f4f 	dsb	sy
 8009090:	b662      	cpsie	i
 8009092:	617b      	str	r3, [r7, #20]
}
 8009094:	bf00      	nop
 8009096:	bf00      	nop
 8009098:	e7fd      	b.n	8009096 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	2b00      	cmp	r3, #0
 800909e:	d06c      	beq.n	800917a <pvPortMalloc+0x152>
 80090a0:	4b45      	ldr	r3, [pc, #276]	@ (80091b8 <pvPortMalloc+0x190>)
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	687a      	ldr	r2, [r7, #4]
 80090a6:	429a      	cmp	r2, r3
 80090a8:	d867      	bhi.n	800917a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80090aa:	4b44      	ldr	r3, [pc, #272]	@ (80091bc <pvPortMalloc+0x194>)
 80090ac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80090ae:	4b43      	ldr	r3, [pc, #268]	@ (80091bc <pvPortMalloc+0x194>)
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80090b4:	e004      	b.n	80090c0 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 80090b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090b8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80090ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80090c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090c2:	685b      	ldr	r3, [r3, #4]
 80090c4:	687a      	ldr	r2, [r7, #4]
 80090c6:	429a      	cmp	r2, r3
 80090c8:	d903      	bls.n	80090d2 <pvPortMalloc+0xaa>
 80090ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d1f1      	bne.n	80090b6 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80090d2:	4b37      	ldr	r3, [pc, #220]	@ (80091b0 <pvPortMalloc+0x188>)
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80090d8:	429a      	cmp	r2, r3
 80090da:	d04e      	beq.n	800917a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80090dc:	6a3b      	ldr	r3, [r7, #32]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	2208      	movs	r2, #8
 80090e2:	4413      	add	r3, r2
 80090e4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80090e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090e8:	681a      	ldr	r2, [r3, #0]
 80090ea:	6a3b      	ldr	r3, [r7, #32]
 80090ec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80090ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090f0:	685a      	ldr	r2, [r3, #4]
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	1ad2      	subs	r2, r2, r3
 80090f6:	2308      	movs	r3, #8
 80090f8:	005b      	lsls	r3, r3, #1
 80090fa:	429a      	cmp	r2, r3
 80090fc:	d922      	bls.n	8009144 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80090fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	4413      	add	r3, r2
 8009104:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009106:	69bb      	ldr	r3, [r7, #24]
 8009108:	f003 0307 	and.w	r3, r3, #7
 800910c:	2b00      	cmp	r3, #0
 800910e:	d00d      	beq.n	800912c <pvPortMalloc+0x104>
	__asm volatile
 8009110:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009114:	b672      	cpsid	i
 8009116:	f383 8811 	msr	BASEPRI, r3
 800911a:	f3bf 8f6f 	isb	sy
 800911e:	f3bf 8f4f 	dsb	sy
 8009122:	b662      	cpsie	i
 8009124:	613b      	str	r3, [r7, #16]
}
 8009126:	bf00      	nop
 8009128:	bf00      	nop
 800912a:	e7fd      	b.n	8009128 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800912c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800912e:	685a      	ldr	r2, [r3, #4]
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	1ad2      	subs	r2, r2, r3
 8009134:	69bb      	ldr	r3, [r7, #24]
 8009136:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800913a:	687a      	ldr	r2, [r7, #4]
 800913c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800913e:	69b8      	ldr	r0, [r7, #24]
 8009140:	f000 f902 	bl	8009348 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009144:	4b1c      	ldr	r3, [pc, #112]	@ (80091b8 <pvPortMalloc+0x190>)
 8009146:	681a      	ldr	r2, [r3, #0]
 8009148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800914a:	685b      	ldr	r3, [r3, #4]
 800914c:	1ad3      	subs	r3, r2, r3
 800914e:	4a1a      	ldr	r2, [pc, #104]	@ (80091b8 <pvPortMalloc+0x190>)
 8009150:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009152:	4b19      	ldr	r3, [pc, #100]	@ (80091b8 <pvPortMalloc+0x190>)
 8009154:	681a      	ldr	r2, [r3, #0]
 8009156:	4b1a      	ldr	r3, [pc, #104]	@ (80091c0 <pvPortMalloc+0x198>)
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	429a      	cmp	r2, r3
 800915c:	d203      	bcs.n	8009166 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800915e:	4b16      	ldr	r3, [pc, #88]	@ (80091b8 <pvPortMalloc+0x190>)
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	4a17      	ldr	r2, [pc, #92]	@ (80091c0 <pvPortMalloc+0x198>)
 8009164:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009168:	685a      	ldr	r2, [r3, #4]
 800916a:	4b12      	ldr	r3, [pc, #72]	@ (80091b4 <pvPortMalloc+0x18c>)
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	431a      	orrs	r2, r3
 8009170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009172:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009176:	2200      	movs	r2, #0
 8009178:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800917a:	f7fe fbd1 	bl	8007920 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800917e:	69fb      	ldr	r3, [r7, #28]
 8009180:	f003 0307 	and.w	r3, r3, #7
 8009184:	2b00      	cmp	r3, #0
 8009186:	d00d      	beq.n	80091a4 <pvPortMalloc+0x17c>
	__asm volatile
 8009188:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800918c:	b672      	cpsid	i
 800918e:	f383 8811 	msr	BASEPRI, r3
 8009192:	f3bf 8f6f 	isb	sy
 8009196:	f3bf 8f4f 	dsb	sy
 800919a:	b662      	cpsie	i
 800919c:	60fb      	str	r3, [r7, #12]
}
 800919e:	bf00      	nop
 80091a0:	bf00      	nop
 80091a2:	e7fd      	b.n	80091a0 <pvPortMalloc+0x178>
	return pvReturn;
 80091a4:	69fb      	ldr	r3, [r7, #28]
}
 80091a6:	4618      	mov	r0, r3
 80091a8:	3728      	adds	r7, #40	@ 0x28
 80091aa:	46bd      	mov	sp, r7
 80091ac:	bd80      	pop	{r7, pc}
 80091ae:	bf00      	nop
 80091b0:	2000540c 	.word	0x2000540c
 80091b4:	20005418 	.word	0x20005418
 80091b8:	20005410 	.word	0x20005410
 80091bc:	20005404 	.word	0x20005404
 80091c0:	20005414 	.word	0x20005414

080091c4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80091c4:	b580      	push	{r7, lr}
 80091c6:	b086      	sub	sp, #24
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d04e      	beq.n	8009274 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80091d6:	2308      	movs	r3, #8
 80091d8:	425b      	negs	r3, r3
 80091da:	697a      	ldr	r2, [r7, #20]
 80091dc:	4413      	add	r3, r2
 80091de:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80091e0:	697b      	ldr	r3, [r7, #20]
 80091e2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80091e4:	693b      	ldr	r3, [r7, #16]
 80091e6:	685a      	ldr	r2, [r3, #4]
 80091e8:	4b24      	ldr	r3, [pc, #144]	@ (800927c <vPortFree+0xb8>)
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	4013      	ands	r3, r2
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d10d      	bne.n	800920e <vPortFree+0x4a>
	__asm volatile
 80091f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091f6:	b672      	cpsid	i
 80091f8:	f383 8811 	msr	BASEPRI, r3
 80091fc:	f3bf 8f6f 	isb	sy
 8009200:	f3bf 8f4f 	dsb	sy
 8009204:	b662      	cpsie	i
 8009206:	60fb      	str	r3, [r7, #12]
}
 8009208:	bf00      	nop
 800920a:	bf00      	nop
 800920c:	e7fd      	b.n	800920a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800920e:	693b      	ldr	r3, [r7, #16]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d00d      	beq.n	8009232 <vPortFree+0x6e>
	__asm volatile
 8009216:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800921a:	b672      	cpsid	i
 800921c:	f383 8811 	msr	BASEPRI, r3
 8009220:	f3bf 8f6f 	isb	sy
 8009224:	f3bf 8f4f 	dsb	sy
 8009228:	b662      	cpsie	i
 800922a:	60bb      	str	r3, [r7, #8]
}
 800922c:	bf00      	nop
 800922e:	bf00      	nop
 8009230:	e7fd      	b.n	800922e <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009232:	693b      	ldr	r3, [r7, #16]
 8009234:	685a      	ldr	r2, [r3, #4]
 8009236:	4b11      	ldr	r3, [pc, #68]	@ (800927c <vPortFree+0xb8>)
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	4013      	ands	r3, r2
 800923c:	2b00      	cmp	r3, #0
 800923e:	d019      	beq.n	8009274 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009240:	693b      	ldr	r3, [r7, #16]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d115      	bne.n	8009274 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009248:	693b      	ldr	r3, [r7, #16]
 800924a:	685a      	ldr	r2, [r3, #4]
 800924c:	4b0b      	ldr	r3, [pc, #44]	@ (800927c <vPortFree+0xb8>)
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	43db      	mvns	r3, r3
 8009252:	401a      	ands	r2, r3
 8009254:	693b      	ldr	r3, [r7, #16]
 8009256:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009258:	f7fe fb54 	bl	8007904 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800925c:	693b      	ldr	r3, [r7, #16]
 800925e:	685a      	ldr	r2, [r3, #4]
 8009260:	4b07      	ldr	r3, [pc, #28]	@ (8009280 <vPortFree+0xbc>)
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	4413      	add	r3, r2
 8009266:	4a06      	ldr	r2, [pc, #24]	@ (8009280 <vPortFree+0xbc>)
 8009268:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800926a:	6938      	ldr	r0, [r7, #16]
 800926c:	f000 f86c 	bl	8009348 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009270:	f7fe fb56 	bl	8007920 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009274:	bf00      	nop
 8009276:	3718      	adds	r7, #24
 8009278:	46bd      	mov	sp, r7
 800927a:	bd80      	pop	{r7, pc}
 800927c:	20005418 	.word	0x20005418
 8009280:	20005410 	.word	0x20005410

08009284 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009284:	b480      	push	{r7}
 8009286:	b085      	sub	sp, #20
 8009288:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800928a:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800928e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009290:	4b27      	ldr	r3, [pc, #156]	@ (8009330 <prvHeapInit+0xac>)
 8009292:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	f003 0307 	and.w	r3, r3, #7
 800929a:	2b00      	cmp	r3, #0
 800929c:	d00c      	beq.n	80092b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	3307      	adds	r3, #7
 80092a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	f023 0307 	bic.w	r3, r3, #7
 80092aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80092ac:	68ba      	ldr	r2, [r7, #8]
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	1ad3      	subs	r3, r2, r3
 80092b2:	4a1f      	ldr	r2, [pc, #124]	@ (8009330 <prvHeapInit+0xac>)
 80092b4:	4413      	add	r3, r2
 80092b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80092bc:	4a1d      	ldr	r2, [pc, #116]	@ (8009334 <prvHeapInit+0xb0>)
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80092c2:	4b1c      	ldr	r3, [pc, #112]	@ (8009334 <prvHeapInit+0xb0>)
 80092c4:	2200      	movs	r2, #0
 80092c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	68ba      	ldr	r2, [r7, #8]
 80092cc:	4413      	add	r3, r2
 80092ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80092d0:	2208      	movs	r2, #8
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	1a9b      	subs	r3, r3, r2
 80092d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	f023 0307 	bic.w	r3, r3, #7
 80092de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	4a15      	ldr	r2, [pc, #84]	@ (8009338 <prvHeapInit+0xb4>)
 80092e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80092e6:	4b14      	ldr	r3, [pc, #80]	@ (8009338 <prvHeapInit+0xb4>)
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	2200      	movs	r2, #0
 80092ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80092ee:	4b12      	ldr	r3, [pc, #72]	@ (8009338 <prvHeapInit+0xb4>)
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	2200      	movs	r2, #0
 80092f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80092fa:	683b      	ldr	r3, [r7, #0]
 80092fc:	68fa      	ldr	r2, [r7, #12]
 80092fe:	1ad2      	subs	r2, r2, r3
 8009300:	683b      	ldr	r3, [r7, #0]
 8009302:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009304:	4b0c      	ldr	r3, [pc, #48]	@ (8009338 <prvHeapInit+0xb4>)
 8009306:	681a      	ldr	r2, [r3, #0]
 8009308:	683b      	ldr	r3, [r7, #0]
 800930a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800930c:	683b      	ldr	r3, [r7, #0]
 800930e:	685b      	ldr	r3, [r3, #4]
 8009310:	4a0a      	ldr	r2, [pc, #40]	@ (800933c <prvHeapInit+0xb8>)
 8009312:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009314:	683b      	ldr	r3, [r7, #0]
 8009316:	685b      	ldr	r3, [r3, #4]
 8009318:	4a09      	ldr	r2, [pc, #36]	@ (8009340 <prvHeapInit+0xbc>)
 800931a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800931c:	4b09      	ldr	r3, [pc, #36]	@ (8009344 <prvHeapInit+0xc0>)
 800931e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8009322:	601a      	str	r2, [r3, #0]
}
 8009324:	bf00      	nop
 8009326:	3714      	adds	r7, #20
 8009328:	46bd      	mov	sp, r7
 800932a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932e:	4770      	bx	lr
 8009330:	20001804 	.word	0x20001804
 8009334:	20005404 	.word	0x20005404
 8009338:	2000540c 	.word	0x2000540c
 800933c:	20005414 	.word	0x20005414
 8009340:	20005410 	.word	0x20005410
 8009344:	20005418 	.word	0x20005418

08009348 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009348:	b480      	push	{r7}
 800934a:	b085      	sub	sp, #20
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009350:	4b28      	ldr	r3, [pc, #160]	@ (80093f4 <prvInsertBlockIntoFreeList+0xac>)
 8009352:	60fb      	str	r3, [r7, #12]
 8009354:	e002      	b.n	800935c <prvInsertBlockIntoFreeList+0x14>
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	60fb      	str	r3, [r7, #12]
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	687a      	ldr	r2, [r7, #4]
 8009362:	429a      	cmp	r2, r3
 8009364:	d8f7      	bhi.n	8009356 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	685b      	ldr	r3, [r3, #4]
 800936e:	68ba      	ldr	r2, [r7, #8]
 8009370:	4413      	add	r3, r2
 8009372:	687a      	ldr	r2, [r7, #4]
 8009374:	429a      	cmp	r2, r3
 8009376:	d108      	bne.n	800938a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	685a      	ldr	r2, [r3, #4]
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	685b      	ldr	r3, [r3, #4]
 8009380:	441a      	add	r2, r3
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	685b      	ldr	r3, [r3, #4]
 8009392:	68ba      	ldr	r2, [r7, #8]
 8009394:	441a      	add	r2, r3
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	429a      	cmp	r2, r3
 800939c:	d118      	bne.n	80093d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	681a      	ldr	r2, [r3, #0]
 80093a2:	4b15      	ldr	r3, [pc, #84]	@ (80093f8 <prvInsertBlockIntoFreeList+0xb0>)
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	429a      	cmp	r2, r3
 80093a8:	d00d      	beq.n	80093c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	685a      	ldr	r2, [r3, #4]
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	685b      	ldr	r3, [r3, #4]
 80093b4:	441a      	add	r2, r3
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	681a      	ldr	r2, [r3, #0]
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	601a      	str	r2, [r3, #0]
 80093c4:	e008      	b.n	80093d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80093c6:	4b0c      	ldr	r3, [pc, #48]	@ (80093f8 <prvInsertBlockIntoFreeList+0xb0>)
 80093c8:	681a      	ldr	r2, [r3, #0]
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	601a      	str	r2, [r3, #0]
 80093ce:	e003      	b.n	80093d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	681a      	ldr	r2, [r3, #0]
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80093d8:	68fa      	ldr	r2, [r7, #12]
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	429a      	cmp	r2, r3
 80093de:	d002      	beq.n	80093e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	687a      	ldr	r2, [r7, #4]
 80093e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80093e6:	bf00      	nop
 80093e8:	3714      	adds	r7, #20
 80093ea:	46bd      	mov	sp, r7
 80093ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f0:	4770      	bx	lr
 80093f2:	bf00      	nop
 80093f4:	20005404 	.word	0x20005404
 80093f8:	2000540c 	.word	0x2000540c

080093fc <__cvt>:
 80093fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80093fe:	ed2d 8b02 	vpush	{d8}
 8009402:	eeb0 8b40 	vmov.f64	d8, d0
 8009406:	b085      	sub	sp, #20
 8009408:	4617      	mov	r7, r2
 800940a:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800940c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800940e:	ee18 2a90 	vmov	r2, s17
 8009412:	f025 0520 	bic.w	r5, r5, #32
 8009416:	2a00      	cmp	r2, #0
 8009418:	bfb6      	itet	lt
 800941a:	222d      	movlt	r2, #45	@ 0x2d
 800941c:	2200      	movge	r2, #0
 800941e:	eeb1 8b40 	vneglt.f64	d8, d0
 8009422:	2d46      	cmp	r5, #70	@ 0x46
 8009424:	460c      	mov	r4, r1
 8009426:	701a      	strb	r2, [r3, #0]
 8009428:	d004      	beq.n	8009434 <__cvt+0x38>
 800942a:	2d45      	cmp	r5, #69	@ 0x45
 800942c:	d100      	bne.n	8009430 <__cvt+0x34>
 800942e:	3401      	adds	r4, #1
 8009430:	2102      	movs	r1, #2
 8009432:	e000      	b.n	8009436 <__cvt+0x3a>
 8009434:	2103      	movs	r1, #3
 8009436:	ab03      	add	r3, sp, #12
 8009438:	9301      	str	r3, [sp, #4]
 800943a:	ab02      	add	r3, sp, #8
 800943c:	9300      	str	r3, [sp, #0]
 800943e:	4622      	mov	r2, r4
 8009440:	4633      	mov	r3, r6
 8009442:	eeb0 0b48 	vmov.f64	d0, d8
 8009446:	f001 f8eb 	bl	800a620 <_dtoa_r>
 800944a:	2d47      	cmp	r5, #71	@ 0x47
 800944c:	d114      	bne.n	8009478 <__cvt+0x7c>
 800944e:	07fb      	lsls	r3, r7, #31
 8009450:	d50a      	bpl.n	8009468 <__cvt+0x6c>
 8009452:	1902      	adds	r2, r0, r4
 8009454:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009458:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800945c:	bf08      	it	eq
 800945e:	9203      	streq	r2, [sp, #12]
 8009460:	2130      	movs	r1, #48	@ 0x30
 8009462:	9b03      	ldr	r3, [sp, #12]
 8009464:	4293      	cmp	r3, r2
 8009466:	d319      	bcc.n	800949c <__cvt+0xa0>
 8009468:	9b03      	ldr	r3, [sp, #12]
 800946a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800946c:	1a1b      	subs	r3, r3, r0
 800946e:	6013      	str	r3, [r2, #0]
 8009470:	b005      	add	sp, #20
 8009472:	ecbd 8b02 	vpop	{d8}
 8009476:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009478:	2d46      	cmp	r5, #70	@ 0x46
 800947a:	eb00 0204 	add.w	r2, r0, r4
 800947e:	d1e9      	bne.n	8009454 <__cvt+0x58>
 8009480:	7803      	ldrb	r3, [r0, #0]
 8009482:	2b30      	cmp	r3, #48	@ 0x30
 8009484:	d107      	bne.n	8009496 <__cvt+0x9a>
 8009486:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800948a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800948e:	bf1c      	itt	ne
 8009490:	f1c4 0401 	rsbne	r4, r4, #1
 8009494:	6034      	strne	r4, [r6, #0]
 8009496:	6833      	ldr	r3, [r6, #0]
 8009498:	441a      	add	r2, r3
 800949a:	e7db      	b.n	8009454 <__cvt+0x58>
 800949c:	1c5c      	adds	r4, r3, #1
 800949e:	9403      	str	r4, [sp, #12]
 80094a0:	7019      	strb	r1, [r3, #0]
 80094a2:	e7de      	b.n	8009462 <__cvt+0x66>

080094a4 <__exponent>:
 80094a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80094a6:	2900      	cmp	r1, #0
 80094a8:	bfba      	itte	lt
 80094aa:	4249      	neglt	r1, r1
 80094ac:	232d      	movlt	r3, #45	@ 0x2d
 80094ae:	232b      	movge	r3, #43	@ 0x2b
 80094b0:	2909      	cmp	r1, #9
 80094b2:	7002      	strb	r2, [r0, #0]
 80094b4:	7043      	strb	r3, [r0, #1]
 80094b6:	dd29      	ble.n	800950c <__exponent+0x68>
 80094b8:	f10d 0307 	add.w	r3, sp, #7
 80094bc:	461d      	mov	r5, r3
 80094be:	270a      	movs	r7, #10
 80094c0:	461a      	mov	r2, r3
 80094c2:	fbb1 f6f7 	udiv	r6, r1, r7
 80094c6:	fb07 1416 	mls	r4, r7, r6, r1
 80094ca:	3430      	adds	r4, #48	@ 0x30
 80094cc:	f802 4c01 	strb.w	r4, [r2, #-1]
 80094d0:	460c      	mov	r4, r1
 80094d2:	2c63      	cmp	r4, #99	@ 0x63
 80094d4:	f103 33ff 	add.w	r3, r3, #4294967295
 80094d8:	4631      	mov	r1, r6
 80094da:	dcf1      	bgt.n	80094c0 <__exponent+0x1c>
 80094dc:	3130      	adds	r1, #48	@ 0x30
 80094de:	1e94      	subs	r4, r2, #2
 80094e0:	f803 1c01 	strb.w	r1, [r3, #-1]
 80094e4:	1c41      	adds	r1, r0, #1
 80094e6:	4623      	mov	r3, r4
 80094e8:	42ab      	cmp	r3, r5
 80094ea:	d30a      	bcc.n	8009502 <__exponent+0x5e>
 80094ec:	f10d 0309 	add.w	r3, sp, #9
 80094f0:	1a9b      	subs	r3, r3, r2
 80094f2:	42ac      	cmp	r4, r5
 80094f4:	bf88      	it	hi
 80094f6:	2300      	movhi	r3, #0
 80094f8:	3302      	adds	r3, #2
 80094fa:	4403      	add	r3, r0
 80094fc:	1a18      	subs	r0, r3, r0
 80094fe:	b003      	add	sp, #12
 8009500:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009502:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009506:	f801 6f01 	strb.w	r6, [r1, #1]!
 800950a:	e7ed      	b.n	80094e8 <__exponent+0x44>
 800950c:	2330      	movs	r3, #48	@ 0x30
 800950e:	3130      	adds	r1, #48	@ 0x30
 8009510:	7083      	strb	r3, [r0, #2]
 8009512:	70c1      	strb	r1, [r0, #3]
 8009514:	1d03      	adds	r3, r0, #4
 8009516:	e7f1      	b.n	80094fc <__exponent+0x58>

08009518 <_printf_float>:
 8009518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800951c:	b08d      	sub	sp, #52	@ 0x34
 800951e:	460c      	mov	r4, r1
 8009520:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009524:	4616      	mov	r6, r2
 8009526:	461f      	mov	r7, r3
 8009528:	4605      	mov	r5, r0
 800952a:	f000 ff07 	bl	800a33c <_localeconv_r>
 800952e:	f8d0 b000 	ldr.w	fp, [r0]
 8009532:	4658      	mov	r0, fp
 8009534:	f7f6 fed4 	bl	80002e0 <strlen>
 8009538:	2300      	movs	r3, #0
 800953a:	930a      	str	r3, [sp, #40]	@ 0x28
 800953c:	f8d8 3000 	ldr.w	r3, [r8]
 8009540:	f894 9018 	ldrb.w	r9, [r4, #24]
 8009544:	6822      	ldr	r2, [r4, #0]
 8009546:	9005      	str	r0, [sp, #20]
 8009548:	3307      	adds	r3, #7
 800954a:	f023 0307 	bic.w	r3, r3, #7
 800954e:	f103 0108 	add.w	r1, r3, #8
 8009552:	f8c8 1000 	str.w	r1, [r8]
 8009556:	ed93 0b00 	vldr	d0, [r3]
 800955a:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 80097b8 <_printf_float+0x2a0>
 800955e:	eeb0 7bc0 	vabs.f64	d7, d0
 8009562:	eeb4 7b46 	vcmp.f64	d7, d6
 8009566:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800956a:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800956e:	dd24      	ble.n	80095ba <_printf_float+0xa2>
 8009570:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8009574:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009578:	d502      	bpl.n	8009580 <_printf_float+0x68>
 800957a:	232d      	movs	r3, #45	@ 0x2d
 800957c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009580:	498f      	ldr	r1, [pc, #572]	@ (80097c0 <_printf_float+0x2a8>)
 8009582:	4b90      	ldr	r3, [pc, #576]	@ (80097c4 <_printf_float+0x2ac>)
 8009584:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8009588:	bf8c      	ite	hi
 800958a:	4688      	movhi	r8, r1
 800958c:	4698      	movls	r8, r3
 800958e:	f022 0204 	bic.w	r2, r2, #4
 8009592:	2303      	movs	r3, #3
 8009594:	6123      	str	r3, [r4, #16]
 8009596:	6022      	str	r2, [r4, #0]
 8009598:	f04f 0a00 	mov.w	sl, #0
 800959c:	9700      	str	r7, [sp, #0]
 800959e:	4633      	mov	r3, r6
 80095a0:	aa0b      	add	r2, sp, #44	@ 0x2c
 80095a2:	4621      	mov	r1, r4
 80095a4:	4628      	mov	r0, r5
 80095a6:	f000 f9d1 	bl	800994c <_printf_common>
 80095aa:	3001      	adds	r0, #1
 80095ac:	f040 8089 	bne.w	80096c2 <_printf_float+0x1aa>
 80095b0:	f04f 30ff 	mov.w	r0, #4294967295
 80095b4:	b00d      	add	sp, #52	@ 0x34
 80095b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095ba:	eeb4 0b40 	vcmp.f64	d0, d0
 80095be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095c2:	d709      	bvc.n	80095d8 <_printf_float+0xc0>
 80095c4:	ee10 3a90 	vmov	r3, s1
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	bfbc      	itt	lt
 80095cc:	232d      	movlt	r3, #45	@ 0x2d
 80095ce:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80095d2:	497d      	ldr	r1, [pc, #500]	@ (80097c8 <_printf_float+0x2b0>)
 80095d4:	4b7d      	ldr	r3, [pc, #500]	@ (80097cc <_printf_float+0x2b4>)
 80095d6:	e7d5      	b.n	8009584 <_printf_float+0x6c>
 80095d8:	6863      	ldr	r3, [r4, #4]
 80095da:	1c59      	adds	r1, r3, #1
 80095dc:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 80095e0:	d139      	bne.n	8009656 <_printf_float+0x13e>
 80095e2:	2306      	movs	r3, #6
 80095e4:	6063      	str	r3, [r4, #4]
 80095e6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80095ea:	2300      	movs	r3, #0
 80095ec:	6022      	str	r2, [r4, #0]
 80095ee:	9303      	str	r3, [sp, #12]
 80095f0:	ab0a      	add	r3, sp, #40	@ 0x28
 80095f2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80095f6:	ab09      	add	r3, sp, #36	@ 0x24
 80095f8:	9300      	str	r3, [sp, #0]
 80095fa:	6861      	ldr	r1, [r4, #4]
 80095fc:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8009600:	4628      	mov	r0, r5
 8009602:	f7ff fefb 	bl	80093fc <__cvt>
 8009606:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800960a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800960c:	4680      	mov	r8, r0
 800960e:	d129      	bne.n	8009664 <_printf_float+0x14c>
 8009610:	1cc8      	adds	r0, r1, #3
 8009612:	db02      	blt.n	800961a <_printf_float+0x102>
 8009614:	6863      	ldr	r3, [r4, #4]
 8009616:	4299      	cmp	r1, r3
 8009618:	dd41      	ble.n	800969e <_printf_float+0x186>
 800961a:	f1a9 0902 	sub.w	r9, r9, #2
 800961e:	fa5f f989 	uxtb.w	r9, r9
 8009622:	3901      	subs	r1, #1
 8009624:	464a      	mov	r2, r9
 8009626:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800962a:	9109      	str	r1, [sp, #36]	@ 0x24
 800962c:	f7ff ff3a 	bl	80094a4 <__exponent>
 8009630:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009632:	1813      	adds	r3, r2, r0
 8009634:	2a01      	cmp	r2, #1
 8009636:	4682      	mov	sl, r0
 8009638:	6123      	str	r3, [r4, #16]
 800963a:	dc02      	bgt.n	8009642 <_printf_float+0x12a>
 800963c:	6822      	ldr	r2, [r4, #0]
 800963e:	07d2      	lsls	r2, r2, #31
 8009640:	d501      	bpl.n	8009646 <_printf_float+0x12e>
 8009642:	3301      	adds	r3, #1
 8009644:	6123      	str	r3, [r4, #16]
 8009646:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800964a:	2b00      	cmp	r3, #0
 800964c:	d0a6      	beq.n	800959c <_printf_float+0x84>
 800964e:	232d      	movs	r3, #45	@ 0x2d
 8009650:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009654:	e7a2      	b.n	800959c <_printf_float+0x84>
 8009656:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800965a:	d1c4      	bne.n	80095e6 <_printf_float+0xce>
 800965c:	2b00      	cmp	r3, #0
 800965e:	d1c2      	bne.n	80095e6 <_printf_float+0xce>
 8009660:	2301      	movs	r3, #1
 8009662:	e7bf      	b.n	80095e4 <_printf_float+0xcc>
 8009664:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8009668:	d9db      	bls.n	8009622 <_printf_float+0x10a>
 800966a:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800966e:	d118      	bne.n	80096a2 <_printf_float+0x18a>
 8009670:	2900      	cmp	r1, #0
 8009672:	6863      	ldr	r3, [r4, #4]
 8009674:	dd0b      	ble.n	800968e <_printf_float+0x176>
 8009676:	6121      	str	r1, [r4, #16]
 8009678:	b913      	cbnz	r3, 8009680 <_printf_float+0x168>
 800967a:	6822      	ldr	r2, [r4, #0]
 800967c:	07d0      	lsls	r0, r2, #31
 800967e:	d502      	bpl.n	8009686 <_printf_float+0x16e>
 8009680:	3301      	adds	r3, #1
 8009682:	440b      	add	r3, r1
 8009684:	6123      	str	r3, [r4, #16]
 8009686:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009688:	f04f 0a00 	mov.w	sl, #0
 800968c:	e7db      	b.n	8009646 <_printf_float+0x12e>
 800968e:	b913      	cbnz	r3, 8009696 <_printf_float+0x17e>
 8009690:	6822      	ldr	r2, [r4, #0]
 8009692:	07d2      	lsls	r2, r2, #31
 8009694:	d501      	bpl.n	800969a <_printf_float+0x182>
 8009696:	3302      	adds	r3, #2
 8009698:	e7f4      	b.n	8009684 <_printf_float+0x16c>
 800969a:	2301      	movs	r3, #1
 800969c:	e7f2      	b.n	8009684 <_printf_float+0x16c>
 800969e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 80096a2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80096a4:	4299      	cmp	r1, r3
 80096a6:	db05      	blt.n	80096b4 <_printf_float+0x19c>
 80096a8:	6823      	ldr	r3, [r4, #0]
 80096aa:	6121      	str	r1, [r4, #16]
 80096ac:	07d8      	lsls	r0, r3, #31
 80096ae:	d5ea      	bpl.n	8009686 <_printf_float+0x16e>
 80096b0:	1c4b      	adds	r3, r1, #1
 80096b2:	e7e7      	b.n	8009684 <_printf_float+0x16c>
 80096b4:	2900      	cmp	r1, #0
 80096b6:	bfd4      	ite	le
 80096b8:	f1c1 0202 	rsble	r2, r1, #2
 80096bc:	2201      	movgt	r2, #1
 80096be:	4413      	add	r3, r2
 80096c0:	e7e0      	b.n	8009684 <_printf_float+0x16c>
 80096c2:	6823      	ldr	r3, [r4, #0]
 80096c4:	055a      	lsls	r2, r3, #21
 80096c6:	d407      	bmi.n	80096d8 <_printf_float+0x1c0>
 80096c8:	6923      	ldr	r3, [r4, #16]
 80096ca:	4642      	mov	r2, r8
 80096cc:	4631      	mov	r1, r6
 80096ce:	4628      	mov	r0, r5
 80096d0:	47b8      	blx	r7
 80096d2:	3001      	adds	r0, #1
 80096d4:	d12a      	bne.n	800972c <_printf_float+0x214>
 80096d6:	e76b      	b.n	80095b0 <_printf_float+0x98>
 80096d8:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 80096dc:	f240 80e0 	bls.w	80098a0 <_printf_float+0x388>
 80096e0:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 80096e4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80096e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096ec:	d133      	bne.n	8009756 <_printf_float+0x23e>
 80096ee:	4a38      	ldr	r2, [pc, #224]	@ (80097d0 <_printf_float+0x2b8>)
 80096f0:	2301      	movs	r3, #1
 80096f2:	4631      	mov	r1, r6
 80096f4:	4628      	mov	r0, r5
 80096f6:	47b8      	blx	r7
 80096f8:	3001      	adds	r0, #1
 80096fa:	f43f af59 	beq.w	80095b0 <_printf_float+0x98>
 80096fe:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8009702:	4543      	cmp	r3, r8
 8009704:	db02      	blt.n	800970c <_printf_float+0x1f4>
 8009706:	6823      	ldr	r3, [r4, #0]
 8009708:	07d8      	lsls	r0, r3, #31
 800970a:	d50f      	bpl.n	800972c <_printf_float+0x214>
 800970c:	9b05      	ldr	r3, [sp, #20]
 800970e:	465a      	mov	r2, fp
 8009710:	4631      	mov	r1, r6
 8009712:	4628      	mov	r0, r5
 8009714:	47b8      	blx	r7
 8009716:	3001      	adds	r0, #1
 8009718:	f43f af4a 	beq.w	80095b0 <_printf_float+0x98>
 800971c:	f04f 0900 	mov.w	r9, #0
 8009720:	f108 38ff 	add.w	r8, r8, #4294967295
 8009724:	f104 0a1a 	add.w	sl, r4, #26
 8009728:	45c8      	cmp	r8, r9
 800972a:	dc09      	bgt.n	8009740 <_printf_float+0x228>
 800972c:	6823      	ldr	r3, [r4, #0]
 800972e:	079b      	lsls	r3, r3, #30
 8009730:	f100 8107 	bmi.w	8009942 <_printf_float+0x42a>
 8009734:	68e0      	ldr	r0, [r4, #12]
 8009736:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009738:	4298      	cmp	r0, r3
 800973a:	bfb8      	it	lt
 800973c:	4618      	movlt	r0, r3
 800973e:	e739      	b.n	80095b4 <_printf_float+0x9c>
 8009740:	2301      	movs	r3, #1
 8009742:	4652      	mov	r2, sl
 8009744:	4631      	mov	r1, r6
 8009746:	4628      	mov	r0, r5
 8009748:	47b8      	blx	r7
 800974a:	3001      	adds	r0, #1
 800974c:	f43f af30 	beq.w	80095b0 <_printf_float+0x98>
 8009750:	f109 0901 	add.w	r9, r9, #1
 8009754:	e7e8      	b.n	8009728 <_printf_float+0x210>
 8009756:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009758:	2b00      	cmp	r3, #0
 800975a:	dc3b      	bgt.n	80097d4 <_printf_float+0x2bc>
 800975c:	4a1c      	ldr	r2, [pc, #112]	@ (80097d0 <_printf_float+0x2b8>)
 800975e:	2301      	movs	r3, #1
 8009760:	4631      	mov	r1, r6
 8009762:	4628      	mov	r0, r5
 8009764:	47b8      	blx	r7
 8009766:	3001      	adds	r0, #1
 8009768:	f43f af22 	beq.w	80095b0 <_printf_float+0x98>
 800976c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009770:	ea59 0303 	orrs.w	r3, r9, r3
 8009774:	d102      	bne.n	800977c <_printf_float+0x264>
 8009776:	6823      	ldr	r3, [r4, #0]
 8009778:	07d9      	lsls	r1, r3, #31
 800977a:	d5d7      	bpl.n	800972c <_printf_float+0x214>
 800977c:	9b05      	ldr	r3, [sp, #20]
 800977e:	465a      	mov	r2, fp
 8009780:	4631      	mov	r1, r6
 8009782:	4628      	mov	r0, r5
 8009784:	47b8      	blx	r7
 8009786:	3001      	adds	r0, #1
 8009788:	f43f af12 	beq.w	80095b0 <_printf_float+0x98>
 800978c:	f04f 0a00 	mov.w	sl, #0
 8009790:	f104 0b1a 	add.w	fp, r4, #26
 8009794:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009796:	425b      	negs	r3, r3
 8009798:	4553      	cmp	r3, sl
 800979a:	dc01      	bgt.n	80097a0 <_printf_float+0x288>
 800979c:	464b      	mov	r3, r9
 800979e:	e794      	b.n	80096ca <_printf_float+0x1b2>
 80097a0:	2301      	movs	r3, #1
 80097a2:	465a      	mov	r2, fp
 80097a4:	4631      	mov	r1, r6
 80097a6:	4628      	mov	r0, r5
 80097a8:	47b8      	blx	r7
 80097aa:	3001      	adds	r0, #1
 80097ac:	f43f af00 	beq.w	80095b0 <_printf_float+0x98>
 80097b0:	f10a 0a01 	add.w	sl, sl, #1
 80097b4:	e7ee      	b.n	8009794 <_printf_float+0x27c>
 80097b6:	bf00      	nop
 80097b8:	ffffffff 	.word	0xffffffff
 80097bc:	7fefffff 	.word	0x7fefffff
 80097c0:	0800dbf0 	.word	0x0800dbf0
 80097c4:	0800dbec 	.word	0x0800dbec
 80097c8:	0800dbf8 	.word	0x0800dbf8
 80097cc:	0800dbf4 	.word	0x0800dbf4
 80097d0:	0800dbfc 	.word	0x0800dbfc
 80097d4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80097d6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80097da:	4553      	cmp	r3, sl
 80097dc:	bfa8      	it	ge
 80097de:	4653      	movge	r3, sl
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	4699      	mov	r9, r3
 80097e4:	dc37      	bgt.n	8009856 <_printf_float+0x33e>
 80097e6:	2300      	movs	r3, #0
 80097e8:	9307      	str	r3, [sp, #28]
 80097ea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80097ee:	f104 021a 	add.w	r2, r4, #26
 80097f2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80097f4:	9907      	ldr	r1, [sp, #28]
 80097f6:	9306      	str	r3, [sp, #24]
 80097f8:	eba3 0309 	sub.w	r3, r3, r9
 80097fc:	428b      	cmp	r3, r1
 80097fe:	dc31      	bgt.n	8009864 <_printf_float+0x34c>
 8009800:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009802:	459a      	cmp	sl, r3
 8009804:	dc3b      	bgt.n	800987e <_printf_float+0x366>
 8009806:	6823      	ldr	r3, [r4, #0]
 8009808:	07da      	lsls	r2, r3, #31
 800980a:	d438      	bmi.n	800987e <_printf_float+0x366>
 800980c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800980e:	ebaa 0903 	sub.w	r9, sl, r3
 8009812:	9b06      	ldr	r3, [sp, #24]
 8009814:	ebaa 0303 	sub.w	r3, sl, r3
 8009818:	4599      	cmp	r9, r3
 800981a:	bfa8      	it	ge
 800981c:	4699      	movge	r9, r3
 800981e:	f1b9 0f00 	cmp.w	r9, #0
 8009822:	dc34      	bgt.n	800988e <_printf_float+0x376>
 8009824:	f04f 0800 	mov.w	r8, #0
 8009828:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800982c:	f104 0b1a 	add.w	fp, r4, #26
 8009830:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009832:	ebaa 0303 	sub.w	r3, sl, r3
 8009836:	eba3 0309 	sub.w	r3, r3, r9
 800983a:	4543      	cmp	r3, r8
 800983c:	f77f af76 	ble.w	800972c <_printf_float+0x214>
 8009840:	2301      	movs	r3, #1
 8009842:	465a      	mov	r2, fp
 8009844:	4631      	mov	r1, r6
 8009846:	4628      	mov	r0, r5
 8009848:	47b8      	blx	r7
 800984a:	3001      	adds	r0, #1
 800984c:	f43f aeb0 	beq.w	80095b0 <_printf_float+0x98>
 8009850:	f108 0801 	add.w	r8, r8, #1
 8009854:	e7ec      	b.n	8009830 <_printf_float+0x318>
 8009856:	4642      	mov	r2, r8
 8009858:	4631      	mov	r1, r6
 800985a:	4628      	mov	r0, r5
 800985c:	47b8      	blx	r7
 800985e:	3001      	adds	r0, #1
 8009860:	d1c1      	bne.n	80097e6 <_printf_float+0x2ce>
 8009862:	e6a5      	b.n	80095b0 <_printf_float+0x98>
 8009864:	2301      	movs	r3, #1
 8009866:	4631      	mov	r1, r6
 8009868:	4628      	mov	r0, r5
 800986a:	9206      	str	r2, [sp, #24]
 800986c:	47b8      	blx	r7
 800986e:	3001      	adds	r0, #1
 8009870:	f43f ae9e 	beq.w	80095b0 <_printf_float+0x98>
 8009874:	9b07      	ldr	r3, [sp, #28]
 8009876:	9a06      	ldr	r2, [sp, #24]
 8009878:	3301      	adds	r3, #1
 800987a:	9307      	str	r3, [sp, #28]
 800987c:	e7b9      	b.n	80097f2 <_printf_float+0x2da>
 800987e:	9b05      	ldr	r3, [sp, #20]
 8009880:	465a      	mov	r2, fp
 8009882:	4631      	mov	r1, r6
 8009884:	4628      	mov	r0, r5
 8009886:	47b8      	blx	r7
 8009888:	3001      	adds	r0, #1
 800988a:	d1bf      	bne.n	800980c <_printf_float+0x2f4>
 800988c:	e690      	b.n	80095b0 <_printf_float+0x98>
 800988e:	9a06      	ldr	r2, [sp, #24]
 8009890:	464b      	mov	r3, r9
 8009892:	4442      	add	r2, r8
 8009894:	4631      	mov	r1, r6
 8009896:	4628      	mov	r0, r5
 8009898:	47b8      	blx	r7
 800989a:	3001      	adds	r0, #1
 800989c:	d1c2      	bne.n	8009824 <_printf_float+0x30c>
 800989e:	e687      	b.n	80095b0 <_printf_float+0x98>
 80098a0:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 80098a4:	f1b9 0f01 	cmp.w	r9, #1
 80098a8:	dc01      	bgt.n	80098ae <_printf_float+0x396>
 80098aa:	07db      	lsls	r3, r3, #31
 80098ac:	d536      	bpl.n	800991c <_printf_float+0x404>
 80098ae:	2301      	movs	r3, #1
 80098b0:	4642      	mov	r2, r8
 80098b2:	4631      	mov	r1, r6
 80098b4:	4628      	mov	r0, r5
 80098b6:	47b8      	blx	r7
 80098b8:	3001      	adds	r0, #1
 80098ba:	f43f ae79 	beq.w	80095b0 <_printf_float+0x98>
 80098be:	9b05      	ldr	r3, [sp, #20]
 80098c0:	465a      	mov	r2, fp
 80098c2:	4631      	mov	r1, r6
 80098c4:	4628      	mov	r0, r5
 80098c6:	47b8      	blx	r7
 80098c8:	3001      	adds	r0, #1
 80098ca:	f43f ae71 	beq.w	80095b0 <_printf_float+0x98>
 80098ce:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 80098d2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80098d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098da:	f109 39ff 	add.w	r9, r9, #4294967295
 80098de:	d018      	beq.n	8009912 <_printf_float+0x3fa>
 80098e0:	464b      	mov	r3, r9
 80098e2:	f108 0201 	add.w	r2, r8, #1
 80098e6:	4631      	mov	r1, r6
 80098e8:	4628      	mov	r0, r5
 80098ea:	47b8      	blx	r7
 80098ec:	3001      	adds	r0, #1
 80098ee:	d10c      	bne.n	800990a <_printf_float+0x3f2>
 80098f0:	e65e      	b.n	80095b0 <_printf_float+0x98>
 80098f2:	2301      	movs	r3, #1
 80098f4:	465a      	mov	r2, fp
 80098f6:	4631      	mov	r1, r6
 80098f8:	4628      	mov	r0, r5
 80098fa:	47b8      	blx	r7
 80098fc:	3001      	adds	r0, #1
 80098fe:	f43f ae57 	beq.w	80095b0 <_printf_float+0x98>
 8009902:	f108 0801 	add.w	r8, r8, #1
 8009906:	45c8      	cmp	r8, r9
 8009908:	dbf3      	blt.n	80098f2 <_printf_float+0x3da>
 800990a:	4653      	mov	r3, sl
 800990c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009910:	e6dc      	b.n	80096cc <_printf_float+0x1b4>
 8009912:	f04f 0800 	mov.w	r8, #0
 8009916:	f104 0b1a 	add.w	fp, r4, #26
 800991a:	e7f4      	b.n	8009906 <_printf_float+0x3ee>
 800991c:	2301      	movs	r3, #1
 800991e:	4642      	mov	r2, r8
 8009920:	e7e1      	b.n	80098e6 <_printf_float+0x3ce>
 8009922:	2301      	movs	r3, #1
 8009924:	464a      	mov	r2, r9
 8009926:	4631      	mov	r1, r6
 8009928:	4628      	mov	r0, r5
 800992a:	47b8      	blx	r7
 800992c:	3001      	adds	r0, #1
 800992e:	f43f ae3f 	beq.w	80095b0 <_printf_float+0x98>
 8009932:	f108 0801 	add.w	r8, r8, #1
 8009936:	68e3      	ldr	r3, [r4, #12]
 8009938:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800993a:	1a5b      	subs	r3, r3, r1
 800993c:	4543      	cmp	r3, r8
 800993e:	dcf0      	bgt.n	8009922 <_printf_float+0x40a>
 8009940:	e6f8      	b.n	8009734 <_printf_float+0x21c>
 8009942:	f04f 0800 	mov.w	r8, #0
 8009946:	f104 0919 	add.w	r9, r4, #25
 800994a:	e7f4      	b.n	8009936 <_printf_float+0x41e>

0800994c <_printf_common>:
 800994c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009950:	4616      	mov	r6, r2
 8009952:	4698      	mov	r8, r3
 8009954:	688a      	ldr	r2, [r1, #8]
 8009956:	690b      	ldr	r3, [r1, #16]
 8009958:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800995c:	4293      	cmp	r3, r2
 800995e:	bfb8      	it	lt
 8009960:	4613      	movlt	r3, r2
 8009962:	6033      	str	r3, [r6, #0]
 8009964:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009968:	4607      	mov	r7, r0
 800996a:	460c      	mov	r4, r1
 800996c:	b10a      	cbz	r2, 8009972 <_printf_common+0x26>
 800996e:	3301      	adds	r3, #1
 8009970:	6033      	str	r3, [r6, #0]
 8009972:	6823      	ldr	r3, [r4, #0]
 8009974:	0699      	lsls	r1, r3, #26
 8009976:	bf42      	ittt	mi
 8009978:	6833      	ldrmi	r3, [r6, #0]
 800997a:	3302      	addmi	r3, #2
 800997c:	6033      	strmi	r3, [r6, #0]
 800997e:	6825      	ldr	r5, [r4, #0]
 8009980:	f015 0506 	ands.w	r5, r5, #6
 8009984:	d106      	bne.n	8009994 <_printf_common+0x48>
 8009986:	f104 0a19 	add.w	sl, r4, #25
 800998a:	68e3      	ldr	r3, [r4, #12]
 800998c:	6832      	ldr	r2, [r6, #0]
 800998e:	1a9b      	subs	r3, r3, r2
 8009990:	42ab      	cmp	r3, r5
 8009992:	dc26      	bgt.n	80099e2 <_printf_common+0x96>
 8009994:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009998:	6822      	ldr	r2, [r4, #0]
 800999a:	3b00      	subs	r3, #0
 800999c:	bf18      	it	ne
 800999e:	2301      	movne	r3, #1
 80099a0:	0692      	lsls	r2, r2, #26
 80099a2:	d42b      	bmi.n	80099fc <_printf_common+0xb0>
 80099a4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80099a8:	4641      	mov	r1, r8
 80099aa:	4638      	mov	r0, r7
 80099ac:	47c8      	blx	r9
 80099ae:	3001      	adds	r0, #1
 80099b0:	d01e      	beq.n	80099f0 <_printf_common+0xa4>
 80099b2:	6823      	ldr	r3, [r4, #0]
 80099b4:	6922      	ldr	r2, [r4, #16]
 80099b6:	f003 0306 	and.w	r3, r3, #6
 80099ba:	2b04      	cmp	r3, #4
 80099bc:	bf02      	ittt	eq
 80099be:	68e5      	ldreq	r5, [r4, #12]
 80099c0:	6833      	ldreq	r3, [r6, #0]
 80099c2:	1aed      	subeq	r5, r5, r3
 80099c4:	68a3      	ldr	r3, [r4, #8]
 80099c6:	bf0c      	ite	eq
 80099c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80099cc:	2500      	movne	r5, #0
 80099ce:	4293      	cmp	r3, r2
 80099d0:	bfc4      	itt	gt
 80099d2:	1a9b      	subgt	r3, r3, r2
 80099d4:	18ed      	addgt	r5, r5, r3
 80099d6:	2600      	movs	r6, #0
 80099d8:	341a      	adds	r4, #26
 80099da:	42b5      	cmp	r5, r6
 80099dc:	d11a      	bne.n	8009a14 <_printf_common+0xc8>
 80099de:	2000      	movs	r0, #0
 80099e0:	e008      	b.n	80099f4 <_printf_common+0xa8>
 80099e2:	2301      	movs	r3, #1
 80099e4:	4652      	mov	r2, sl
 80099e6:	4641      	mov	r1, r8
 80099e8:	4638      	mov	r0, r7
 80099ea:	47c8      	blx	r9
 80099ec:	3001      	adds	r0, #1
 80099ee:	d103      	bne.n	80099f8 <_printf_common+0xac>
 80099f0:	f04f 30ff 	mov.w	r0, #4294967295
 80099f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099f8:	3501      	adds	r5, #1
 80099fa:	e7c6      	b.n	800998a <_printf_common+0x3e>
 80099fc:	18e1      	adds	r1, r4, r3
 80099fe:	1c5a      	adds	r2, r3, #1
 8009a00:	2030      	movs	r0, #48	@ 0x30
 8009a02:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009a06:	4422      	add	r2, r4
 8009a08:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009a0c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009a10:	3302      	adds	r3, #2
 8009a12:	e7c7      	b.n	80099a4 <_printf_common+0x58>
 8009a14:	2301      	movs	r3, #1
 8009a16:	4622      	mov	r2, r4
 8009a18:	4641      	mov	r1, r8
 8009a1a:	4638      	mov	r0, r7
 8009a1c:	47c8      	blx	r9
 8009a1e:	3001      	adds	r0, #1
 8009a20:	d0e6      	beq.n	80099f0 <_printf_common+0xa4>
 8009a22:	3601      	adds	r6, #1
 8009a24:	e7d9      	b.n	80099da <_printf_common+0x8e>
	...

08009a28 <_printf_i>:
 8009a28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009a2c:	7e0f      	ldrb	r7, [r1, #24]
 8009a2e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009a30:	2f78      	cmp	r7, #120	@ 0x78
 8009a32:	4691      	mov	r9, r2
 8009a34:	4680      	mov	r8, r0
 8009a36:	460c      	mov	r4, r1
 8009a38:	469a      	mov	sl, r3
 8009a3a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009a3e:	d807      	bhi.n	8009a50 <_printf_i+0x28>
 8009a40:	2f62      	cmp	r7, #98	@ 0x62
 8009a42:	d80a      	bhi.n	8009a5a <_printf_i+0x32>
 8009a44:	2f00      	cmp	r7, #0
 8009a46:	f000 80d1 	beq.w	8009bec <_printf_i+0x1c4>
 8009a4a:	2f58      	cmp	r7, #88	@ 0x58
 8009a4c:	f000 80b8 	beq.w	8009bc0 <_printf_i+0x198>
 8009a50:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009a54:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009a58:	e03a      	b.n	8009ad0 <_printf_i+0xa8>
 8009a5a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009a5e:	2b15      	cmp	r3, #21
 8009a60:	d8f6      	bhi.n	8009a50 <_printf_i+0x28>
 8009a62:	a101      	add	r1, pc, #4	@ (adr r1, 8009a68 <_printf_i+0x40>)
 8009a64:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009a68:	08009ac1 	.word	0x08009ac1
 8009a6c:	08009ad5 	.word	0x08009ad5
 8009a70:	08009a51 	.word	0x08009a51
 8009a74:	08009a51 	.word	0x08009a51
 8009a78:	08009a51 	.word	0x08009a51
 8009a7c:	08009a51 	.word	0x08009a51
 8009a80:	08009ad5 	.word	0x08009ad5
 8009a84:	08009a51 	.word	0x08009a51
 8009a88:	08009a51 	.word	0x08009a51
 8009a8c:	08009a51 	.word	0x08009a51
 8009a90:	08009a51 	.word	0x08009a51
 8009a94:	08009bd3 	.word	0x08009bd3
 8009a98:	08009aff 	.word	0x08009aff
 8009a9c:	08009b8d 	.word	0x08009b8d
 8009aa0:	08009a51 	.word	0x08009a51
 8009aa4:	08009a51 	.word	0x08009a51
 8009aa8:	08009bf5 	.word	0x08009bf5
 8009aac:	08009a51 	.word	0x08009a51
 8009ab0:	08009aff 	.word	0x08009aff
 8009ab4:	08009a51 	.word	0x08009a51
 8009ab8:	08009a51 	.word	0x08009a51
 8009abc:	08009b95 	.word	0x08009b95
 8009ac0:	6833      	ldr	r3, [r6, #0]
 8009ac2:	1d1a      	adds	r2, r3, #4
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	6032      	str	r2, [r6, #0]
 8009ac8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009acc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009ad0:	2301      	movs	r3, #1
 8009ad2:	e09c      	b.n	8009c0e <_printf_i+0x1e6>
 8009ad4:	6833      	ldr	r3, [r6, #0]
 8009ad6:	6820      	ldr	r0, [r4, #0]
 8009ad8:	1d19      	adds	r1, r3, #4
 8009ada:	6031      	str	r1, [r6, #0]
 8009adc:	0606      	lsls	r6, r0, #24
 8009ade:	d501      	bpl.n	8009ae4 <_printf_i+0xbc>
 8009ae0:	681d      	ldr	r5, [r3, #0]
 8009ae2:	e003      	b.n	8009aec <_printf_i+0xc4>
 8009ae4:	0645      	lsls	r5, r0, #25
 8009ae6:	d5fb      	bpl.n	8009ae0 <_printf_i+0xb8>
 8009ae8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009aec:	2d00      	cmp	r5, #0
 8009aee:	da03      	bge.n	8009af8 <_printf_i+0xd0>
 8009af0:	232d      	movs	r3, #45	@ 0x2d
 8009af2:	426d      	negs	r5, r5
 8009af4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009af8:	4858      	ldr	r0, [pc, #352]	@ (8009c5c <_printf_i+0x234>)
 8009afa:	230a      	movs	r3, #10
 8009afc:	e011      	b.n	8009b22 <_printf_i+0xfa>
 8009afe:	6821      	ldr	r1, [r4, #0]
 8009b00:	6833      	ldr	r3, [r6, #0]
 8009b02:	0608      	lsls	r0, r1, #24
 8009b04:	f853 5b04 	ldr.w	r5, [r3], #4
 8009b08:	d402      	bmi.n	8009b10 <_printf_i+0xe8>
 8009b0a:	0649      	lsls	r1, r1, #25
 8009b0c:	bf48      	it	mi
 8009b0e:	b2ad      	uxthmi	r5, r5
 8009b10:	2f6f      	cmp	r7, #111	@ 0x6f
 8009b12:	4852      	ldr	r0, [pc, #328]	@ (8009c5c <_printf_i+0x234>)
 8009b14:	6033      	str	r3, [r6, #0]
 8009b16:	bf14      	ite	ne
 8009b18:	230a      	movne	r3, #10
 8009b1a:	2308      	moveq	r3, #8
 8009b1c:	2100      	movs	r1, #0
 8009b1e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009b22:	6866      	ldr	r6, [r4, #4]
 8009b24:	60a6      	str	r6, [r4, #8]
 8009b26:	2e00      	cmp	r6, #0
 8009b28:	db05      	blt.n	8009b36 <_printf_i+0x10e>
 8009b2a:	6821      	ldr	r1, [r4, #0]
 8009b2c:	432e      	orrs	r6, r5
 8009b2e:	f021 0104 	bic.w	r1, r1, #4
 8009b32:	6021      	str	r1, [r4, #0]
 8009b34:	d04b      	beq.n	8009bce <_printf_i+0x1a6>
 8009b36:	4616      	mov	r6, r2
 8009b38:	fbb5 f1f3 	udiv	r1, r5, r3
 8009b3c:	fb03 5711 	mls	r7, r3, r1, r5
 8009b40:	5dc7      	ldrb	r7, [r0, r7]
 8009b42:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009b46:	462f      	mov	r7, r5
 8009b48:	42bb      	cmp	r3, r7
 8009b4a:	460d      	mov	r5, r1
 8009b4c:	d9f4      	bls.n	8009b38 <_printf_i+0x110>
 8009b4e:	2b08      	cmp	r3, #8
 8009b50:	d10b      	bne.n	8009b6a <_printf_i+0x142>
 8009b52:	6823      	ldr	r3, [r4, #0]
 8009b54:	07df      	lsls	r7, r3, #31
 8009b56:	d508      	bpl.n	8009b6a <_printf_i+0x142>
 8009b58:	6923      	ldr	r3, [r4, #16]
 8009b5a:	6861      	ldr	r1, [r4, #4]
 8009b5c:	4299      	cmp	r1, r3
 8009b5e:	bfde      	ittt	le
 8009b60:	2330      	movle	r3, #48	@ 0x30
 8009b62:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009b66:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009b6a:	1b92      	subs	r2, r2, r6
 8009b6c:	6122      	str	r2, [r4, #16]
 8009b6e:	f8cd a000 	str.w	sl, [sp]
 8009b72:	464b      	mov	r3, r9
 8009b74:	aa03      	add	r2, sp, #12
 8009b76:	4621      	mov	r1, r4
 8009b78:	4640      	mov	r0, r8
 8009b7a:	f7ff fee7 	bl	800994c <_printf_common>
 8009b7e:	3001      	adds	r0, #1
 8009b80:	d14a      	bne.n	8009c18 <_printf_i+0x1f0>
 8009b82:	f04f 30ff 	mov.w	r0, #4294967295
 8009b86:	b004      	add	sp, #16
 8009b88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b8c:	6823      	ldr	r3, [r4, #0]
 8009b8e:	f043 0320 	orr.w	r3, r3, #32
 8009b92:	6023      	str	r3, [r4, #0]
 8009b94:	4832      	ldr	r0, [pc, #200]	@ (8009c60 <_printf_i+0x238>)
 8009b96:	2778      	movs	r7, #120	@ 0x78
 8009b98:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009b9c:	6823      	ldr	r3, [r4, #0]
 8009b9e:	6831      	ldr	r1, [r6, #0]
 8009ba0:	061f      	lsls	r7, r3, #24
 8009ba2:	f851 5b04 	ldr.w	r5, [r1], #4
 8009ba6:	d402      	bmi.n	8009bae <_printf_i+0x186>
 8009ba8:	065f      	lsls	r7, r3, #25
 8009baa:	bf48      	it	mi
 8009bac:	b2ad      	uxthmi	r5, r5
 8009bae:	6031      	str	r1, [r6, #0]
 8009bb0:	07d9      	lsls	r1, r3, #31
 8009bb2:	bf44      	itt	mi
 8009bb4:	f043 0320 	orrmi.w	r3, r3, #32
 8009bb8:	6023      	strmi	r3, [r4, #0]
 8009bba:	b11d      	cbz	r5, 8009bc4 <_printf_i+0x19c>
 8009bbc:	2310      	movs	r3, #16
 8009bbe:	e7ad      	b.n	8009b1c <_printf_i+0xf4>
 8009bc0:	4826      	ldr	r0, [pc, #152]	@ (8009c5c <_printf_i+0x234>)
 8009bc2:	e7e9      	b.n	8009b98 <_printf_i+0x170>
 8009bc4:	6823      	ldr	r3, [r4, #0]
 8009bc6:	f023 0320 	bic.w	r3, r3, #32
 8009bca:	6023      	str	r3, [r4, #0]
 8009bcc:	e7f6      	b.n	8009bbc <_printf_i+0x194>
 8009bce:	4616      	mov	r6, r2
 8009bd0:	e7bd      	b.n	8009b4e <_printf_i+0x126>
 8009bd2:	6833      	ldr	r3, [r6, #0]
 8009bd4:	6825      	ldr	r5, [r4, #0]
 8009bd6:	6961      	ldr	r1, [r4, #20]
 8009bd8:	1d18      	adds	r0, r3, #4
 8009bda:	6030      	str	r0, [r6, #0]
 8009bdc:	062e      	lsls	r6, r5, #24
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	d501      	bpl.n	8009be6 <_printf_i+0x1be>
 8009be2:	6019      	str	r1, [r3, #0]
 8009be4:	e002      	b.n	8009bec <_printf_i+0x1c4>
 8009be6:	0668      	lsls	r0, r5, #25
 8009be8:	d5fb      	bpl.n	8009be2 <_printf_i+0x1ba>
 8009bea:	8019      	strh	r1, [r3, #0]
 8009bec:	2300      	movs	r3, #0
 8009bee:	6123      	str	r3, [r4, #16]
 8009bf0:	4616      	mov	r6, r2
 8009bf2:	e7bc      	b.n	8009b6e <_printf_i+0x146>
 8009bf4:	6833      	ldr	r3, [r6, #0]
 8009bf6:	1d1a      	adds	r2, r3, #4
 8009bf8:	6032      	str	r2, [r6, #0]
 8009bfa:	681e      	ldr	r6, [r3, #0]
 8009bfc:	6862      	ldr	r2, [r4, #4]
 8009bfe:	2100      	movs	r1, #0
 8009c00:	4630      	mov	r0, r6
 8009c02:	f7f6 fb1d 	bl	8000240 <memchr>
 8009c06:	b108      	cbz	r0, 8009c0c <_printf_i+0x1e4>
 8009c08:	1b80      	subs	r0, r0, r6
 8009c0a:	6060      	str	r0, [r4, #4]
 8009c0c:	6863      	ldr	r3, [r4, #4]
 8009c0e:	6123      	str	r3, [r4, #16]
 8009c10:	2300      	movs	r3, #0
 8009c12:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009c16:	e7aa      	b.n	8009b6e <_printf_i+0x146>
 8009c18:	6923      	ldr	r3, [r4, #16]
 8009c1a:	4632      	mov	r2, r6
 8009c1c:	4649      	mov	r1, r9
 8009c1e:	4640      	mov	r0, r8
 8009c20:	47d0      	blx	sl
 8009c22:	3001      	adds	r0, #1
 8009c24:	d0ad      	beq.n	8009b82 <_printf_i+0x15a>
 8009c26:	6823      	ldr	r3, [r4, #0]
 8009c28:	079b      	lsls	r3, r3, #30
 8009c2a:	d413      	bmi.n	8009c54 <_printf_i+0x22c>
 8009c2c:	68e0      	ldr	r0, [r4, #12]
 8009c2e:	9b03      	ldr	r3, [sp, #12]
 8009c30:	4298      	cmp	r0, r3
 8009c32:	bfb8      	it	lt
 8009c34:	4618      	movlt	r0, r3
 8009c36:	e7a6      	b.n	8009b86 <_printf_i+0x15e>
 8009c38:	2301      	movs	r3, #1
 8009c3a:	4632      	mov	r2, r6
 8009c3c:	4649      	mov	r1, r9
 8009c3e:	4640      	mov	r0, r8
 8009c40:	47d0      	blx	sl
 8009c42:	3001      	adds	r0, #1
 8009c44:	d09d      	beq.n	8009b82 <_printf_i+0x15a>
 8009c46:	3501      	adds	r5, #1
 8009c48:	68e3      	ldr	r3, [r4, #12]
 8009c4a:	9903      	ldr	r1, [sp, #12]
 8009c4c:	1a5b      	subs	r3, r3, r1
 8009c4e:	42ab      	cmp	r3, r5
 8009c50:	dcf2      	bgt.n	8009c38 <_printf_i+0x210>
 8009c52:	e7eb      	b.n	8009c2c <_printf_i+0x204>
 8009c54:	2500      	movs	r5, #0
 8009c56:	f104 0619 	add.w	r6, r4, #25
 8009c5a:	e7f5      	b.n	8009c48 <_printf_i+0x220>
 8009c5c:	0800dbfe 	.word	0x0800dbfe
 8009c60:	0800dc0f 	.word	0x0800dc0f

08009c64 <_scanf_float>:
 8009c64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c68:	b087      	sub	sp, #28
 8009c6a:	4691      	mov	r9, r2
 8009c6c:	9303      	str	r3, [sp, #12]
 8009c6e:	688b      	ldr	r3, [r1, #8]
 8009c70:	1e5a      	subs	r2, r3, #1
 8009c72:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8009c76:	bf81      	itttt	hi
 8009c78:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8009c7c:	eb03 0b05 	addhi.w	fp, r3, r5
 8009c80:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8009c84:	608b      	strhi	r3, [r1, #8]
 8009c86:	680b      	ldr	r3, [r1, #0]
 8009c88:	460a      	mov	r2, r1
 8009c8a:	f04f 0500 	mov.w	r5, #0
 8009c8e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8009c92:	f842 3b1c 	str.w	r3, [r2], #28
 8009c96:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8009c9a:	4680      	mov	r8, r0
 8009c9c:	460c      	mov	r4, r1
 8009c9e:	bf98      	it	ls
 8009ca0:	f04f 0b00 	movls.w	fp, #0
 8009ca4:	9201      	str	r2, [sp, #4]
 8009ca6:	4616      	mov	r6, r2
 8009ca8:	46aa      	mov	sl, r5
 8009caa:	462f      	mov	r7, r5
 8009cac:	9502      	str	r5, [sp, #8]
 8009cae:	68a2      	ldr	r2, [r4, #8]
 8009cb0:	b15a      	cbz	r2, 8009cca <_scanf_float+0x66>
 8009cb2:	f8d9 3000 	ldr.w	r3, [r9]
 8009cb6:	781b      	ldrb	r3, [r3, #0]
 8009cb8:	2b4e      	cmp	r3, #78	@ 0x4e
 8009cba:	d863      	bhi.n	8009d84 <_scanf_float+0x120>
 8009cbc:	2b40      	cmp	r3, #64	@ 0x40
 8009cbe:	d83b      	bhi.n	8009d38 <_scanf_float+0xd4>
 8009cc0:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8009cc4:	b2c8      	uxtb	r0, r1
 8009cc6:	280e      	cmp	r0, #14
 8009cc8:	d939      	bls.n	8009d3e <_scanf_float+0xda>
 8009cca:	b11f      	cbz	r7, 8009cd4 <_scanf_float+0x70>
 8009ccc:	6823      	ldr	r3, [r4, #0]
 8009cce:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009cd2:	6023      	str	r3, [r4, #0]
 8009cd4:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009cd8:	f1ba 0f01 	cmp.w	sl, #1
 8009cdc:	f200 8114 	bhi.w	8009f08 <_scanf_float+0x2a4>
 8009ce0:	9b01      	ldr	r3, [sp, #4]
 8009ce2:	429e      	cmp	r6, r3
 8009ce4:	f200 8105 	bhi.w	8009ef2 <_scanf_float+0x28e>
 8009ce8:	2001      	movs	r0, #1
 8009cea:	b007      	add	sp, #28
 8009cec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cf0:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8009cf4:	2a0d      	cmp	r2, #13
 8009cf6:	d8e8      	bhi.n	8009cca <_scanf_float+0x66>
 8009cf8:	a101      	add	r1, pc, #4	@ (adr r1, 8009d00 <_scanf_float+0x9c>)
 8009cfa:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009cfe:	bf00      	nop
 8009d00:	08009e49 	.word	0x08009e49
 8009d04:	08009ccb 	.word	0x08009ccb
 8009d08:	08009ccb 	.word	0x08009ccb
 8009d0c:	08009ccb 	.word	0x08009ccb
 8009d10:	08009ea5 	.word	0x08009ea5
 8009d14:	08009e7f 	.word	0x08009e7f
 8009d18:	08009ccb 	.word	0x08009ccb
 8009d1c:	08009ccb 	.word	0x08009ccb
 8009d20:	08009e57 	.word	0x08009e57
 8009d24:	08009ccb 	.word	0x08009ccb
 8009d28:	08009ccb 	.word	0x08009ccb
 8009d2c:	08009ccb 	.word	0x08009ccb
 8009d30:	08009ccb 	.word	0x08009ccb
 8009d34:	08009e13 	.word	0x08009e13
 8009d38:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8009d3c:	e7da      	b.n	8009cf4 <_scanf_float+0x90>
 8009d3e:	290e      	cmp	r1, #14
 8009d40:	d8c3      	bhi.n	8009cca <_scanf_float+0x66>
 8009d42:	a001      	add	r0, pc, #4	@ (adr r0, 8009d48 <_scanf_float+0xe4>)
 8009d44:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009d48:	08009e03 	.word	0x08009e03
 8009d4c:	08009ccb 	.word	0x08009ccb
 8009d50:	08009e03 	.word	0x08009e03
 8009d54:	08009e93 	.word	0x08009e93
 8009d58:	08009ccb 	.word	0x08009ccb
 8009d5c:	08009da5 	.word	0x08009da5
 8009d60:	08009de9 	.word	0x08009de9
 8009d64:	08009de9 	.word	0x08009de9
 8009d68:	08009de9 	.word	0x08009de9
 8009d6c:	08009de9 	.word	0x08009de9
 8009d70:	08009de9 	.word	0x08009de9
 8009d74:	08009de9 	.word	0x08009de9
 8009d78:	08009de9 	.word	0x08009de9
 8009d7c:	08009de9 	.word	0x08009de9
 8009d80:	08009de9 	.word	0x08009de9
 8009d84:	2b6e      	cmp	r3, #110	@ 0x6e
 8009d86:	d809      	bhi.n	8009d9c <_scanf_float+0x138>
 8009d88:	2b60      	cmp	r3, #96	@ 0x60
 8009d8a:	d8b1      	bhi.n	8009cf0 <_scanf_float+0x8c>
 8009d8c:	2b54      	cmp	r3, #84	@ 0x54
 8009d8e:	d07b      	beq.n	8009e88 <_scanf_float+0x224>
 8009d90:	2b59      	cmp	r3, #89	@ 0x59
 8009d92:	d19a      	bne.n	8009cca <_scanf_float+0x66>
 8009d94:	2d07      	cmp	r5, #7
 8009d96:	d198      	bne.n	8009cca <_scanf_float+0x66>
 8009d98:	2508      	movs	r5, #8
 8009d9a:	e02f      	b.n	8009dfc <_scanf_float+0x198>
 8009d9c:	2b74      	cmp	r3, #116	@ 0x74
 8009d9e:	d073      	beq.n	8009e88 <_scanf_float+0x224>
 8009da0:	2b79      	cmp	r3, #121	@ 0x79
 8009da2:	e7f6      	b.n	8009d92 <_scanf_float+0x12e>
 8009da4:	6821      	ldr	r1, [r4, #0]
 8009da6:	05c8      	lsls	r0, r1, #23
 8009da8:	d51e      	bpl.n	8009de8 <_scanf_float+0x184>
 8009daa:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8009dae:	6021      	str	r1, [r4, #0]
 8009db0:	3701      	adds	r7, #1
 8009db2:	f1bb 0f00 	cmp.w	fp, #0
 8009db6:	d003      	beq.n	8009dc0 <_scanf_float+0x15c>
 8009db8:	3201      	adds	r2, #1
 8009dba:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009dbe:	60a2      	str	r2, [r4, #8]
 8009dc0:	68a3      	ldr	r3, [r4, #8]
 8009dc2:	3b01      	subs	r3, #1
 8009dc4:	60a3      	str	r3, [r4, #8]
 8009dc6:	6923      	ldr	r3, [r4, #16]
 8009dc8:	3301      	adds	r3, #1
 8009dca:	6123      	str	r3, [r4, #16]
 8009dcc:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8009dd0:	3b01      	subs	r3, #1
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	f8c9 3004 	str.w	r3, [r9, #4]
 8009dd8:	f340 8082 	ble.w	8009ee0 <_scanf_float+0x27c>
 8009ddc:	f8d9 3000 	ldr.w	r3, [r9]
 8009de0:	3301      	adds	r3, #1
 8009de2:	f8c9 3000 	str.w	r3, [r9]
 8009de6:	e762      	b.n	8009cae <_scanf_float+0x4a>
 8009de8:	eb1a 0105 	adds.w	r1, sl, r5
 8009dec:	f47f af6d 	bne.w	8009cca <_scanf_float+0x66>
 8009df0:	6822      	ldr	r2, [r4, #0]
 8009df2:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8009df6:	6022      	str	r2, [r4, #0]
 8009df8:	460d      	mov	r5, r1
 8009dfa:	468a      	mov	sl, r1
 8009dfc:	f806 3b01 	strb.w	r3, [r6], #1
 8009e00:	e7de      	b.n	8009dc0 <_scanf_float+0x15c>
 8009e02:	6822      	ldr	r2, [r4, #0]
 8009e04:	0610      	lsls	r0, r2, #24
 8009e06:	f57f af60 	bpl.w	8009cca <_scanf_float+0x66>
 8009e0a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009e0e:	6022      	str	r2, [r4, #0]
 8009e10:	e7f4      	b.n	8009dfc <_scanf_float+0x198>
 8009e12:	f1ba 0f00 	cmp.w	sl, #0
 8009e16:	d10c      	bne.n	8009e32 <_scanf_float+0x1ce>
 8009e18:	b977      	cbnz	r7, 8009e38 <_scanf_float+0x1d4>
 8009e1a:	6822      	ldr	r2, [r4, #0]
 8009e1c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8009e20:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8009e24:	d108      	bne.n	8009e38 <_scanf_float+0x1d4>
 8009e26:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009e2a:	6022      	str	r2, [r4, #0]
 8009e2c:	f04f 0a01 	mov.w	sl, #1
 8009e30:	e7e4      	b.n	8009dfc <_scanf_float+0x198>
 8009e32:	f1ba 0f02 	cmp.w	sl, #2
 8009e36:	d050      	beq.n	8009eda <_scanf_float+0x276>
 8009e38:	2d01      	cmp	r5, #1
 8009e3a:	d002      	beq.n	8009e42 <_scanf_float+0x1de>
 8009e3c:	2d04      	cmp	r5, #4
 8009e3e:	f47f af44 	bne.w	8009cca <_scanf_float+0x66>
 8009e42:	3501      	adds	r5, #1
 8009e44:	b2ed      	uxtb	r5, r5
 8009e46:	e7d9      	b.n	8009dfc <_scanf_float+0x198>
 8009e48:	f1ba 0f01 	cmp.w	sl, #1
 8009e4c:	f47f af3d 	bne.w	8009cca <_scanf_float+0x66>
 8009e50:	f04f 0a02 	mov.w	sl, #2
 8009e54:	e7d2      	b.n	8009dfc <_scanf_float+0x198>
 8009e56:	b975      	cbnz	r5, 8009e76 <_scanf_float+0x212>
 8009e58:	2f00      	cmp	r7, #0
 8009e5a:	f47f af37 	bne.w	8009ccc <_scanf_float+0x68>
 8009e5e:	6822      	ldr	r2, [r4, #0]
 8009e60:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8009e64:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8009e68:	f040 80fc 	bne.w	800a064 <_scanf_float+0x400>
 8009e6c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009e70:	6022      	str	r2, [r4, #0]
 8009e72:	2501      	movs	r5, #1
 8009e74:	e7c2      	b.n	8009dfc <_scanf_float+0x198>
 8009e76:	2d03      	cmp	r5, #3
 8009e78:	d0e3      	beq.n	8009e42 <_scanf_float+0x1de>
 8009e7a:	2d05      	cmp	r5, #5
 8009e7c:	e7df      	b.n	8009e3e <_scanf_float+0x1da>
 8009e7e:	2d02      	cmp	r5, #2
 8009e80:	f47f af23 	bne.w	8009cca <_scanf_float+0x66>
 8009e84:	2503      	movs	r5, #3
 8009e86:	e7b9      	b.n	8009dfc <_scanf_float+0x198>
 8009e88:	2d06      	cmp	r5, #6
 8009e8a:	f47f af1e 	bne.w	8009cca <_scanf_float+0x66>
 8009e8e:	2507      	movs	r5, #7
 8009e90:	e7b4      	b.n	8009dfc <_scanf_float+0x198>
 8009e92:	6822      	ldr	r2, [r4, #0]
 8009e94:	0591      	lsls	r1, r2, #22
 8009e96:	f57f af18 	bpl.w	8009cca <_scanf_float+0x66>
 8009e9a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8009e9e:	6022      	str	r2, [r4, #0]
 8009ea0:	9702      	str	r7, [sp, #8]
 8009ea2:	e7ab      	b.n	8009dfc <_scanf_float+0x198>
 8009ea4:	6822      	ldr	r2, [r4, #0]
 8009ea6:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8009eaa:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8009eae:	d005      	beq.n	8009ebc <_scanf_float+0x258>
 8009eb0:	0550      	lsls	r0, r2, #21
 8009eb2:	f57f af0a 	bpl.w	8009cca <_scanf_float+0x66>
 8009eb6:	2f00      	cmp	r7, #0
 8009eb8:	f000 80d4 	beq.w	800a064 <_scanf_float+0x400>
 8009ebc:	0591      	lsls	r1, r2, #22
 8009ebe:	bf58      	it	pl
 8009ec0:	9902      	ldrpl	r1, [sp, #8]
 8009ec2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009ec6:	bf58      	it	pl
 8009ec8:	1a79      	subpl	r1, r7, r1
 8009eca:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8009ece:	bf58      	it	pl
 8009ed0:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8009ed4:	6022      	str	r2, [r4, #0]
 8009ed6:	2700      	movs	r7, #0
 8009ed8:	e790      	b.n	8009dfc <_scanf_float+0x198>
 8009eda:	f04f 0a03 	mov.w	sl, #3
 8009ede:	e78d      	b.n	8009dfc <_scanf_float+0x198>
 8009ee0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8009ee4:	4649      	mov	r1, r9
 8009ee6:	4640      	mov	r0, r8
 8009ee8:	4798      	blx	r3
 8009eea:	2800      	cmp	r0, #0
 8009eec:	f43f aedf 	beq.w	8009cae <_scanf_float+0x4a>
 8009ef0:	e6eb      	b.n	8009cca <_scanf_float+0x66>
 8009ef2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009ef6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009efa:	464a      	mov	r2, r9
 8009efc:	4640      	mov	r0, r8
 8009efe:	4798      	blx	r3
 8009f00:	6923      	ldr	r3, [r4, #16]
 8009f02:	3b01      	subs	r3, #1
 8009f04:	6123      	str	r3, [r4, #16]
 8009f06:	e6eb      	b.n	8009ce0 <_scanf_float+0x7c>
 8009f08:	1e6b      	subs	r3, r5, #1
 8009f0a:	2b06      	cmp	r3, #6
 8009f0c:	d824      	bhi.n	8009f58 <_scanf_float+0x2f4>
 8009f0e:	2d02      	cmp	r5, #2
 8009f10:	d836      	bhi.n	8009f80 <_scanf_float+0x31c>
 8009f12:	9b01      	ldr	r3, [sp, #4]
 8009f14:	429e      	cmp	r6, r3
 8009f16:	f67f aee7 	bls.w	8009ce8 <_scanf_float+0x84>
 8009f1a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009f1e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009f22:	464a      	mov	r2, r9
 8009f24:	4640      	mov	r0, r8
 8009f26:	4798      	blx	r3
 8009f28:	6923      	ldr	r3, [r4, #16]
 8009f2a:	3b01      	subs	r3, #1
 8009f2c:	6123      	str	r3, [r4, #16]
 8009f2e:	e7f0      	b.n	8009f12 <_scanf_float+0x2ae>
 8009f30:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009f34:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8009f38:	464a      	mov	r2, r9
 8009f3a:	4640      	mov	r0, r8
 8009f3c:	4798      	blx	r3
 8009f3e:	6923      	ldr	r3, [r4, #16]
 8009f40:	3b01      	subs	r3, #1
 8009f42:	6123      	str	r3, [r4, #16]
 8009f44:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009f48:	fa5f fa8a 	uxtb.w	sl, sl
 8009f4c:	f1ba 0f02 	cmp.w	sl, #2
 8009f50:	d1ee      	bne.n	8009f30 <_scanf_float+0x2cc>
 8009f52:	3d03      	subs	r5, #3
 8009f54:	b2ed      	uxtb	r5, r5
 8009f56:	1b76      	subs	r6, r6, r5
 8009f58:	6823      	ldr	r3, [r4, #0]
 8009f5a:	05da      	lsls	r2, r3, #23
 8009f5c:	d530      	bpl.n	8009fc0 <_scanf_float+0x35c>
 8009f5e:	055b      	lsls	r3, r3, #21
 8009f60:	d511      	bpl.n	8009f86 <_scanf_float+0x322>
 8009f62:	9b01      	ldr	r3, [sp, #4]
 8009f64:	429e      	cmp	r6, r3
 8009f66:	f67f aebf 	bls.w	8009ce8 <_scanf_float+0x84>
 8009f6a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009f6e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009f72:	464a      	mov	r2, r9
 8009f74:	4640      	mov	r0, r8
 8009f76:	4798      	blx	r3
 8009f78:	6923      	ldr	r3, [r4, #16]
 8009f7a:	3b01      	subs	r3, #1
 8009f7c:	6123      	str	r3, [r4, #16]
 8009f7e:	e7f0      	b.n	8009f62 <_scanf_float+0x2fe>
 8009f80:	46aa      	mov	sl, r5
 8009f82:	46b3      	mov	fp, r6
 8009f84:	e7de      	b.n	8009f44 <_scanf_float+0x2e0>
 8009f86:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8009f8a:	6923      	ldr	r3, [r4, #16]
 8009f8c:	2965      	cmp	r1, #101	@ 0x65
 8009f8e:	f103 33ff 	add.w	r3, r3, #4294967295
 8009f92:	f106 35ff 	add.w	r5, r6, #4294967295
 8009f96:	6123      	str	r3, [r4, #16]
 8009f98:	d00c      	beq.n	8009fb4 <_scanf_float+0x350>
 8009f9a:	2945      	cmp	r1, #69	@ 0x45
 8009f9c:	d00a      	beq.n	8009fb4 <_scanf_float+0x350>
 8009f9e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009fa2:	464a      	mov	r2, r9
 8009fa4:	4640      	mov	r0, r8
 8009fa6:	4798      	blx	r3
 8009fa8:	6923      	ldr	r3, [r4, #16]
 8009faa:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8009fae:	3b01      	subs	r3, #1
 8009fb0:	1eb5      	subs	r5, r6, #2
 8009fb2:	6123      	str	r3, [r4, #16]
 8009fb4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009fb8:	464a      	mov	r2, r9
 8009fba:	4640      	mov	r0, r8
 8009fbc:	4798      	blx	r3
 8009fbe:	462e      	mov	r6, r5
 8009fc0:	6822      	ldr	r2, [r4, #0]
 8009fc2:	f012 0210 	ands.w	r2, r2, #16
 8009fc6:	d001      	beq.n	8009fcc <_scanf_float+0x368>
 8009fc8:	2000      	movs	r0, #0
 8009fca:	e68e      	b.n	8009cea <_scanf_float+0x86>
 8009fcc:	7032      	strb	r2, [r6, #0]
 8009fce:	6823      	ldr	r3, [r4, #0]
 8009fd0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8009fd4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009fd8:	d123      	bne.n	800a022 <_scanf_float+0x3be>
 8009fda:	9b02      	ldr	r3, [sp, #8]
 8009fdc:	429f      	cmp	r7, r3
 8009fde:	d00a      	beq.n	8009ff6 <_scanf_float+0x392>
 8009fe0:	1bda      	subs	r2, r3, r7
 8009fe2:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8009fe6:	429e      	cmp	r6, r3
 8009fe8:	bf28      	it	cs
 8009fea:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8009fee:	491e      	ldr	r1, [pc, #120]	@ (800a068 <_scanf_float+0x404>)
 8009ff0:	4630      	mov	r0, r6
 8009ff2:	f000 f935 	bl	800a260 <siprintf>
 8009ff6:	9901      	ldr	r1, [sp, #4]
 8009ff8:	2200      	movs	r2, #0
 8009ffa:	4640      	mov	r0, r8
 8009ffc:	f002 fbca 	bl	800c794 <_strtod_r>
 800a000:	9b03      	ldr	r3, [sp, #12]
 800a002:	6821      	ldr	r1, [r4, #0]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	f011 0f02 	tst.w	r1, #2
 800a00a:	f103 0204 	add.w	r2, r3, #4
 800a00e:	d015      	beq.n	800a03c <_scanf_float+0x3d8>
 800a010:	9903      	ldr	r1, [sp, #12]
 800a012:	600a      	str	r2, [r1, #0]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	ed83 0b00 	vstr	d0, [r3]
 800a01a:	68e3      	ldr	r3, [r4, #12]
 800a01c:	3301      	adds	r3, #1
 800a01e:	60e3      	str	r3, [r4, #12]
 800a020:	e7d2      	b.n	8009fc8 <_scanf_float+0x364>
 800a022:	9b04      	ldr	r3, [sp, #16]
 800a024:	2b00      	cmp	r3, #0
 800a026:	d0e6      	beq.n	8009ff6 <_scanf_float+0x392>
 800a028:	9905      	ldr	r1, [sp, #20]
 800a02a:	230a      	movs	r3, #10
 800a02c:	3101      	adds	r1, #1
 800a02e:	4640      	mov	r0, r8
 800a030:	f002 fc30 	bl	800c894 <_strtol_r>
 800a034:	9b04      	ldr	r3, [sp, #16]
 800a036:	9e05      	ldr	r6, [sp, #20]
 800a038:	1ac2      	subs	r2, r0, r3
 800a03a:	e7d2      	b.n	8009fe2 <_scanf_float+0x37e>
 800a03c:	f011 0f04 	tst.w	r1, #4
 800a040:	9903      	ldr	r1, [sp, #12]
 800a042:	600a      	str	r2, [r1, #0]
 800a044:	d1e6      	bne.n	800a014 <_scanf_float+0x3b0>
 800a046:	eeb4 0b40 	vcmp.f64	d0, d0
 800a04a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a04e:	681d      	ldr	r5, [r3, #0]
 800a050:	d705      	bvc.n	800a05e <_scanf_float+0x3fa>
 800a052:	4806      	ldr	r0, [pc, #24]	@ (800a06c <_scanf_float+0x408>)
 800a054:	f000 fa56 	bl	800a504 <nanf>
 800a058:	ed85 0a00 	vstr	s0, [r5]
 800a05c:	e7dd      	b.n	800a01a <_scanf_float+0x3b6>
 800a05e:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800a062:	e7f9      	b.n	800a058 <_scanf_float+0x3f4>
 800a064:	2700      	movs	r7, #0
 800a066:	e635      	b.n	8009cd4 <_scanf_float+0x70>
 800a068:	0800dc20 	.word	0x0800dc20
 800a06c:	0800dd61 	.word	0x0800dd61

0800a070 <std>:
 800a070:	2300      	movs	r3, #0
 800a072:	b510      	push	{r4, lr}
 800a074:	4604      	mov	r4, r0
 800a076:	e9c0 3300 	strd	r3, r3, [r0]
 800a07a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a07e:	6083      	str	r3, [r0, #8]
 800a080:	8181      	strh	r1, [r0, #12]
 800a082:	6643      	str	r3, [r0, #100]	@ 0x64
 800a084:	81c2      	strh	r2, [r0, #14]
 800a086:	6183      	str	r3, [r0, #24]
 800a088:	4619      	mov	r1, r3
 800a08a:	2208      	movs	r2, #8
 800a08c:	305c      	adds	r0, #92	@ 0x5c
 800a08e:	f000 f94c 	bl	800a32a <memset>
 800a092:	4b0d      	ldr	r3, [pc, #52]	@ (800a0c8 <std+0x58>)
 800a094:	6263      	str	r3, [r4, #36]	@ 0x24
 800a096:	4b0d      	ldr	r3, [pc, #52]	@ (800a0cc <std+0x5c>)
 800a098:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a09a:	4b0d      	ldr	r3, [pc, #52]	@ (800a0d0 <std+0x60>)
 800a09c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a09e:	4b0d      	ldr	r3, [pc, #52]	@ (800a0d4 <std+0x64>)
 800a0a0:	6323      	str	r3, [r4, #48]	@ 0x30
 800a0a2:	4b0d      	ldr	r3, [pc, #52]	@ (800a0d8 <std+0x68>)
 800a0a4:	6224      	str	r4, [r4, #32]
 800a0a6:	429c      	cmp	r4, r3
 800a0a8:	d006      	beq.n	800a0b8 <std+0x48>
 800a0aa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a0ae:	4294      	cmp	r4, r2
 800a0b0:	d002      	beq.n	800a0b8 <std+0x48>
 800a0b2:	33d0      	adds	r3, #208	@ 0xd0
 800a0b4:	429c      	cmp	r4, r3
 800a0b6:	d105      	bne.n	800a0c4 <std+0x54>
 800a0b8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a0bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a0c0:	f000 ba0e 	b.w	800a4e0 <__retarget_lock_init_recursive>
 800a0c4:	bd10      	pop	{r4, pc}
 800a0c6:	bf00      	nop
 800a0c8:	0800a2a5 	.word	0x0800a2a5
 800a0cc:	0800a2c7 	.word	0x0800a2c7
 800a0d0:	0800a2ff 	.word	0x0800a2ff
 800a0d4:	0800a323 	.word	0x0800a323
 800a0d8:	2000541c 	.word	0x2000541c

0800a0dc <stdio_exit_handler>:
 800a0dc:	4a02      	ldr	r2, [pc, #8]	@ (800a0e8 <stdio_exit_handler+0xc>)
 800a0de:	4903      	ldr	r1, [pc, #12]	@ (800a0ec <stdio_exit_handler+0x10>)
 800a0e0:	4803      	ldr	r0, [pc, #12]	@ (800a0f0 <stdio_exit_handler+0x14>)
 800a0e2:	f000 b869 	b.w	800a1b8 <_fwalk_sglue>
 800a0e6:	bf00      	nop
 800a0e8:	20000010 	.word	0x20000010
 800a0ec:	0800cc51 	.word	0x0800cc51
 800a0f0:	20000020 	.word	0x20000020

0800a0f4 <cleanup_stdio>:
 800a0f4:	6841      	ldr	r1, [r0, #4]
 800a0f6:	4b0c      	ldr	r3, [pc, #48]	@ (800a128 <cleanup_stdio+0x34>)
 800a0f8:	4299      	cmp	r1, r3
 800a0fa:	b510      	push	{r4, lr}
 800a0fc:	4604      	mov	r4, r0
 800a0fe:	d001      	beq.n	800a104 <cleanup_stdio+0x10>
 800a100:	f002 fda6 	bl	800cc50 <_fflush_r>
 800a104:	68a1      	ldr	r1, [r4, #8]
 800a106:	4b09      	ldr	r3, [pc, #36]	@ (800a12c <cleanup_stdio+0x38>)
 800a108:	4299      	cmp	r1, r3
 800a10a:	d002      	beq.n	800a112 <cleanup_stdio+0x1e>
 800a10c:	4620      	mov	r0, r4
 800a10e:	f002 fd9f 	bl	800cc50 <_fflush_r>
 800a112:	68e1      	ldr	r1, [r4, #12]
 800a114:	4b06      	ldr	r3, [pc, #24]	@ (800a130 <cleanup_stdio+0x3c>)
 800a116:	4299      	cmp	r1, r3
 800a118:	d004      	beq.n	800a124 <cleanup_stdio+0x30>
 800a11a:	4620      	mov	r0, r4
 800a11c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a120:	f002 bd96 	b.w	800cc50 <_fflush_r>
 800a124:	bd10      	pop	{r4, pc}
 800a126:	bf00      	nop
 800a128:	2000541c 	.word	0x2000541c
 800a12c:	20005484 	.word	0x20005484
 800a130:	200054ec 	.word	0x200054ec

0800a134 <global_stdio_init.part.0>:
 800a134:	b510      	push	{r4, lr}
 800a136:	4b0b      	ldr	r3, [pc, #44]	@ (800a164 <global_stdio_init.part.0+0x30>)
 800a138:	4c0b      	ldr	r4, [pc, #44]	@ (800a168 <global_stdio_init.part.0+0x34>)
 800a13a:	4a0c      	ldr	r2, [pc, #48]	@ (800a16c <global_stdio_init.part.0+0x38>)
 800a13c:	601a      	str	r2, [r3, #0]
 800a13e:	4620      	mov	r0, r4
 800a140:	2200      	movs	r2, #0
 800a142:	2104      	movs	r1, #4
 800a144:	f7ff ff94 	bl	800a070 <std>
 800a148:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a14c:	2201      	movs	r2, #1
 800a14e:	2109      	movs	r1, #9
 800a150:	f7ff ff8e 	bl	800a070 <std>
 800a154:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a158:	2202      	movs	r2, #2
 800a15a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a15e:	2112      	movs	r1, #18
 800a160:	f7ff bf86 	b.w	800a070 <std>
 800a164:	20005554 	.word	0x20005554
 800a168:	2000541c 	.word	0x2000541c
 800a16c:	0800a0dd 	.word	0x0800a0dd

0800a170 <__sfp_lock_acquire>:
 800a170:	4801      	ldr	r0, [pc, #4]	@ (800a178 <__sfp_lock_acquire+0x8>)
 800a172:	f000 b9b6 	b.w	800a4e2 <__retarget_lock_acquire_recursive>
 800a176:	bf00      	nop
 800a178:	2000555d 	.word	0x2000555d

0800a17c <__sfp_lock_release>:
 800a17c:	4801      	ldr	r0, [pc, #4]	@ (800a184 <__sfp_lock_release+0x8>)
 800a17e:	f000 b9b1 	b.w	800a4e4 <__retarget_lock_release_recursive>
 800a182:	bf00      	nop
 800a184:	2000555d 	.word	0x2000555d

0800a188 <__sinit>:
 800a188:	b510      	push	{r4, lr}
 800a18a:	4604      	mov	r4, r0
 800a18c:	f7ff fff0 	bl	800a170 <__sfp_lock_acquire>
 800a190:	6a23      	ldr	r3, [r4, #32]
 800a192:	b11b      	cbz	r3, 800a19c <__sinit+0x14>
 800a194:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a198:	f7ff bff0 	b.w	800a17c <__sfp_lock_release>
 800a19c:	4b04      	ldr	r3, [pc, #16]	@ (800a1b0 <__sinit+0x28>)
 800a19e:	6223      	str	r3, [r4, #32]
 800a1a0:	4b04      	ldr	r3, [pc, #16]	@ (800a1b4 <__sinit+0x2c>)
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d1f5      	bne.n	800a194 <__sinit+0xc>
 800a1a8:	f7ff ffc4 	bl	800a134 <global_stdio_init.part.0>
 800a1ac:	e7f2      	b.n	800a194 <__sinit+0xc>
 800a1ae:	bf00      	nop
 800a1b0:	0800a0f5 	.word	0x0800a0f5
 800a1b4:	20005554 	.word	0x20005554

0800a1b8 <_fwalk_sglue>:
 800a1b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a1bc:	4607      	mov	r7, r0
 800a1be:	4688      	mov	r8, r1
 800a1c0:	4614      	mov	r4, r2
 800a1c2:	2600      	movs	r6, #0
 800a1c4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a1c8:	f1b9 0901 	subs.w	r9, r9, #1
 800a1cc:	d505      	bpl.n	800a1da <_fwalk_sglue+0x22>
 800a1ce:	6824      	ldr	r4, [r4, #0]
 800a1d0:	2c00      	cmp	r4, #0
 800a1d2:	d1f7      	bne.n	800a1c4 <_fwalk_sglue+0xc>
 800a1d4:	4630      	mov	r0, r6
 800a1d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a1da:	89ab      	ldrh	r3, [r5, #12]
 800a1dc:	2b01      	cmp	r3, #1
 800a1de:	d907      	bls.n	800a1f0 <_fwalk_sglue+0x38>
 800a1e0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a1e4:	3301      	adds	r3, #1
 800a1e6:	d003      	beq.n	800a1f0 <_fwalk_sglue+0x38>
 800a1e8:	4629      	mov	r1, r5
 800a1ea:	4638      	mov	r0, r7
 800a1ec:	47c0      	blx	r8
 800a1ee:	4306      	orrs	r6, r0
 800a1f0:	3568      	adds	r5, #104	@ 0x68
 800a1f2:	e7e9      	b.n	800a1c8 <_fwalk_sglue+0x10>

0800a1f4 <sniprintf>:
 800a1f4:	b40c      	push	{r2, r3}
 800a1f6:	b530      	push	{r4, r5, lr}
 800a1f8:	4b18      	ldr	r3, [pc, #96]	@ (800a25c <sniprintf+0x68>)
 800a1fa:	1e0c      	subs	r4, r1, #0
 800a1fc:	681d      	ldr	r5, [r3, #0]
 800a1fe:	b09d      	sub	sp, #116	@ 0x74
 800a200:	da08      	bge.n	800a214 <sniprintf+0x20>
 800a202:	238b      	movs	r3, #139	@ 0x8b
 800a204:	602b      	str	r3, [r5, #0]
 800a206:	f04f 30ff 	mov.w	r0, #4294967295
 800a20a:	b01d      	add	sp, #116	@ 0x74
 800a20c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a210:	b002      	add	sp, #8
 800a212:	4770      	bx	lr
 800a214:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800a218:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a21c:	f04f 0300 	mov.w	r3, #0
 800a220:	931b      	str	r3, [sp, #108]	@ 0x6c
 800a222:	bf14      	ite	ne
 800a224:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a228:	4623      	moveq	r3, r4
 800a22a:	9304      	str	r3, [sp, #16]
 800a22c:	9307      	str	r3, [sp, #28]
 800a22e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a232:	9002      	str	r0, [sp, #8]
 800a234:	9006      	str	r0, [sp, #24]
 800a236:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a23a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800a23c:	ab21      	add	r3, sp, #132	@ 0x84
 800a23e:	a902      	add	r1, sp, #8
 800a240:	4628      	mov	r0, r5
 800a242:	9301      	str	r3, [sp, #4]
 800a244:	f002 fb84 	bl	800c950 <_svfiprintf_r>
 800a248:	1c43      	adds	r3, r0, #1
 800a24a:	bfbc      	itt	lt
 800a24c:	238b      	movlt	r3, #139	@ 0x8b
 800a24e:	602b      	strlt	r3, [r5, #0]
 800a250:	2c00      	cmp	r4, #0
 800a252:	d0da      	beq.n	800a20a <sniprintf+0x16>
 800a254:	9b02      	ldr	r3, [sp, #8]
 800a256:	2200      	movs	r2, #0
 800a258:	701a      	strb	r2, [r3, #0]
 800a25a:	e7d6      	b.n	800a20a <sniprintf+0x16>
 800a25c:	2000001c 	.word	0x2000001c

0800a260 <siprintf>:
 800a260:	b40e      	push	{r1, r2, r3}
 800a262:	b510      	push	{r4, lr}
 800a264:	b09d      	sub	sp, #116	@ 0x74
 800a266:	ab1f      	add	r3, sp, #124	@ 0x7c
 800a268:	9002      	str	r0, [sp, #8]
 800a26a:	9006      	str	r0, [sp, #24]
 800a26c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a270:	480a      	ldr	r0, [pc, #40]	@ (800a29c <siprintf+0x3c>)
 800a272:	9107      	str	r1, [sp, #28]
 800a274:	9104      	str	r1, [sp, #16]
 800a276:	490a      	ldr	r1, [pc, #40]	@ (800a2a0 <siprintf+0x40>)
 800a278:	f853 2b04 	ldr.w	r2, [r3], #4
 800a27c:	9105      	str	r1, [sp, #20]
 800a27e:	2400      	movs	r4, #0
 800a280:	a902      	add	r1, sp, #8
 800a282:	6800      	ldr	r0, [r0, #0]
 800a284:	9301      	str	r3, [sp, #4]
 800a286:	941b      	str	r4, [sp, #108]	@ 0x6c
 800a288:	f002 fb62 	bl	800c950 <_svfiprintf_r>
 800a28c:	9b02      	ldr	r3, [sp, #8]
 800a28e:	701c      	strb	r4, [r3, #0]
 800a290:	b01d      	add	sp, #116	@ 0x74
 800a292:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a296:	b003      	add	sp, #12
 800a298:	4770      	bx	lr
 800a29a:	bf00      	nop
 800a29c:	2000001c 	.word	0x2000001c
 800a2a0:	ffff0208 	.word	0xffff0208

0800a2a4 <__sread>:
 800a2a4:	b510      	push	{r4, lr}
 800a2a6:	460c      	mov	r4, r1
 800a2a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2ac:	f000 f8ca 	bl	800a444 <_read_r>
 800a2b0:	2800      	cmp	r0, #0
 800a2b2:	bfab      	itete	ge
 800a2b4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a2b6:	89a3      	ldrhlt	r3, [r4, #12]
 800a2b8:	181b      	addge	r3, r3, r0
 800a2ba:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a2be:	bfac      	ite	ge
 800a2c0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a2c2:	81a3      	strhlt	r3, [r4, #12]
 800a2c4:	bd10      	pop	{r4, pc}

0800a2c6 <__swrite>:
 800a2c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2ca:	461f      	mov	r7, r3
 800a2cc:	898b      	ldrh	r3, [r1, #12]
 800a2ce:	05db      	lsls	r3, r3, #23
 800a2d0:	4605      	mov	r5, r0
 800a2d2:	460c      	mov	r4, r1
 800a2d4:	4616      	mov	r6, r2
 800a2d6:	d505      	bpl.n	800a2e4 <__swrite+0x1e>
 800a2d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2dc:	2302      	movs	r3, #2
 800a2de:	2200      	movs	r2, #0
 800a2e0:	f000 f89e 	bl	800a420 <_lseek_r>
 800a2e4:	89a3      	ldrh	r3, [r4, #12]
 800a2e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a2ea:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a2ee:	81a3      	strh	r3, [r4, #12]
 800a2f0:	4632      	mov	r2, r6
 800a2f2:	463b      	mov	r3, r7
 800a2f4:	4628      	mov	r0, r5
 800a2f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a2fa:	f000 b8b5 	b.w	800a468 <_write_r>

0800a2fe <__sseek>:
 800a2fe:	b510      	push	{r4, lr}
 800a300:	460c      	mov	r4, r1
 800a302:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a306:	f000 f88b 	bl	800a420 <_lseek_r>
 800a30a:	1c43      	adds	r3, r0, #1
 800a30c:	89a3      	ldrh	r3, [r4, #12]
 800a30e:	bf15      	itete	ne
 800a310:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a312:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a316:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a31a:	81a3      	strheq	r3, [r4, #12]
 800a31c:	bf18      	it	ne
 800a31e:	81a3      	strhne	r3, [r4, #12]
 800a320:	bd10      	pop	{r4, pc}

0800a322 <__sclose>:
 800a322:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a326:	f000 b80d 	b.w	800a344 <_close_r>

0800a32a <memset>:
 800a32a:	4402      	add	r2, r0
 800a32c:	4603      	mov	r3, r0
 800a32e:	4293      	cmp	r3, r2
 800a330:	d100      	bne.n	800a334 <memset+0xa>
 800a332:	4770      	bx	lr
 800a334:	f803 1b01 	strb.w	r1, [r3], #1
 800a338:	e7f9      	b.n	800a32e <memset+0x4>
	...

0800a33c <_localeconv_r>:
 800a33c:	4800      	ldr	r0, [pc, #0]	@ (800a340 <_localeconv_r+0x4>)
 800a33e:	4770      	bx	lr
 800a340:	2000015c 	.word	0x2000015c

0800a344 <_close_r>:
 800a344:	b538      	push	{r3, r4, r5, lr}
 800a346:	4d06      	ldr	r5, [pc, #24]	@ (800a360 <_close_r+0x1c>)
 800a348:	2300      	movs	r3, #0
 800a34a:	4604      	mov	r4, r0
 800a34c:	4608      	mov	r0, r1
 800a34e:	602b      	str	r3, [r5, #0]
 800a350:	f7f7 f9e4 	bl	800171c <_close>
 800a354:	1c43      	adds	r3, r0, #1
 800a356:	d102      	bne.n	800a35e <_close_r+0x1a>
 800a358:	682b      	ldr	r3, [r5, #0]
 800a35a:	b103      	cbz	r3, 800a35e <_close_r+0x1a>
 800a35c:	6023      	str	r3, [r4, #0]
 800a35e:	bd38      	pop	{r3, r4, r5, pc}
 800a360:	20005558 	.word	0x20005558

0800a364 <_reclaim_reent>:
 800a364:	4b2d      	ldr	r3, [pc, #180]	@ (800a41c <_reclaim_reent+0xb8>)
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	4283      	cmp	r3, r0
 800a36a:	b570      	push	{r4, r5, r6, lr}
 800a36c:	4604      	mov	r4, r0
 800a36e:	d053      	beq.n	800a418 <_reclaim_reent+0xb4>
 800a370:	69c3      	ldr	r3, [r0, #28]
 800a372:	b31b      	cbz	r3, 800a3bc <_reclaim_reent+0x58>
 800a374:	68db      	ldr	r3, [r3, #12]
 800a376:	b163      	cbz	r3, 800a392 <_reclaim_reent+0x2e>
 800a378:	2500      	movs	r5, #0
 800a37a:	69e3      	ldr	r3, [r4, #28]
 800a37c:	68db      	ldr	r3, [r3, #12]
 800a37e:	5959      	ldr	r1, [r3, r5]
 800a380:	b9b1      	cbnz	r1, 800a3b0 <_reclaim_reent+0x4c>
 800a382:	3504      	adds	r5, #4
 800a384:	2d80      	cmp	r5, #128	@ 0x80
 800a386:	d1f8      	bne.n	800a37a <_reclaim_reent+0x16>
 800a388:	69e3      	ldr	r3, [r4, #28]
 800a38a:	4620      	mov	r0, r4
 800a38c:	68d9      	ldr	r1, [r3, #12]
 800a38e:	f000 fea5 	bl	800b0dc <_free_r>
 800a392:	69e3      	ldr	r3, [r4, #28]
 800a394:	6819      	ldr	r1, [r3, #0]
 800a396:	b111      	cbz	r1, 800a39e <_reclaim_reent+0x3a>
 800a398:	4620      	mov	r0, r4
 800a39a:	f000 fe9f 	bl	800b0dc <_free_r>
 800a39e:	69e3      	ldr	r3, [r4, #28]
 800a3a0:	689d      	ldr	r5, [r3, #8]
 800a3a2:	b15d      	cbz	r5, 800a3bc <_reclaim_reent+0x58>
 800a3a4:	4629      	mov	r1, r5
 800a3a6:	4620      	mov	r0, r4
 800a3a8:	682d      	ldr	r5, [r5, #0]
 800a3aa:	f000 fe97 	bl	800b0dc <_free_r>
 800a3ae:	e7f8      	b.n	800a3a2 <_reclaim_reent+0x3e>
 800a3b0:	680e      	ldr	r6, [r1, #0]
 800a3b2:	4620      	mov	r0, r4
 800a3b4:	f000 fe92 	bl	800b0dc <_free_r>
 800a3b8:	4631      	mov	r1, r6
 800a3ba:	e7e1      	b.n	800a380 <_reclaim_reent+0x1c>
 800a3bc:	6961      	ldr	r1, [r4, #20]
 800a3be:	b111      	cbz	r1, 800a3c6 <_reclaim_reent+0x62>
 800a3c0:	4620      	mov	r0, r4
 800a3c2:	f000 fe8b 	bl	800b0dc <_free_r>
 800a3c6:	69e1      	ldr	r1, [r4, #28]
 800a3c8:	b111      	cbz	r1, 800a3d0 <_reclaim_reent+0x6c>
 800a3ca:	4620      	mov	r0, r4
 800a3cc:	f000 fe86 	bl	800b0dc <_free_r>
 800a3d0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800a3d2:	b111      	cbz	r1, 800a3da <_reclaim_reent+0x76>
 800a3d4:	4620      	mov	r0, r4
 800a3d6:	f000 fe81 	bl	800b0dc <_free_r>
 800a3da:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a3dc:	b111      	cbz	r1, 800a3e4 <_reclaim_reent+0x80>
 800a3de:	4620      	mov	r0, r4
 800a3e0:	f000 fe7c 	bl	800b0dc <_free_r>
 800a3e4:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800a3e6:	b111      	cbz	r1, 800a3ee <_reclaim_reent+0x8a>
 800a3e8:	4620      	mov	r0, r4
 800a3ea:	f000 fe77 	bl	800b0dc <_free_r>
 800a3ee:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800a3f0:	b111      	cbz	r1, 800a3f8 <_reclaim_reent+0x94>
 800a3f2:	4620      	mov	r0, r4
 800a3f4:	f000 fe72 	bl	800b0dc <_free_r>
 800a3f8:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800a3fa:	b111      	cbz	r1, 800a402 <_reclaim_reent+0x9e>
 800a3fc:	4620      	mov	r0, r4
 800a3fe:	f000 fe6d 	bl	800b0dc <_free_r>
 800a402:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800a404:	b111      	cbz	r1, 800a40c <_reclaim_reent+0xa8>
 800a406:	4620      	mov	r0, r4
 800a408:	f000 fe68 	bl	800b0dc <_free_r>
 800a40c:	6a23      	ldr	r3, [r4, #32]
 800a40e:	b11b      	cbz	r3, 800a418 <_reclaim_reent+0xb4>
 800a410:	4620      	mov	r0, r4
 800a412:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a416:	4718      	bx	r3
 800a418:	bd70      	pop	{r4, r5, r6, pc}
 800a41a:	bf00      	nop
 800a41c:	2000001c 	.word	0x2000001c

0800a420 <_lseek_r>:
 800a420:	b538      	push	{r3, r4, r5, lr}
 800a422:	4d07      	ldr	r5, [pc, #28]	@ (800a440 <_lseek_r+0x20>)
 800a424:	4604      	mov	r4, r0
 800a426:	4608      	mov	r0, r1
 800a428:	4611      	mov	r1, r2
 800a42a:	2200      	movs	r2, #0
 800a42c:	602a      	str	r2, [r5, #0]
 800a42e:	461a      	mov	r2, r3
 800a430:	f7f7 f99b 	bl	800176a <_lseek>
 800a434:	1c43      	adds	r3, r0, #1
 800a436:	d102      	bne.n	800a43e <_lseek_r+0x1e>
 800a438:	682b      	ldr	r3, [r5, #0]
 800a43a:	b103      	cbz	r3, 800a43e <_lseek_r+0x1e>
 800a43c:	6023      	str	r3, [r4, #0]
 800a43e:	bd38      	pop	{r3, r4, r5, pc}
 800a440:	20005558 	.word	0x20005558

0800a444 <_read_r>:
 800a444:	b538      	push	{r3, r4, r5, lr}
 800a446:	4d07      	ldr	r5, [pc, #28]	@ (800a464 <_read_r+0x20>)
 800a448:	4604      	mov	r4, r0
 800a44a:	4608      	mov	r0, r1
 800a44c:	4611      	mov	r1, r2
 800a44e:	2200      	movs	r2, #0
 800a450:	602a      	str	r2, [r5, #0]
 800a452:	461a      	mov	r2, r3
 800a454:	f7f7 f929 	bl	80016aa <_read>
 800a458:	1c43      	adds	r3, r0, #1
 800a45a:	d102      	bne.n	800a462 <_read_r+0x1e>
 800a45c:	682b      	ldr	r3, [r5, #0]
 800a45e:	b103      	cbz	r3, 800a462 <_read_r+0x1e>
 800a460:	6023      	str	r3, [r4, #0]
 800a462:	bd38      	pop	{r3, r4, r5, pc}
 800a464:	20005558 	.word	0x20005558

0800a468 <_write_r>:
 800a468:	b538      	push	{r3, r4, r5, lr}
 800a46a:	4d07      	ldr	r5, [pc, #28]	@ (800a488 <_write_r+0x20>)
 800a46c:	4604      	mov	r4, r0
 800a46e:	4608      	mov	r0, r1
 800a470:	4611      	mov	r1, r2
 800a472:	2200      	movs	r2, #0
 800a474:	602a      	str	r2, [r5, #0]
 800a476:	461a      	mov	r2, r3
 800a478:	f7f7 f934 	bl	80016e4 <_write>
 800a47c:	1c43      	adds	r3, r0, #1
 800a47e:	d102      	bne.n	800a486 <_write_r+0x1e>
 800a480:	682b      	ldr	r3, [r5, #0]
 800a482:	b103      	cbz	r3, 800a486 <_write_r+0x1e>
 800a484:	6023      	str	r3, [r4, #0]
 800a486:	bd38      	pop	{r3, r4, r5, pc}
 800a488:	20005558 	.word	0x20005558

0800a48c <__errno>:
 800a48c:	4b01      	ldr	r3, [pc, #4]	@ (800a494 <__errno+0x8>)
 800a48e:	6818      	ldr	r0, [r3, #0]
 800a490:	4770      	bx	lr
 800a492:	bf00      	nop
 800a494:	2000001c 	.word	0x2000001c

0800a498 <__libc_init_array>:
 800a498:	b570      	push	{r4, r5, r6, lr}
 800a49a:	4d0d      	ldr	r5, [pc, #52]	@ (800a4d0 <__libc_init_array+0x38>)
 800a49c:	4c0d      	ldr	r4, [pc, #52]	@ (800a4d4 <__libc_init_array+0x3c>)
 800a49e:	1b64      	subs	r4, r4, r5
 800a4a0:	10a4      	asrs	r4, r4, #2
 800a4a2:	2600      	movs	r6, #0
 800a4a4:	42a6      	cmp	r6, r4
 800a4a6:	d109      	bne.n	800a4bc <__libc_init_array+0x24>
 800a4a8:	4d0b      	ldr	r5, [pc, #44]	@ (800a4d8 <__libc_init_array+0x40>)
 800a4aa:	4c0c      	ldr	r4, [pc, #48]	@ (800a4dc <__libc_init_array+0x44>)
 800a4ac:	f003 fab2 	bl	800da14 <_init>
 800a4b0:	1b64      	subs	r4, r4, r5
 800a4b2:	10a4      	asrs	r4, r4, #2
 800a4b4:	2600      	movs	r6, #0
 800a4b6:	42a6      	cmp	r6, r4
 800a4b8:	d105      	bne.n	800a4c6 <__libc_init_array+0x2e>
 800a4ba:	bd70      	pop	{r4, r5, r6, pc}
 800a4bc:	f855 3b04 	ldr.w	r3, [r5], #4
 800a4c0:	4798      	blx	r3
 800a4c2:	3601      	adds	r6, #1
 800a4c4:	e7ee      	b.n	800a4a4 <__libc_init_array+0xc>
 800a4c6:	f855 3b04 	ldr.w	r3, [r5], #4
 800a4ca:	4798      	blx	r3
 800a4cc:	3601      	adds	r6, #1
 800a4ce:	e7f2      	b.n	800a4b6 <__libc_init_array+0x1e>
 800a4d0:	0800e01c 	.word	0x0800e01c
 800a4d4:	0800e01c 	.word	0x0800e01c
 800a4d8:	0800e01c 	.word	0x0800e01c
 800a4dc:	0800e020 	.word	0x0800e020

0800a4e0 <__retarget_lock_init_recursive>:
 800a4e0:	4770      	bx	lr

0800a4e2 <__retarget_lock_acquire_recursive>:
 800a4e2:	4770      	bx	lr

0800a4e4 <__retarget_lock_release_recursive>:
 800a4e4:	4770      	bx	lr

0800a4e6 <memcpy>:
 800a4e6:	440a      	add	r2, r1
 800a4e8:	4291      	cmp	r1, r2
 800a4ea:	f100 33ff 	add.w	r3, r0, #4294967295
 800a4ee:	d100      	bne.n	800a4f2 <memcpy+0xc>
 800a4f0:	4770      	bx	lr
 800a4f2:	b510      	push	{r4, lr}
 800a4f4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a4f8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a4fc:	4291      	cmp	r1, r2
 800a4fe:	d1f9      	bne.n	800a4f4 <memcpy+0xe>
 800a500:	bd10      	pop	{r4, pc}
	...

0800a504 <nanf>:
 800a504:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800a50c <nanf+0x8>
 800a508:	4770      	bx	lr
 800a50a:	bf00      	nop
 800a50c:	7fc00000 	.word	0x7fc00000

0800a510 <quorem>:
 800a510:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a514:	6903      	ldr	r3, [r0, #16]
 800a516:	690c      	ldr	r4, [r1, #16]
 800a518:	42a3      	cmp	r3, r4
 800a51a:	4607      	mov	r7, r0
 800a51c:	db7e      	blt.n	800a61c <quorem+0x10c>
 800a51e:	3c01      	subs	r4, #1
 800a520:	f101 0814 	add.w	r8, r1, #20
 800a524:	00a3      	lsls	r3, r4, #2
 800a526:	f100 0514 	add.w	r5, r0, #20
 800a52a:	9300      	str	r3, [sp, #0]
 800a52c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a530:	9301      	str	r3, [sp, #4]
 800a532:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a536:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a53a:	3301      	adds	r3, #1
 800a53c:	429a      	cmp	r2, r3
 800a53e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a542:	fbb2 f6f3 	udiv	r6, r2, r3
 800a546:	d32e      	bcc.n	800a5a6 <quorem+0x96>
 800a548:	f04f 0a00 	mov.w	sl, #0
 800a54c:	46c4      	mov	ip, r8
 800a54e:	46ae      	mov	lr, r5
 800a550:	46d3      	mov	fp, sl
 800a552:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a556:	b298      	uxth	r0, r3
 800a558:	fb06 a000 	mla	r0, r6, r0, sl
 800a55c:	0c02      	lsrs	r2, r0, #16
 800a55e:	0c1b      	lsrs	r3, r3, #16
 800a560:	fb06 2303 	mla	r3, r6, r3, r2
 800a564:	f8de 2000 	ldr.w	r2, [lr]
 800a568:	b280      	uxth	r0, r0
 800a56a:	b292      	uxth	r2, r2
 800a56c:	1a12      	subs	r2, r2, r0
 800a56e:	445a      	add	r2, fp
 800a570:	f8de 0000 	ldr.w	r0, [lr]
 800a574:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a578:	b29b      	uxth	r3, r3
 800a57a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a57e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a582:	b292      	uxth	r2, r2
 800a584:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a588:	45e1      	cmp	r9, ip
 800a58a:	f84e 2b04 	str.w	r2, [lr], #4
 800a58e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a592:	d2de      	bcs.n	800a552 <quorem+0x42>
 800a594:	9b00      	ldr	r3, [sp, #0]
 800a596:	58eb      	ldr	r3, [r5, r3]
 800a598:	b92b      	cbnz	r3, 800a5a6 <quorem+0x96>
 800a59a:	9b01      	ldr	r3, [sp, #4]
 800a59c:	3b04      	subs	r3, #4
 800a59e:	429d      	cmp	r5, r3
 800a5a0:	461a      	mov	r2, r3
 800a5a2:	d32f      	bcc.n	800a604 <quorem+0xf4>
 800a5a4:	613c      	str	r4, [r7, #16]
 800a5a6:	4638      	mov	r0, r7
 800a5a8:	f001 f954 	bl	800b854 <__mcmp>
 800a5ac:	2800      	cmp	r0, #0
 800a5ae:	db25      	blt.n	800a5fc <quorem+0xec>
 800a5b0:	4629      	mov	r1, r5
 800a5b2:	2000      	movs	r0, #0
 800a5b4:	f858 2b04 	ldr.w	r2, [r8], #4
 800a5b8:	f8d1 c000 	ldr.w	ip, [r1]
 800a5bc:	fa1f fe82 	uxth.w	lr, r2
 800a5c0:	fa1f f38c 	uxth.w	r3, ip
 800a5c4:	eba3 030e 	sub.w	r3, r3, lr
 800a5c8:	4403      	add	r3, r0
 800a5ca:	0c12      	lsrs	r2, r2, #16
 800a5cc:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a5d0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a5d4:	b29b      	uxth	r3, r3
 800a5d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a5da:	45c1      	cmp	r9, r8
 800a5dc:	f841 3b04 	str.w	r3, [r1], #4
 800a5e0:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a5e4:	d2e6      	bcs.n	800a5b4 <quorem+0xa4>
 800a5e6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a5ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a5ee:	b922      	cbnz	r2, 800a5fa <quorem+0xea>
 800a5f0:	3b04      	subs	r3, #4
 800a5f2:	429d      	cmp	r5, r3
 800a5f4:	461a      	mov	r2, r3
 800a5f6:	d30b      	bcc.n	800a610 <quorem+0x100>
 800a5f8:	613c      	str	r4, [r7, #16]
 800a5fa:	3601      	adds	r6, #1
 800a5fc:	4630      	mov	r0, r6
 800a5fe:	b003      	add	sp, #12
 800a600:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a604:	6812      	ldr	r2, [r2, #0]
 800a606:	3b04      	subs	r3, #4
 800a608:	2a00      	cmp	r2, #0
 800a60a:	d1cb      	bne.n	800a5a4 <quorem+0x94>
 800a60c:	3c01      	subs	r4, #1
 800a60e:	e7c6      	b.n	800a59e <quorem+0x8e>
 800a610:	6812      	ldr	r2, [r2, #0]
 800a612:	3b04      	subs	r3, #4
 800a614:	2a00      	cmp	r2, #0
 800a616:	d1ef      	bne.n	800a5f8 <quorem+0xe8>
 800a618:	3c01      	subs	r4, #1
 800a61a:	e7ea      	b.n	800a5f2 <quorem+0xe2>
 800a61c:	2000      	movs	r0, #0
 800a61e:	e7ee      	b.n	800a5fe <quorem+0xee>

0800a620 <_dtoa_r>:
 800a620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a624:	ed2d 8b02 	vpush	{d8}
 800a628:	69c7      	ldr	r7, [r0, #28]
 800a62a:	b091      	sub	sp, #68	@ 0x44
 800a62c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a630:	ec55 4b10 	vmov	r4, r5, d0
 800a634:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800a636:	9107      	str	r1, [sp, #28]
 800a638:	4681      	mov	r9, r0
 800a63a:	9209      	str	r2, [sp, #36]	@ 0x24
 800a63c:	930d      	str	r3, [sp, #52]	@ 0x34
 800a63e:	b97f      	cbnz	r7, 800a660 <_dtoa_r+0x40>
 800a640:	2010      	movs	r0, #16
 800a642:	f000 fd95 	bl	800b170 <malloc>
 800a646:	4602      	mov	r2, r0
 800a648:	f8c9 001c 	str.w	r0, [r9, #28]
 800a64c:	b920      	cbnz	r0, 800a658 <_dtoa_r+0x38>
 800a64e:	4ba0      	ldr	r3, [pc, #640]	@ (800a8d0 <_dtoa_r+0x2b0>)
 800a650:	21ef      	movs	r1, #239	@ 0xef
 800a652:	48a0      	ldr	r0, [pc, #640]	@ (800a8d4 <_dtoa_r+0x2b4>)
 800a654:	f002 fb68 	bl	800cd28 <__assert_func>
 800a658:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a65c:	6007      	str	r7, [r0, #0]
 800a65e:	60c7      	str	r7, [r0, #12]
 800a660:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a664:	6819      	ldr	r1, [r3, #0]
 800a666:	b159      	cbz	r1, 800a680 <_dtoa_r+0x60>
 800a668:	685a      	ldr	r2, [r3, #4]
 800a66a:	604a      	str	r2, [r1, #4]
 800a66c:	2301      	movs	r3, #1
 800a66e:	4093      	lsls	r3, r2
 800a670:	608b      	str	r3, [r1, #8]
 800a672:	4648      	mov	r0, r9
 800a674:	f000 fe72 	bl	800b35c <_Bfree>
 800a678:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a67c:	2200      	movs	r2, #0
 800a67e:	601a      	str	r2, [r3, #0]
 800a680:	1e2b      	subs	r3, r5, #0
 800a682:	bfbb      	ittet	lt
 800a684:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a688:	9303      	strlt	r3, [sp, #12]
 800a68a:	2300      	movge	r3, #0
 800a68c:	2201      	movlt	r2, #1
 800a68e:	bfac      	ite	ge
 800a690:	6033      	strge	r3, [r6, #0]
 800a692:	6032      	strlt	r2, [r6, #0]
 800a694:	4b90      	ldr	r3, [pc, #576]	@ (800a8d8 <_dtoa_r+0x2b8>)
 800a696:	9e03      	ldr	r6, [sp, #12]
 800a698:	43b3      	bics	r3, r6
 800a69a:	d110      	bne.n	800a6be <_dtoa_r+0x9e>
 800a69c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a69e:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a6a2:	6013      	str	r3, [r2, #0]
 800a6a4:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800a6a8:	4323      	orrs	r3, r4
 800a6aa:	f000 84e6 	beq.w	800b07a <_dtoa_r+0xa5a>
 800a6ae:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a6b0:	4f8a      	ldr	r7, [pc, #552]	@ (800a8dc <_dtoa_r+0x2bc>)
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	f000 84e8 	beq.w	800b088 <_dtoa_r+0xa68>
 800a6b8:	1cfb      	adds	r3, r7, #3
 800a6ba:	f000 bce3 	b.w	800b084 <_dtoa_r+0xa64>
 800a6be:	ed9d 8b02 	vldr	d8, [sp, #8]
 800a6c2:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800a6c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6ca:	d10a      	bne.n	800a6e2 <_dtoa_r+0xc2>
 800a6cc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a6ce:	2301      	movs	r3, #1
 800a6d0:	6013      	str	r3, [r2, #0]
 800a6d2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a6d4:	b113      	cbz	r3, 800a6dc <_dtoa_r+0xbc>
 800a6d6:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800a6d8:	4b81      	ldr	r3, [pc, #516]	@ (800a8e0 <_dtoa_r+0x2c0>)
 800a6da:	6013      	str	r3, [r2, #0]
 800a6dc:	4f81      	ldr	r7, [pc, #516]	@ (800a8e4 <_dtoa_r+0x2c4>)
 800a6de:	f000 bcd3 	b.w	800b088 <_dtoa_r+0xa68>
 800a6e2:	aa0e      	add	r2, sp, #56	@ 0x38
 800a6e4:	a90f      	add	r1, sp, #60	@ 0x3c
 800a6e6:	4648      	mov	r0, r9
 800a6e8:	eeb0 0b48 	vmov.f64	d0, d8
 800a6ec:	f001 f9d2 	bl	800ba94 <__d2b>
 800a6f0:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800a6f4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a6f6:	9001      	str	r0, [sp, #4]
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d045      	beq.n	800a788 <_dtoa_r+0x168>
 800a6fc:	eeb0 7b48 	vmov.f64	d7, d8
 800a700:	ee18 1a90 	vmov	r1, s17
 800a704:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800a708:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800a70c:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800a710:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800a714:	2500      	movs	r5, #0
 800a716:	ee07 1a90 	vmov	s15, r1
 800a71a:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800a71e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800a8b8 <_dtoa_r+0x298>
 800a722:	ee37 7b46 	vsub.f64	d7, d7, d6
 800a726:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800a8c0 <_dtoa_r+0x2a0>
 800a72a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800a72e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800a8c8 <_dtoa_r+0x2a8>
 800a732:	ee07 3a90 	vmov	s15, r3
 800a736:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800a73a:	eeb0 7b46 	vmov.f64	d7, d6
 800a73e:	eea4 7b05 	vfma.f64	d7, d4, d5
 800a742:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800a746:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800a74a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a74e:	ee16 8a90 	vmov	r8, s13
 800a752:	d508      	bpl.n	800a766 <_dtoa_r+0x146>
 800a754:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800a758:	eeb4 6b47 	vcmp.f64	d6, d7
 800a75c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a760:	bf18      	it	ne
 800a762:	f108 38ff 	addne.w	r8, r8, #4294967295
 800a766:	f1b8 0f16 	cmp.w	r8, #22
 800a76a:	d82b      	bhi.n	800a7c4 <_dtoa_r+0x1a4>
 800a76c:	495e      	ldr	r1, [pc, #376]	@ (800a8e8 <_dtoa_r+0x2c8>)
 800a76e:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800a772:	ed91 7b00 	vldr	d7, [r1]
 800a776:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800a77a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a77e:	d501      	bpl.n	800a784 <_dtoa_r+0x164>
 800a780:	f108 38ff 	add.w	r8, r8, #4294967295
 800a784:	2100      	movs	r1, #0
 800a786:	e01e      	b.n	800a7c6 <_dtoa_r+0x1a6>
 800a788:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a78a:	4413      	add	r3, r2
 800a78c:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800a790:	2920      	cmp	r1, #32
 800a792:	bfc1      	itttt	gt
 800a794:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800a798:	408e      	lslgt	r6, r1
 800a79a:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800a79e:	fa24 f101 	lsrgt.w	r1, r4, r1
 800a7a2:	bfd6      	itet	le
 800a7a4:	f1c1 0120 	rsble	r1, r1, #32
 800a7a8:	4331      	orrgt	r1, r6
 800a7aa:	fa04 f101 	lslle.w	r1, r4, r1
 800a7ae:	ee07 1a90 	vmov	s15, r1
 800a7b2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800a7b6:	3b01      	subs	r3, #1
 800a7b8:	ee17 1a90 	vmov	r1, s15
 800a7bc:	2501      	movs	r5, #1
 800a7be:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800a7c2:	e7a8      	b.n	800a716 <_dtoa_r+0xf6>
 800a7c4:	2101      	movs	r1, #1
 800a7c6:	1ad2      	subs	r2, r2, r3
 800a7c8:	1e53      	subs	r3, r2, #1
 800a7ca:	9306      	str	r3, [sp, #24]
 800a7cc:	bf45      	ittet	mi
 800a7ce:	f1c2 0301 	rsbmi	r3, r2, #1
 800a7d2:	9304      	strmi	r3, [sp, #16]
 800a7d4:	2300      	movpl	r3, #0
 800a7d6:	2300      	movmi	r3, #0
 800a7d8:	bf4c      	ite	mi
 800a7da:	9306      	strmi	r3, [sp, #24]
 800a7dc:	9304      	strpl	r3, [sp, #16]
 800a7de:	f1b8 0f00 	cmp.w	r8, #0
 800a7e2:	910c      	str	r1, [sp, #48]	@ 0x30
 800a7e4:	db18      	blt.n	800a818 <_dtoa_r+0x1f8>
 800a7e6:	9b06      	ldr	r3, [sp, #24]
 800a7e8:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800a7ec:	4443      	add	r3, r8
 800a7ee:	9306      	str	r3, [sp, #24]
 800a7f0:	2300      	movs	r3, #0
 800a7f2:	9a07      	ldr	r2, [sp, #28]
 800a7f4:	2a09      	cmp	r2, #9
 800a7f6:	d845      	bhi.n	800a884 <_dtoa_r+0x264>
 800a7f8:	2a05      	cmp	r2, #5
 800a7fa:	bfc4      	itt	gt
 800a7fc:	3a04      	subgt	r2, #4
 800a7fe:	9207      	strgt	r2, [sp, #28]
 800a800:	9a07      	ldr	r2, [sp, #28]
 800a802:	f1a2 0202 	sub.w	r2, r2, #2
 800a806:	bfcc      	ite	gt
 800a808:	2400      	movgt	r4, #0
 800a80a:	2401      	movle	r4, #1
 800a80c:	2a03      	cmp	r2, #3
 800a80e:	d844      	bhi.n	800a89a <_dtoa_r+0x27a>
 800a810:	e8df f002 	tbb	[pc, r2]
 800a814:	0b173634 	.word	0x0b173634
 800a818:	9b04      	ldr	r3, [sp, #16]
 800a81a:	2200      	movs	r2, #0
 800a81c:	eba3 0308 	sub.w	r3, r3, r8
 800a820:	9304      	str	r3, [sp, #16]
 800a822:	920a      	str	r2, [sp, #40]	@ 0x28
 800a824:	f1c8 0300 	rsb	r3, r8, #0
 800a828:	e7e3      	b.n	800a7f2 <_dtoa_r+0x1d2>
 800a82a:	2201      	movs	r2, #1
 800a82c:	9208      	str	r2, [sp, #32]
 800a82e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a830:	eb08 0b02 	add.w	fp, r8, r2
 800a834:	f10b 0a01 	add.w	sl, fp, #1
 800a838:	4652      	mov	r2, sl
 800a83a:	2a01      	cmp	r2, #1
 800a83c:	bfb8      	it	lt
 800a83e:	2201      	movlt	r2, #1
 800a840:	e006      	b.n	800a850 <_dtoa_r+0x230>
 800a842:	2201      	movs	r2, #1
 800a844:	9208      	str	r2, [sp, #32]
 800a846:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a848:	2a00      	cmp	r2, #0
 800a84a:	dd29      	ble.n	800a8a0 <_dtoa_r+0x280>
 800a84c:	4693      	mov	fp, r2
 800a84e:	4692      	mov	sl, r2
 800a850:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800a854:	2100      	movs	r1, #0
 800a856:	2004      	movs	r0, #4
 800a858:	f100 0614 	add.w	r6, r0, #20
 800a85c:	4296      	cmp	r6, r2
 800a85e:	d926      	bls.n	800a8ae <_dtoa_r+0x28e>
 800a860:	6079      	str	r1, [r7, #4]
 800a862:	4648      	mov	r0, r9
 800a864:	9305      	str	r3, [sp, #20]
 800a866:	f000 fd39 	bl	800b2dc <_Balloc>
 800a86a:	9b05      	ldr	r3, [sp, #20]
 800a86c:	4607      	mov	r7, r0
 800a86e:	2800      	cmp	r0, #0
 800a870:	d13e      	bne.n	800a8f0 <_dtoa_r+0x2d0>
 800a872:	4b1e      	ldr	r3, [pc, #120]	@ (800a8ec <_dtoa_r+0x2cc>)
 800a874:	4602      	mov	r2, r0
 800a876:	f240 11af 	movw	r1, #431	@ 0x1af
 800a87a:	e6ea      	b.n	800a652 <_dtoa_r+0x32>
 800a87c:	2200      	movs	r2, #0
 800a87e:	e7e1      	b.n	800a844 <_dtoa_r+0x224>
 800a880:	2200      	movs	r2, #0
 800a882:	e7d3      	b.n	800a82c <_dtoa_r+0x20c>
 800a884:	2401      	movs	r4, #1
 800a886:	2200      	movs	r2, #0
 800a888:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800a88c:	f04f 3bff 	mov.w	fp, #4294967295
 800a890:	2100      	movs	r1, #0
 800a892:	46da      	mov	sl, fp
 800a894:	2212      	movs	r2, #18
 800a896:	9109      	str	r1, [sp, #36]	@ 0x24
 800a898:	e7da      	b.n	800a850 <_dtoa_r+0x230>
 800a89a:	2201      	movs	r2, #1
 800a89c:	9208      	str	r2, [sp, #32]
 800a89e:	e7f5      	b.n	800a88c <_dtoa_r+0x26c>
 800a8a0:	f04f 0b01 	mov.w	fp, #1
 800a8a4:	46da      	mov	sl, fp
 800a8a6:	465a      	mov	r2, fp
 800a8a8:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800a8ac:	e7d0      	b.n	800a850 <_dtoa_r+0x230>
 800a8ae:	3101      	adds	r1, #1
 800a8b0:	0040      	lsls	r0, r0, #1
 800a8b2:	e7d1      	b.n	800a858 <_dtoa_r+0x238>
 800a8b4:	f3af 8000 	nop.w
 800a8b8:	636f4361 	.word	0x636f4361
 800a8bc:	3fd287a7 	.word	0x3fd287a7
 800a8c0:	8b60c8b3 	.word	0x8b60c8b3
 800a8c4:	3fc68a28 	.word	0x3fc68a28
 800a8c8:	509f79fb 	.word	0x509f79fb
 800a8cc:	3fd34413 	.word	0x3fd34413
 800a8d0:	0800dc32 	.word	0x0800dc32
 800a8d4:	0800dc49 	.word	0x0800dc49
 800a8d8:	7ff00000 	.word	0x7ff00000
 800a8dc:	0800dc2e 	.word	0x0800dc2e
 800a8e0:	0800dbfd 	.word	0x0800dbfd
 800a8e4:	0800dbfc 	.word	0x0800dbfc
 800a8e8:	0800ddf8 	.word	0x0800ddf8
 800a8ec:	0800dca1 	.word	0x0800dca1
 800a8f0:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800a8f4:	f1ba 0f0e 	cmp.w	sl, #14
 800a8f8:	6010      	str	r0, [r2, #0]
 800a8fa:	d86e      	bhi.n	800a9da <_dtoa_r+0x3ba>
 800a8fc:	2c00      	cmp	r4, #0
 800a8fe:	d06c      	beq.n	800a9da <_dtoa_r+0x3ba>
 800a900:	f1b8 0f00 	cmp.w	r8, #0
 800a904:	f340 80b4 	ble.w	800aa70 <_dtoa_r+0x450>
 800a908:	4ac8      	ldr	r2, [pc, #800]	@ (800ac2c <_dtoa_r+0x60c>)
 800a90a:	f008 010f 	and.w	r1, r8, #15
 800a90e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800a912:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800a916:	ed92 7b00 	vldr	d7, [r2]
 800a91a:	ea4f 1128 	mov.w	r1, r8, asr #4
 800a91e:	f000 809b 	beq.w	800aa58 <_dtoa_r+0x438>
 800a922:	4ac3      	ldr	r2, [pc, #780]	@ (800ac30 <_dtoa_r+0x610>)
 800a924:	ed92 6b08 	vldr	d6, [r2, #32]
 800a928:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800a92c:	ed8d 6b02 	vstr	d6, [sp, #8]
 800a930:	f001 010f 	and.w	r1, r1, #15
 800a934:	2203      	movs	r2, #3
 800a936:	48be      	ldr	r0, [pc, #760]	@ (800ac30 <_dtoa_r+0x610>)
 800a938:	2900      	cmp	r1, #0
 800a93a:	f040 808f 	bne.w	800aa5c <_dtoa_r+0x43c>
 800a93e:	ed9d 6b02 	vldr	d6, [sp, #8]
 800a942:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800a946:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a94a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800a94c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a950:	2900      	cmp	r1, #0
 800a952:	f000 80b3 	beq.w	800aabc <_dtoa_r+0x49c>
 800a956:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800a95a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800a95e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a962:	f140 80ab 	bpl.w	800aabc <_dtoa_r+0x49c>
 800a966:	f1ba 0f00 	cmp.w	sl, #0
 800a96a:	f000 80a7 	beq.w	800aabc <_dtoa_r+0x49c>
 800a96e:	f1bb 0f00 	cmp.w	fp, #0
 800a972:	dd30      	ble.n	800a9d6 <_dtoa_r+0x3b6>
 800a974:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800a978:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a97c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a980:	f108 31ff 	add.w	r1, r8, #4294967295
 800a984:	9105      	str	r1, [sp, #20]
 800a986:	3201      	adds	r2, #1
 800a988:	465c      	mov	r4, fp
 800a98a:	ed9d 6b02 	vldr	d6, [sp, #8]
 800a98e:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800a992:	ee07 2a90 	vmov	s15, r2
 800a996:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800a99a:	eea7 5b06 	vfma.f64	d5, d7, d6
 800a99e:	ee15 2a90 	vmov	r2, s11
 800a9a2:	ec51 0b15 	vmov	r0, r1, d5
 800a9a6:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800a9aa:	2c00      	cmp	r4, #0
 800a9ac:	f040 808a 	bne.w	800aac4 <_dtoa_r+0x4a4>
 800a9b0:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800a9b4:	ee36 6b47 	vsub.f64	d6, d6, d7
 800a9b8:	ec41 0b17 	vmov	d7, r0, r1
 800a9bc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a9c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a9c4:	f300 826a 	bgt.w	800ae9c <_dtoa_r+0x87c>
 800a9c8:	eeb1 7b47 	vneg.f64	d7, d7
 800a9cc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a9d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a9d4:	d423      	bmi.n	800aa1e <_dtoa_r+0x3fe>
 800a9d6:	ed8d 8b02 	vstr	d8, [sp, #8]
 800a9da:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800a9dc:	2a00      	cmp	r2, #0
 800a9de:	f2c0 8129 	blt.w	800ac34 <_dtoa_r+0x614>
 800a9e2:	f1b8 0f0e 	cmp.w	r8, #14
 800a9e6:	f300 8125 	bgt.w	800ac34 <_dtoa_r+0x614>
 800a9ea:	4b90      	ldr	r3, [pc, #576]	@ (800ac2c <_dtoa_r+0x60c>)
 800a9ec:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800a9f0:	ed93 6b00 	vldr	d6, [r3]
 800a9f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	f280 80c8 	bge.w	800ab8c <_dtoa_r+0x56c>
 800a9fc:	f1ba 0f00 	cmp.w	sl, #0
 800aa00:	f300 80c4 	bgt.w	800ab8c <_dtoa_r+0x56c>
 800aa04:	d10b      	bne.n	800aa1e <_dtoa_r+0x3fe>
 800aa06:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800aa0a:	ee26 6b07 	vmul.f64	d6, d6, d7
 800aa0e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800aa12:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800aa16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa1a:	f2c0 823c 	blt.w	800ae96 <_dtoa_r+0x876>
 800aa1e:	2400      	movs	r4, #0
 800aa20:	4625      	mov	r5, r4
 800aa22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa24:	43db      	mvns	r3, r3
 800aa26:	9305      	str	r3, [sp, #20]
 800aa28:	463e      	mov	r6, r7
 800aa2a:	f04f 0800 	mov.w	r8, #0
 800aa2e:	4621      	mov	r1, r4
 800aa30:	4648      	mov	r0, r9
 800aa32:	f000 fc93 	bl	800b35c <_Bfree>
 800aa36:	2d00      	cmp	r5, #0
 800aa38:	f000 80a2 	beq.w	800ab80 <_dtoa_r+0x560>
 800aa3c:	f1b8 0f00 	cmp.w	r8, #0
 800aa40:	d005      	beq.n	800aa4e <_dtoa_r+0x42e>
 800aa42:	45a8      	cmp	r8, r5
 800aa44:	d003      	beq.n	800aa4e <_dtoa_r+0x42e>
 800aa46:	4641      	mov	r1, r8
 800aa48:	4648      	mov	r0, r9
 800aa4a:	f000 fc87 	bl	800b35c <_Bfree>
 800aa4e:	4629      	mov	r1, r5
 800aa50:	4648      	mov	r0, r9
 800aa52:	f000 fc83 	bl	800b35c <_Bfree>
 800aa56:	e093      	b.n	800ab80 <_dtoa_r+0x560>
 800aa58:	2202      	movs	r2, #2
 800aa5a:	e76c      	b.n	800a936 <_dtoa_r+0x316>
 800aa5c:	07cc      	lsls	r4, r1, #31
 800aa5e:	d504      	bpl.n	800aa6a <_dtoa_r+0x44a>
 800aa60:	ed90 6b00 	vldr	d6, [r0]
 800aa64:	3201      	adds	r2, #1
 800aa66:	ee27 7b06 	vmul.f64	d7, d7, d6
 800aa6a:	1049      	asrs	r1, r1, #1
 800aa6c:	3008      	adds	r0, #8
 800aa6e:	e763      	b.n	800a938 <_dtoa_r+0x318>
 800aa70:	d022      	beq.n	800aab8 <_dtoa_r+0x498>
 800aa72:	f1c8 0100 	rsb	r1, r8, #0
 800aa76:	4a6d      	ldr	r2, [pc, #436]	@ (800ac2c <_dtoa_r+0x60c>)
 800aa78:	f001 000f 	and.w	r0, r1, #15
 800aa7c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800aa80:	ed92 7b00 	vldr	d7, [r2]
 800aa84:	ee28 7b07 	vmul.f64	d7, d8, d7
 800aa88:	ed8d 7b02 	vstr	d7, [sp, #8]
 800aa8c:	4868      	ldr	r0, [pc, #416]	@ (800ac30 <_dtoa_r+0x610>)
 800aa8e:	1109      	asrs	r1, r1, #4
 800aa90:	2400      	movs	r4, #0
 800aa92:	2202      	movs	r2, #2
 800aa94:	b929      	cbnz	r1, 800aaa2 <_dtoa_r+0x482>
 800aa96:	2c00      	cmp	r4, #0
 800aa98:	f43f af57 	beq.w	800a94a <_dtoa_r+0x32a>
 800aa9c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800aaa0:	e753      	b.n	800a94a <_dtoa_r+0x32a>
 800aaa2:	07ce      	lsls	r6, r1, #31
 800aaa4:	d505      	bpl.n	800aab2 <_dtoa_r+0x492>
 800aaa6:	ed90 6b00 	vldr	d6, [r0]
 800aaaa:	3201      	adds	r2, #1
 800aaac:	2401      	movs	r4, #1
 800aaae:	ee27 7b06 	vmul.f64	d7, d7, d6
 800aab2:	1049      	asrs	r1, r1, #1
 800aab4:	3008      	adds	r0, #8
 800aab6:	e7ed      	b.n	800aa94 <_dtoa_r+0x474>
 800aab8:	2202      	movs	r2, #2
 800aaba:	e746      	b.n	800a94a <_dtoa_r+0x32a>
 800aabc:	f8cd 8014 	str.w	r8, [sp, #20]
 800aac0:	4654      	mov	r4, sl
 800aac2:	e762      	b.n	800a98a <_dtoa_r+0x36a>
 800aac4:	4a59      	ldr	r2, [pc, #356]	@ (800ac2c <_dtoa_r+0x60c>)
 800aac6:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800aaca:	ed12 4b02 	vldr	d4, [r2, #-8]
 800aace:	9a08      	ldr	r2, [sp, #32]
 800aad0:	ec41 0b17 	vmov	d7, r0, r1
 800aad4:	443c      	add	r4, r7
 800aad6:	b34a      	cbz	r2, 800ab2c <_dtoa_r+0x50c>
 800aad8:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800aadc:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800aae0:	463e      	mov	r6, r7
 800aae2:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800aae6:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800aaea:	ee35 7b47 	vsub.f64	d7, d5, d7
 800aaee:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800aaf2:	ee14 2a90 	vmov	r2, s9
 800aaf6:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800aafa:	3230      	adds	r2, #48	@ 0x30
 800aafc:	ee36 6b45 	vsub.f64	d6, d6, d5
 800ab00:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ab04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab08:	f806 2b01 	strb.w	r2, [r6], #1
 800ab0c:	d438      	bmi.n	800ab80 <_dtoa_r+0x560>
 800ab0e:	ee32 5b46 	vsub.f64	d5, d2, d6
 800ab12:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800ab16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab1a:	d46e      	bmi.n	800abfa <_dtoa_r+0x5da>
 800ab1c:	42a6      	cmp	r6, r4
 800ab1e:	f43f af5a 	beq.w	800a9d6 <_dtoa_r+0x3b6>
 800ab22:	ee27 7b03 	vmul.f64	d7, d7, d3
 800ab26:	ee26 6b03 	vmul.f64	d6, d6, d3
 800ab2a:	e7e0      	b.n	800aaee <_dtoa_r+0x4ce>
 800ab2c:	4621      	mov	r1, r4
 800ab2e:	463e      	mov	r6, r7
 800ab30:	ee27 7b04 	vmul.f64	d7, d7, d4
 800ab34:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800ab38:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800ab3c:	ee14 2a90 	vmov	r2, s9
 800ab40:	3230      	adds	r2, #48	@ 0x30
 800ab42:	f806 2b01 	strb.w	r2, [r6], #1
 800ab46:	42a6      	cmp	r6, r4
 800ab48:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800ab4c:	ee36 6b45 	vsub.f64	d6, d6, d5
 800ab50:	d119      	bne.n	800ab86 <_dtoa_r+0x566>
 800ab52:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800ab56:	ee37 4b05 	vadd.f64	d4, d7, d5
 800ab5a:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800ab5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab62:	dc4a      	bgt.n	800abfa <_dtoa_r+0x5da>
 800ab64:	ee35 5b47 	vsub.f64	d5, d5, d7
 800ab68:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800ab6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab70:	f57f af31 	bpl.w	800a9d6 <_dtoa_r+0x3b6>
 800ab74:	460e      	mov	r6, r1
 800ab76:	3901      	subs	r1, #1
 800ab78:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ab7c:	2b30      	cmp	r3, #48	@ 0x30
 800ab7e:	d0f9      	beq.n	800ab74 <_dtoa_r+0x554>
 800ab80:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800ab84:	e027      	b.n	800abd6 <_dtoa_r+0x5b6>
 800ab86:	ee26 6b03 	vmul.f64	d6, d6, d3
 800ab8a:	e7d5      	b.n	800ab38 <_dtoa_r+0x518>
 800ab8c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ab90:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800ab94:	463e      	mov	r6, r7
 800ab96:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800ab9a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800ab9e:	ee15 3a10 	vmov	r3, s10
 800aba2:	3330      	adds	r3, #48	@ 0x30
 800aba4:	f806 3b01 	strb.w	r3, [r6], #1
 800aba8:	1bf3      	subs	r3, r6, r7
 800abaa:	459a      	cmp	sl, r3
 800abac:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800abb0:	eea3 7b46 	vfms.f64	d7, d3, d6
 800abb4:	d132      	bne.n	800ac1c <_dtoa_r+0x5fc>
 800abb6:	ee37 7b07 	vadd.f64	d7, d7, d7
 800abba:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800abbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abc2:	dc18      	bgt.n	800abf6 <_dtoa_r+0x5d6>
 800abc4:	eeb4 7b46 	vcmp.f64	d7, d6
 800abc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abcc:	d103      	bne.n	800abd6 <_dtoa_r+0x5b6>
 800abce:	ee15 3a10 	vmov	r3, s10
 800abd2:	07db      	lsls	r3, r3, #31
 800abd4:	d40f      	bmi.n	800abf6 <_dtoa_r+0x5d6>
 800abd6:	9901      	ldr	r1, [sp, #4]
 800abd8:	4648      	mov	r0, r9
 800abda:	f000 fbbf 	bl	800b35c <_Bfree>
 800abde:	2300      	movs	r3, #0
 800abe0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800abe2:	7033      	strb	r3, [r6, #0]
 800abe4:	f108 0301 	add.w	r3, r8, #1
 800abe8:	6013      	str	r3, [r2, #0]
 800abea:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800abec:	2b00      	cmp	r3, #0
 800abee:	f000 824b 	beq.w	800b088 <_dtoa_r+0xa68>
 800abf2:	601e      	str	r6, [r3, #0]
 800abf4:	e248      	b.n	800b088 <_dtoa_r+0xa68>
 800abf6:	f8cd 8014 	str.w	r8, [sp, #20]
 800abfa:	4633      	mov	r3, r6
 800abfc:	461e      	mov	r6, r3
 800abfe:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ac02:	2a39      	cmp	r2, #57	@ 0x39
 800ac04:	d106      	bne.n	800ac14 <_dtoa_r+0x5f4>
 800ac06:	429f      	cmp	r7, r3
 800ac08:	d1f8      	bne.n	800abfc <_dtoa_r+0x5dc>
 800ac0a:	9a05      	ldr	r2, [sp, #20]
 800ac0c:	3201      	adds	r2, #1
 800ac0e:	9205      	str	r2, [sp, #20]
 800ac10:	2230      	movs	r2, #48	@ 0x30
 800ac12:	703a      	strb	r2, [r7, #0]
 800ac14:	781a      	ldrb	r2, [r3, #0]
 800ac16:	3201      	adds	r2, #1
 800ac18:	701a      	strb	r2, [r3, #0]
 800ac1a:	e7b1      	b.n	800ab80 <_dtoa_r+0x560>
 800ac1c:	ee27 7b04 	vmul.f64	d7, d7, d4
 800ac20:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ac24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac28:	d1b5      	bne.n	800ab96 <_dtoa_r+0x576>
 800ac2a:	e7d4      	b.n	800abd6 <_dtoa_r+0x5b6>
 800ac2c:	0800ddf8 	.word	0x0800ddf8
 800ac30:	0800ddd0 	.word	0x0800ddd0
 800ac34:	9908      	ldr	r1, [sp, #32]
 800ac36:	2900      	cmp	r1, #0
 800ac38:	f000 80e9 	beq.w	800ae0e <_dtoa_r+0x7ee>
 800ac3c:	9907      	ldr	r1, [sp, #28]
 800ac3e:	2901      	cmp	r1, #1
 800ac40:	f300 80cb 	bgt.w	800adda <_dtoa_r+0x7ba>
 800ac44:	2d00      	cmp	r5, #0
 800ac46:	f000 80c4 	beq.w	800add2 <_dtoa_r+0x7b2>
 800ac4a:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800ac4e:	9e04      	ldr	r6, [sp, #16]
 800ac50:	461c      	mov	r4, r3
 800ac52:	9305      	str	r3, [sp, #20]
 800ac54:	9b04      	ldr	r3, [sp, #16]
 800ac56:	4413      	add	r3, r2
 800ac58:	9304      	str	r3, [sp, #16]
 800ac5a:	9b06      	ldr	r3, [sp, #24]
 800ac5c:	2101      	movs	r1, #1
 800ac5e:	4413      	add	r3, r2
 800ac60:	4648      	mov	r0, r9
 800ac62:	9306      	str	r3, [sp, #24]
 800ac64:	f000 fc78 	bl	800b558 <__i2b>
 800ac68:	9b05      	ldr	r3, [sp, #20]
 800ac6a:	4605      	mov	r5, r0
 800ac6c:	b166      	cbz	r6, 800ac88 <_dtoa_r+0x668>
 800ac6e:	9a06      	ldr	r2, [sp, #24]
 800ac70:	2a00      	cmp	r2, #0
 800ac72:	dd09      	ble.n	800ac88 <_dtoa_r+0x668>
 800ac74:	42b2      	cmp	r2, r6
 800ac76:	9904      	ldr	r1, [sp, #16]
 800ac78:	bfa8      	it	ge
 800ac7a:	4632      	movge	r2, r6
 800ac7c:	1a89      	subs	r1, r1, r2
 800ac7e:	9104      	str	r1, [sp, #16]
 800ac80:	9906      	ldr	r1, [sp, #24]
 800ac82:	1ab6      	subs	r6, r6, r2
 800ac84:	1a8a      	subs	r2, r1, r2
 800ac86:	9206      	str	r2, [sp, #24]
 800ac88:	b30b      	cbz	r3, 800acce <_dtoa_r+0x6ae>
 800ac8a:	9a08      	ldr	r2, [sp, #32]
 800ac8c:	2a00      	cmp	r2, #0
 800ac8e:	f000 80c5 	beq.w	800ae1c <_dtoa_r+0x7fc>
 800ac92:	2c00      	cmp	r4, #0
 800ac94:	f000 80bf 	beq.w	800ae16 <_dtoa_r+0x7f6>
 800ac98:	4629      	mov	r1, r5
 800ac9a:	4622      	mov	r2, r4
 800ac9c:	4648      	mov	r0, r9
 800ac9e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800aca0:	f000 fd12 	bl	800b6c8 <__pow5mult>
 800aca4:	9a01      	ldr	r2, [sp, #4]
 800aca6:	4601      	mov	r1, r0
 800aca8:	4605      	mov	r5, r0
 800acaa:	4648      	mov	r0, r9
 800acac:	f000 fc6a 	bl	800b584 <__multiply>
 800acb0:	9901      	ldr	r1, [sp, #4]
 800acb2:	9005      	str	r0, [sp, #20]
 800acb4:	4648      	mov	r0, r9
 800acb6:	f000 fb51 	bl	800b35c <_Bfree>
 800acba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800acbc:	1b1b      	subs	r3, r3, r4
 800acbe:	f000 80b0 	beq.w	800ae22 <_dtoa_r+0x802>
 800acc2:	9905      	ldr	r1, [sp, #20]
 800acc4:	461a      	mov	r2, r3
 800acc6:	4648      	mov	r0, r9
 800acc8:	f000 fcfe 	bl	800b6c8 <__pow5mult>
 800accc:	9001      	str	r0, [sp, #4]
 800acce:	2101      	movs	r1, #1
 800acd0:	4648      	mov	r0, r9
 800acd2:	f000 fc41 	bl	800b558 <__i2b>
 800acd6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800acd8:	4604      	mov	r4, r0
 800acda:	2b00      	cmp	r3, #0
 800acdc:	f000 81da 	beq.w	800b094 <_dtoa_r+0xa74>
 800ace0:	461a      	mov	r2, r3
 800ace2:	4601      	mov	r1, r0
 800ace4:	4648      	mov	r0, r9
 800ace6:	f000 fcef 	bl	800b6c8 <__pow5mult>
 800acea:	9b07      	ldr	r3, [sp, #28]
 800acec:	2b01      	cmp	r3, #1
 800acee:	4604      	mov	r4, r0
 800acf0:	f300 80a0 	bgt.w	800ae34 <_dtoa_r+0x814>
 800acf4:	9b02      	ldr	r3, [sp, #8]
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	f040 8096 	bne.w	800ae28 <_dtoa_r+0x808>
 800acfc:	9b03      	ldr	r3, [sp, #12]
 800acfe:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800ad02:	2a00      	cmp	r2, #0
 800ad04:	f040 8092 	bne.w	800ae2c <_dtoa_r+0x80c>
 800ad08:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800ad0c:	0d12      	lsrs	r2, r2, #20
 800ad0e:	0512      	lsls	r2, r2, #20
 800ad10:	2a00      	cmp	r2, #0
 800ad12:	f000 808d 	beq.w	800ae30 <_dtoa_r+0x810>
 800ad16:	9b04      	ldr	r3, [sp, #16]
 800ad18:	3301      	adds	r3, #1
 800ad1a:	9304      	str	r3, [sp, #16]
 800ad1c:	9b06      	ldr	r3, [sp, #24]
 800ad1e:	3301      	adds	r3, #1
 800ad20:	9306      	str	r3, [sp, #24]
 800ad22:	2301      	movs	r3, #1
 800ad24:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ad26:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	f000 81b9 	beq.w	800b0a0 <_dtoa_r+0xa80>
 800ad2e:	6922      	ldr	r2, [r4, #16]
 800ad30:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800ad34:	6910      	ldr	r0, [r2, #16]
 800ad36:	f000 fbc3 	bl	800b4c0 <__hi0bits>
 800ad3a:	f1c0 0020 	rsb	r0, r0, #32
 800ad3e:	9b06      	ldr	r3, [sp, #24]
 800ad40:	4418      	add	r0, r3
 800ad42:	f010 001f 	ands.w	r0, r0, #31
 800ad46:	f000 8081 	beq.w	800ae4c <_dtoa_r+0x82c>
 800ad4a:	f1c0 0220 	rsb	r2, r0, #32
 800ad4e:	2a04      	cmp	r2, #4
 800ad50:	dd73      	ble.n	800ae3a <_dtoa_r+0x81a>
 800ad52:	9b04      	ldr	r3, [sp, #16]
 800ad54:	f1c0 001c 	rsb	r0, r0, #28
 800ad58:	4403      	add	r3, r0
 800ad5a:	9304      	str	r3, [sp, #16]
 800ad5c:	9b06      	ldr	r3, [sp, #24]
 800ad5e:	4406      	add	r6, r0
 800ad60:	4403      	add	r3, r0
 800ad62:	9306      	str	r3, [sp, #24]
 800ad64:	9b04      	ldr	r3, [sp, #16]
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	dd05      	ble.n	800ad76 <_dtoa_r+0x756>
 800ad6a:	9901      	ldr	r1, [sp, #4]
 800ad6c:	461a      	mov	r2, r3
 800ad6e:	4648      	mov	r0, r9
 800ad70:	f000 fd04 	bl	800b77c <__lshift>
 800ad74:	9001      	str	r0, [sp, #4]
 800ad76:	9b06      	ldr	r3, [sp, #24]
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	dd05      	ble.n	800ad88 <_dtoa_r+0x768>
 800ad7c:	4621      	mov	r1, r4
 800ad7e:	461a      	mov	r2, r3
 800ad80:	4648      	mov	r0, r9
 800ad82:	f000 fcfb 	bl	800b77c <__lshift>
 800ad86:	4604      	mov	r4, r0
 800ad88:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d060      	beq.n	800ae50 <_dtoa_r+0x830>
 800ad8e:	9801      	ldr	r0, [sp, #4]
 800ad90:	4621      	mov	r1, r4
 800ad92:	f000 fd5f 	bl	800b854 <__mcmp>
 800ad96:	2800      	cmp	r0, #0
 800ad98:	da5a      	bge.n	800ae50 <_dtoa_r+0x830>
 800ad9a:	f108 33ff 	add.w	r3, r8, #4294967295
 800ad9e:	9305      	str	r3, [sp, #20]
 800ada0:	9901      	ldr	r1, [sp, #4]
 800ada2:	2300      	movs	r3, #0
 800ada4:	220a      	movs	r2, #10
 800ada6:	4648      	mov	r0, r9
 800ada8:	f000 fafa 	bl	800b3a0 <__multadd>
 800adac:	9b08      	ldr	r3, [sp, #32]
 800adae:	9001      	str	r0, [sp, #4]
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	f000 8177 	beq.w	800b0a4 <_dtoa_r+0xa84>
 800adb6:	4629      	mov	r1, r5
 800adb8:	2300      	movs	r3, #0
 800adba:	220a      	movs	r2, #10
 800adbc:	4648      	mov	r0, r9
 800adbe:	f000 faef 	bl	800b3a0 <__multadd>
 800adc2:	f1bb 0f00 	cmp.w	fp, #0
 800adc6:	4605      	mov	r5, r0
 800adc8:	dc6e      	bgt.n	800aea8 <_dtoa_r+0x888>
 800adca:	9b07      	ldr	r3, [sp, #28]
 800adcc:	2b02      	cmp	r3, #2
 800adce:	dc48      	bgt.n	800ae62 <_dtoa_r+0x842>
 800add0:	e06a      	b.n	800aea8 <_dtoa_r+0x888>
 800add2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800add4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800add8:	e739      	b.n	800ac4e <_dtoa_r+0x62e>
 800adda:	f10a 34ff 	add.w	r4, sl, #4294967295
 800adde:	42a3      	cmp	r3, r4
 800ade0:	db07      	blt.n	800adf2 <_dtoa_r+0x7d2>
 800ade2:	f1ba 0f00 	cmp.w	sl, #0
 800ade6:	eba3 0404 	sub.w	r4, r3, r4
 800adea:	db0b      	blt.n	800ae04 <_dtoa_r+0x7e4>
 800adec:	9e04      	ldr	r6, [sp, #16]
 800adee:	4652      	mov	r2, sl
 800adf0:	e72f      	b.n	800ac52 <_dtoa_r+0x632>
 800adf2:	1ae2      	subs	r2, r4, r3
 800adf4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800adf6:	9e04      	ldr	r6, [sp, #16]
 800adf8:	4413      	add	r3, r2
 800adfa:	930a      	str	r3, [sp, #40]	@ 0x28
 800adfc:	4652      	mov	r2, sl
 800adfe:	4623      	mov	r3, r4
 800ae00:	2400      	movs	r4, #0
 800ae02:	e726      	b.n	800ac52 <_dtoa_r+0x632>
 800ae04:	9a04      	ldr	r2, [sp, #16]
 800ae06:	eba2 060a 	sub.w	r6, r2, sl
 800ae0a:	2200      	movs	r2, #0
 800ae0c:	e721      	b.n	800ac52 <_dtoa_r+0x632>
 800ae0e:	9e04      	ldr	r6, [sp, #16]
 800ae10:	9d08      	ldr	r5, [sp, #32]
 800ae12:	461c      	mov	r4, r3
 800ae14:	e72a      	b.n	800ac6c <_dtoa_r+0x64c>
 800ae16:	9a01      	ldr	r2, [sp, #4]
 800ae18:	9205      	str	r2, [sp, #20]
 800ae1a:	e752      	b.n	800acc2 <_dtoa_r+0x6a2>
 800ae1c:	9901      	ldr	r1, [sp, #4]
 800ae1e:	461a      	mov	r2, r3
 800ae20:	e751      	b.n	800acc6 <_dtoa_r+0x6a6>
 800ae22:	9b05      	ldr	r3, [sp, #20]
 800ae24:	9301      	str	r3, [sp, #4]
 800ae26:	e752      	b.n	800acce <_dtoa_r+0x6ae>
 800ae28:	2300      	movs	r3, #0
 800ae2a:	e77b      	b.n	800ad24 <_dtoa_r+0x704>
 800ae2c:	9b02      	ldr	r3, [sp, #8]
 800ae2e:	e779      	b.n	800ad24 <_dtoa_r+0x704>
 800ae30:	920b      	str	r2, [sp, #44]	@ 0x2c
 800ae32:	e778      	b.n	800ad26 <_dtoa_r+0x706>
 800ae34:	2300      	movs	r3, #0
 800ae36:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ae38:	e779      	b.n	800ad2e <_dtoa_r+0x70e>
 800ae3a:	d093      	beq.n	800ad64 <_dtoa_r+0x744>
 800ae3c:	9b04      	ldr	r3, [sp, #16]
 800ae3e:	321c      	adds	r2, #28
 800ae40:	4413      	add	r3, r2
 800ae42:	9304      	str	r3, [sp, #16]
 800ae44:	9b06      	ldr	r3, [sp, #24]
 800ae46:	4416      	add	r6, r2
 800ae48:	4413      	add	r3, r2
 800ae4a:	e78a      	b.n	800ad62 <_dtoa_r+0x742>
 800ae4c:	4602      	mov	r2, r0
 800ae4e:	e7f5      	b.n	800ae3c <_dtoa_r+0x81c>
 800ae50:	f1ba 0f00 	cmp.w	sl, #0
 800ae54:	f8cd 8014 	str.w	r8, [sp, #20]
 800ae58:	46d3      	mov	fp, sl
 800ae5a:	dc21      	bgt.n	800aea0 <_dtoa_r+0x880>
 800ae5c:	9b07      	ldr	r3, [sp, #28]
 800ae5e:	2b02      	cmp	r3, #2
 800ae60:	dd1e      	ble.n	800aea0 <_dtoa_r+0x880>
 800ae62:	f1bb 0f00 	cmp.w	fp, #0
 800ae66:	f47f addc 	bne.w	800aa22 <_dtoa_r+0x402>
 800ae6a:	4621      	mov	r1, r4
 800ae6c:	465b      	mov	r3, fp
 800ae6e:	2205      	movs	r2, #5
 800ae70:	4648      	mov	r0, r9
 800ae72:	f000 fa95 	bl	800b3a0 <__multadd>
 800ae76:	4601      	mov	r1, r0
 800ae78:	4604      	mov	r4, r0
 800ae7a:	9801      	ldr	r0, [sp, #4]
 800ae7c:	f000 fcea 	bl	800b854 <__mcmp>
 800ae80:	2800      	cmp	r0, #0
 800ae82:	f77f adce 	ble.w	800aa22 <_dtoa_r+0x402>
 800ae86:	463e      	mov	r6, r7
 800ae88:	2331      	movs	r3, #49	@ 0x31
 800ae8a:	f806 3b01 	strb.w	r3, [r6], #1
 800ae8e:	9b05      	ldr	r3, [sp, #20]
 800ae90:	3301      	adds	r3, #1
 800ae92:	9305      	str	r3, [sp, #20]
 800ae94:	e5c9      	b.n	800aa2a <_dtoa_r+0x40a>
 800ae96:	f8cd 8014 	str.w	r8, [sp, #20]
 800ae9a:	4654      	mov	r4, sl
 800ae9c:	4625      	mov	r5, r4
 800ae9e:	e7f2      	b.n	800ae86 <_dtoa_r+0x866>
 800aea0:	9b08      	ldr	r3, [sp, #32]
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	f000 8102 	beq.w	800b0ac <_dtoa_r+0xa8c>
 800aea8:	2e00      	cmp	r6, #0
 800aeaa:	dd05      	ble.n	800aeb8 <_dtoa_r+0x898>
 800aeac:	4629      	mov	r1, r5
 800aeae:	4632      	mov	r2, r6
 800aeb0:	4648      	mov	r0, r9
 800aeb2:	f000 fc63 	bl	800b77c <__lshift>
 800aeb6:	4605      	mov	r5, r0
 800aeb8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d058      	beq.n	800af70 <_dtoa_r+0x950>
 800aebe:	6869      	ldr	r1, [r5, #4]
 800aec0:	4648      	mov	r0, r9
 800aec2:	f000 fa0b 	bl	800b2dc <_Balloc>
 800aec6:	4606      	mov	r6, r0
 800aec8:	b928      	cbnz	r0, 800aed6 <_dtoa_r+0x8b6>
 800aeca:	4b82      	ldr	r3, [pc, #520]	@ (800b0d4 <_dtoa_r+0xab4>)
 800aecc:	4602      	mov	r2, r0
 800aece:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800aed2:	f7ff bbbe 	b.w	800a652 <_dtoa_r+0x32>
 800aed6:	692a      	ldr	r2, [r5, #16]
 800aed8:	3202      	adds	r2, #2
 800aeda:	0092      	lsls	r2, r2, #2
 800aedc:	f105 010c 	add.w	r1, r5, #12
 800aee0:	300c      	adds	r0, #12
 800aee2:	f7ff fb00 	bl	800a4e6 <memcpy>
 800aee6:	2201      	movs	r2, #1
 800aee8:	4631      	mov	r1, r6
 800aeea:	4648      	mov	r0, r9
 800aeec:	f000 fc46 	bl	800b77c <__lshift>
 800aef0:	1c7b      	adds	r3, r7, #1
 800aef2:	9304      	str	r3, [sp, #16]
 800aef4:	eb07 030b 	add.w	r3, r7, fp
 800aef8:	9309      	str	r3, [sp, #36]	@ 0x24
 800aefa:	9b02      	ldr	r3, [sp, #8]
 800aefc:	f003 0301 	and.w	r3, r3, #1
 800af00:	46a8      	mov	r8, r5
 800af02:	9308      	str	r3, [sp, #32]
 800af04:	4605      	mov	r5, r0
 800af06:	9b04      	ldr	r3, [sp, #16]
 800af08:	9801      	ldr	r0, [sp, #4]
 800af0a:	4621      	mov	r1, r4
 800af0c:	f103 3bff 	add.w	fp, r3, #4294967295
 800af10:	f7ff fafe 	bl	800a510 <quorem>
 800af14:	4641      	mov	r1, r8
 800af16:	9002      	str	r0, [sp, #8]
 800af18:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800af1c:	9801      	ldr	r0, [sp, #4]
 800af1e:	f000 fc99 	bl	800b854 <__mcmp>
 800af22:	462a      	mov	r2, r5
 800af24:	9006      	str	r0, [sp, #24]
 800af26:	4621      	mov	r1, r4
 800af28:	4648      	mov	r0, r9
 800af2a:	f000 fcaf 	bl	800b88c <__mdiff>
 800af2e:	68c2      	ldr	r2, [r0, #12]
 800af30:	4606      	mov	r6, r0
 800af32:	b9fa      	cbnz	r2, 800af74 <_dtoa_r+0x954>
 800af34:	4601      	mov	r1, r0
 800af36:	9801      	ldr	r0, [sp, #4]
 800af38:	f000 fc8c 	bl	800b854 <__mcmp>
 800af3c:	4602      	mov	r2, r0
 800af3e:	4631      	mov	r1, r6
 800af40:	4648      	mov	r0, r9
 800af42:	920a      	str	r2, [sp, #40]	@ 0x28
 800af44:	f000 fa0a 	bl	800b35c <_Bfree>
 800af48:	9b07      	ldr	r3, [sp, #28]
 800af4a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800af4c:	9e04      	ldr	r6, [sp, #16]
 800af4e:	ea42 0103 	orr.w	r1, r2, r3
 800af52:	9b08      	ldr	r3, [sp, #32]
 800af54:	4319      	orrs	r1, r3
 800af56:	d10f      	bne.n	800af78 <_dtoa_r+0x958>
 800af58:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800af5c:	d028      	beq.n	800afb0 <_dtoa_r+0x990>
 800af5e:	9b06      	ldr	r3, [sp, #24]
 800af60:	2b00      	cmp	r3, #0
 800af62:	dd02      	ble.n	800af6a <_dtoa_r+0x94a>
 800af64:	9b02      	ldr	r3, [sp, #8]
 800af66:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800af6a:	f88b a000 	strb.w	sl, [fp]
 800af6e:	e55e      	b.n	800aa2e <_dtoa_r+0x40e>
 800af70:	4628      	mov	r0, r5
 800af72:	e7bd      	b.n	800aef0 <_dtoa_r+0x8d0>
 800af74:	2201      	movs	r2, #1
 800af76:	e7e2      	b.n	800af3e <_dtoa_r+0x91e>
 800af78:	9b06      	ldr	r3, [sp, #24]
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	db04      	blt.n	800af88 <_dtoa_r+0x968>
 800af7e:	9907      	ldr	r1, [sp, #28]
 800af80:	430b      	orrs	r3, r1
 800af82:	9908      	ldr	r1, [sp, #32]
 800af84:	430b      	orrs	r3, r1
 800af86:	d120      	bne.n	800afca <_dtoa_r+0x9aa>
 800af88:	2a00      	cmp	r2, #0
 800af8a:	ddee      	ble.n	800af6a <_dtoa_r+0x94a>
 800af8c:	9901      	ldr	r1, [sp, #4]
 800af8e:	2201      	movs	r2, #1
 800af90:	4648      	mov	r0, r9
 800af92:	f000 fbf3 	bl	800b77c <__lshift>
 800af96:	4621      	mov	r1, r4
 800af98:	9001      	str	r0, [sp, #4]
 800af9a:	f000 fc5b 	bl	800b854 <__mcmp>
 800af9e:	2800      	cmp	r0, #0
 800afa0:	dc03      	bgt.n	800afaa <_dtoa_r+0x98a>
 800afa2:	d1e2      	bne.n	800af6a <_dtoa_r+0x94a>
 800afa4:	f01a 0f01 	tst.w	sl, #1
 800afa8:	d0df      	beq.n	800af6a <_dtoa_r+0x94a>
 800afaa:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800afae:	d1d9      	bne.n	800af64 <_dtoa_r+0x944>
 800afb0:	2339      	movs	r3, #57	@ 0x39
 800afb2:	f88b 3000 	strb.w	r3, [fp]
 800afb6:	4633      	mov	r3, r6
 800afb8:	461e      	mov	r6, r3
 800afba:	3b01      	subs	r3, #1
 800afbc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800afc0:	2a39      	cmp	r2, #57	@ 0x39
 800afc2:	d052      	beq.n	800b06a <_dtoa_r+0xa4a>
 800afc4:	3201      	adds	r2, #1
 800afc6:	701a      	strb	r2, [r3, #0]
 800afc8:	e531      	b.n	800aa2e <_dtoa_r+0x40e>
 800afca:	2a00      	cmp	r2, #0
 800afcc:	dd07      	ble.n	800afde <_dtoa_r+0x9be>
 800afce:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800afd2:	d0ed      	beq.n	800afb0 <_dtoa_r+0x990>
 800afd4:	f10a 0301 	add.w	r3, sl, #1
 800afd8:	f88b 3000 	strb.w	r3, [fp]
 800afdc:	e527      	b.n	800aa2e <_dtoa_r+0x40e>
 800afde:	9b04      	ldr	r3, [sp, #16]
 800afe0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800afe2:	f803 ac01 	strb.w	sl, [r3, #-1]
 800afe6:	4293      	cmp	r3, r2
 800afe8:	d029      	beq.n	800b03e <_dtoa_r+0xa1e>
 800afea:	9901      	ldr	r1, [sp, #4]
 800afec:	2300      	movs	r3, #0
 800afee:	220a      	movs	r2, #10
 800aff0:	4648      	mov	r0, r9
 800aff2:	f000 f9d5 	bl	800b3a0 <__multadd>
 800aff6:	45a8      	cmp	r8, r5
 800aff8:	9001      	str	r0, [sp, #4]
 800affa:	f04f 0300 	mov.w	r3, #0
 800affe:	f04f 020a 	mov.w	r2, #10
 800b002:	4641      	mov	r1, r8
 800b004:	4648      	mov	r0, r9
 800b006:	d107      	bne.n	800b018 <_dtoa_r+0x9f8>
 800b008:	f000 f9ca 	bl	800b3a0 <__multadd>
 800b00c:	4680      	mov	r8, r0
 800b00e:	4605      	mov	r5, r0
 800b010:	9b04      	ldr	r3, [sp, #16]
 800b012:	3301      	adds	r3, #1
 800b014:	9304      	str	r3, [sp, #16]
 800b016:	e776      	b.n	800af06 <_dtoa_r+0x8e6>
 800b018:	f000 f9c2 	bl	800b3a0 <__multadd>
 800b01c:	4629      	mov	r1, r5
 800b01e:	4680      	mov	r8, r0
 800b020:	2300      	movs	r3, #0
 800b022:	220a      	movs	r2, #10
 800b024:	4648      	mov	r0, r9
 800b026:	f000 f9bb 	bl	800b3a0 <__multadd>
 800b02a:	4605      	mov	r5, r0
 800b02c:	e7f0      	b.n	800b010 <_dtoa_r+0x9f0>
 800b02e:	f1bb 0f00 	cmp.w	fp, #0
 800b032:	bfcc      	ite	gt
 800b034:	465e      	movgt	r6, fp
 800b036:	2601      	movle	r6, #1
 800b038:	443e      	add	r6, r7
 800b03a:	f04f 0800 	mov.w	r8, #0
 800b03e:	9901      	ldr	r1, [sp, #4]
 800b040:	2201      	movs	r2, #1
 800b042:	4648      	mov	r0, r9
 800b044:	f000 fb9a 	bl	800b77c <__lshift>
 800b048:	4621      	mov	r1, r4
 800b04a:	9001      	str	r0, [sp, #4]
 800b04c:	f000 fc02 	bl	800b854 <__mcmp>
 800b050:	2800      	cmp	r0, #0
 800b052:	dcb0      	bgt.n	800afb6 <_dtoa_r+0x996>
 800b054:	d102      	bne.n	800b05c <_dtoa_r+0xa3c>
 800b056:	f01a 0f01 	tst.w	sl, #1
 800b05a:	d1ac      	bne.n	800afb6 <_dtoa_r+0x996>
 800b05c:	4633      	mov	r3, r6
 800b05e:	461e      	mov	r6, r3
 800b060:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b064:	2a30      	cmp	r2, #48	@ 0x30
 800b066:	d0fa      	beq.n	800b05e <_dtoa_r+0xa3e>
 800b068:	e4e1      	b.n	800aa2e <_dtoa_r+0x40e>
 800b06a:	429f      	cmp	r7, r3
 800b06c:	d1a4      	bne.n	800afb8 <_dtoa_r+0x998>
 800b06e:	9b05      	ldr	r3, [sp, #20]
 800b070:	3301      	adds	r3, #1
 800b072:	9305      	str	r3, [sp, #20]
 800b074:	2331      	movs	r3, #49	@ 0x31
 800b076:	703b      	strb	r3, [r7, #0]
 800b078:	e4d9      	b.n	800aa2e <_dtoa_r+0x40e>
 800b07a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b07c:	4f16      	ldr	r7, [pc, #88]	@ (800b0d8 <_dtoa_r+0xab8>)
 800b07e:	b11b      	cbz	r3, 800b088 <_dtoa_r+0xa68>
 800b080:	f107 0308 	add.w	r3, r7, #8
 800b084:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800b086:	6013      	str	r3, [r2, #0]
 800b088:	4638      	mov	r0, r7
 800b08a:	b011      	add	sp, #68	@ 0x44
 800b08c:	ecbd 8b02 	vpop	{d8}
 800b090:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b094:	9b07      	ldr	r3, [sp, #28]
 800b096:	2b01      	cmp	r3, #1
 800b098:	f77f ae2c 	ble.w	800acf4 <_dtoa_r+0x6d4>
 800b09c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b09e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b0a0:	2001      	movs	r0, #1
 800b0a2:	e64c      	b.n	800ad3e <_dtoa_r+0x71e>
 800b0a4:	f1bb 0f00 	cmp.w	fp, #0
 800b0a8:	f77f aed8 	ble.w	800ae5c <_dtoa_r+0x83c>
 800b0ac:	463e      	mov	r6, r7
 800b0ae:	9801      	ldr	r0, [sp, #4]
 800b0b0:	4621      	mov	r1, r4
 800b0b2:	f7ff fa2d 	bl	800a510 <quorem>
 800b0b6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800b0ba:	f806 ab01 	strb.w	sl, [r6], #1
 800b0be:	1bf2      	subs	r2, r6, r7
 800b0c0:	4593      	cmp	fp, r2
 800b0c2:	ddb4      	ble.n	800b02e <_dtoa_r+0xa0e>
 800b0c4:	9901      	ldr	r1, [sp, #4]
 800b0c6:	2300      	movs	r3, #0
 800b0c8:	220a      	movs	r2, #10
 800b0ca:	4648      	mov	r0, r9
 800b0cc:	f000 f968 	bl	800b3a0 <__multadd>
 800b0d0:	9001      	str	r0, [sp, #4]
 800b0d2:	e7ec      	b.n	800b0ae <_dtoa_r+0xa8e>
 800b0d4:	0800dca1 	.word	0x0800dca1
 800b0d8:	0800dc25 	.word	0x0800dc25

0800b0dc <_free_r>:
 800b0dc:	b538      	push	{r3, r4, r5, lr}
 800b0de:	4605      	mov	r5, r0
 800b0e0:	2900      	cmp	r1, #0
 800b0e2:	d041      	beq.n	800b168 <_free_r+0x8c>
 800b0e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b0e8:	1f0c      	subs	r4, r1, #4
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	bfb8      	it	lt
 800b0ee:	18e4      	addlt	r4, r4, r3
 800b0f0:	f000 f8e8 	bl	800b2c4 <__malloc_lock>
 800b0f4:	4a1d      	ldr	r2, [pc, #116]	@ (800b16c <_free_r+0x90>)
 800b0f6:	6813      	ldr	r3, [r2, #0]
 800b0f8:	b933      	cbnz	r3, 800b108 <_free_r+0x2c>
 800b0fa:	6063      	str	r3, [r4, #4]
 800b0fc:	6014      	str	r4, [r2, #0]
 800b0fe:	4628      	mov	r0, r5
 800b100:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b104:	f000 b8e4 	b.w	800b2d0 <__malloc_unlock>
 800b108:	42a3      	cmp	r3, r4
 800b10a:	d908      	bls.n	800b11e <_free_r+0x42>
 800b10c:	6820      	ldr	r0, [r4, #0]
 800b10e:	1821      	adds	r1, r4, r0
 800b110:	428b      	cmp	r3, r1
 800b112:	bf01      	itttt	eq
 800b114:	6819      	ldreq	r1, [r3, #0]
 800b116:	685b      	ldreq	r3, [r3, #4]
 800b118:	1809      	addeq	r1, r1, r0
 800b11a:	6021      	streq	r1, [r4, #0]
 800b11c:	e7ed      	b.n	800b0fa <_free_r+0x1e>
 800b11e:	461a      	mov	r2, r3
 800b120:	685b      	ldr	r3, [r3, #4]
 800b122:	b10b      	cbz	r3, 800b128 <_free_r+0x4c>
 800b124:	42a3      	cmp	r3, r4
 800b126:	d9fa      	bls.n	800b11e <_free_r+0x42>
 800b128:	6811      	ldr	r1, [r2, #0]
 800b12a:	1850      	adds	r0, r2, r1
 800b12c:	42a0      	cmp	r0, r4
 800b12e:	d10b      	bne.n	800b148 <_free_r+0x6c>
 800b130:	6820      	ldr	r0, [r4, #0]
 800b132:	4401      	add	r1, r0
 800b134:	1850      	adds	r0, r2, r1
 800b136:	4283      	cmp	r3, r0
 800b138:	6011      	str	r1, [r2, #0]
 800b13a:	d1e0      	bne.n	800b0fe <_free_r+0x22>
 800b13c:	6818      	ldr	r0, [r3, #0]
 800b13e:	685b      	ldr	r3, [r3, #4]
 800b140:	6053      	str	r3, [r2, #4]
 800b142:	4408      	add	r0, r1
 800b144:	6010      	str	r0, [r2, #0]
 800b146:	e7da      	b.n	800b0fe <_free_r+0x22>
 800b148:	d902      	bls.n	800b150 <_free_r+0x74>
 800b14a:	230c      	movs	r3, #12
 800b14c:	602b      	str	r3, [r5, #0]
 800b14e:	e7d6      	b.n	800b0fe <_free_r+0x22>
 800b150:	6820      	ldr	r0, [r4, #0]
 800b152:	1821      	adds	r1, r4, r0
 800b154:	428b      	cmp	r3, r1
 800b156:	bf04      	itt	eq
 800b158:	6819      	ldreq	r1, [r3, #0]
 800b15a:	685b      	ldreq	r3, [r3, #4]
 800b15c:	6063      	str	r3, [r4, #4]
 800b15e:	bf04      	itt	eq
 800b160:	1809      	addeq	r1, r1, r0
 800b162:	6021      	streq	r1, [r4, #0]
 800b164:	6054      	str	r4, [r2, #4]
 800b166:	e7ca      	b.n	800b0fe <_free_r+0x22>
 800b168:	bd38      	pop	{r3, r4, r5, pc}
 800b16a:	bf00      	nop
 800b16c:	20005564 	.word	0x20005564

0800b170 <malloc>:
 800b170:	4b02      	ldr	r3, [pc, #8]	@ (800b17c <malloc+0xc>)
 800b172:	4601      	mov	r1, r0
 800b174:	6818      	ldr	r0, [r3, #0]
 800b176:	f000 b825 	b.w	800b1c4 <_malloc_r>
 800b17a:	bf00      	nop
 800b17c:	2000001c 	.word	0x2000001c

0800b180 <sbrk_aligned>:
 800b180:	b570      	push	{r4, r5, r6, lr}
 800b182:	4e0f      	ldr	r6, [pc, #60]	@ (800b1c0 <sbrk_aligned+0x40>)
 800b184:	460c      	mov	r4, r1
 800b186:	6831      	ldr	r1, [r6, #0]
 800b188:	4605      	mov	r5, r0
 800b18a:	b911      	cbnz	r1, 800b192 <sbrk_aligned+0x12>
 800b18c:	f001 fdb4 	bl	800ccf8 <_sbrk_r>
 800b190:	6030      	str	r0, [r6, #0]
 800b192:	4621      	mov	r1, r4
 800b194:	4628      	mov	r0, r5
 800b196:	f001 fdaf 	bl	800ccf8 <_sbrk_r>
 800b19a:	1c43      	adds	r3, r0, #1
 800b19c:	d103      	bne.n	800b1a6 <sbrk_aligned+0x26>
 800b19e:	f04f 34ff 	mov.w	r4, #4294967295
 800b1a2:	4620      	mov	r0, r4
 800b1a4:	bd70      	pop	{r4, r5, r6, pc}
 800b1a6:	1cc4      	adds	r4, r0, #3
 800b1a8:	f024 0403 	bic.w	r4, r4, #3
 800b1ac:	42a0      	cmp	r0, r4
 800b1ae:	d0f8      	beq.n	800b1a2 <sbrk_aligned+0x22>
 800b1b0:	1a21      	subs	r1, r4, r0
 800b1b2:	4628      	mov	r0, r5
 800b1b4:	f001 fda0 	bl	800ccf8 <_sbrk_r>
 800b1b8:	3001      	adds	r0, #1
 800b1ba:	d1f2      	bne.n	800b1a2 <sbrk_aligned+0x22>
 800b1bc:	e7ef      	b.n	800b19e <sbrk_aligned+0x1e>
 800b1be:	bf00      	nop
 800b1c0:	20005560 	.word	0x20005560

0800b1c4 <_malloc_r>:
 800b1c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b1c8:	1ccd      	adds	r5, r1, #3
 800b1ca:	f025 0503 	bic.w	r5, r5, #3
 800b1ce:	3508      	adds	r5, #8
 800b1d0:	2d0c      	cmp	r5, #12
 800b1d2:	bf38      	it	cc
 800b1d4:	250c      	movcc	r5, #12
 800b1d6:	2d00      	cmp	r5, #0
 800b1d8:	4606      	mov	r6, r0
 800b1da:	db01      	blt.n	800b1e0 <_malloc_r+0x1c>
 800b1dc:	42a9      	cmp	r1, r5
 800b1de:	d904      	bls.n	800b1ea <_malloc_r+0x26>
 800b1e0:	230c      	movs	r3, #12
 800b1e2:	6033      	str	r3, [r6, #0]
 800b1e4:	2000      	movs	r0, #0
 800b1e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b1ea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b2c0 <_malloc_r+0xfc>
 800b1ee:	f000 f869 	bl	800b2c4 <__malloc_lock>
 800b1f2:	f8d8 3000 	ldr.w	r3, [r8]
 800b1f6:	461c      	mov	r4, r3
 800b1f8:	bb44      	cbnz	r4, 800b24c <_malloc_r+0x88>
 800b1fa:	4629      	mov	r1, r5
 800b1fc:	4630      	mov	r0, r6
 800b1fe:	f7ff ffbf 	bl	800b180 <sbrk_aligned>
 800b202:	1c43      	adds	r3, r0, #1
 800b204:	4604      	mov	r4, r0
 800b206:	d158      	bne.n	800b2ba <_malloc_r+0xf6>
 800b208:	f8d8 4000 	ldr.w	r4, [r8]
 800b20c:	4627      	mov	r7, r4
 800b20e:	2f00      	cmp	r7, #0
 800b210:	d143      	bne.n	800b29a <_malloc_r+0xd6>
 800b212:	2c00      	cmp	r4, #0
 800b214:	d04b      	beq.n	800b2ae <_malloc_r+0xea>
 800b216:	6823      	ldr	r3, [r4, #0]
 800b218:	4639      	mov	r1, r7
 800b21a:	4630      	mov	r0, r6
 800b21c:	eb04 0903 	add.w	r9, r4, r3
 800b220:	f001 fd6a 	bl	800ccf8 <_sbrk_r>
 800b224:	4581      	cmp	r9, r0
 800b226:	d142      	bne.n	800b2ae <_malloc_r+0xea>
 800b228:	6821      	ldr	r1, [r4, #0]
 800b22a:	1a6d      	subs	r5, r5, r1
 800b22c:	4629      	mov	r1, r5
 800b22e:	4630      	mov	r0, r6
 800b230:	f7ff ffa6 	bl	800b180 <sbrk_aligned>
 800b234:	3001      	adds	r0, #1
 800b236:	d03a      	beq.n	800b2ae <_malloc_r+0xea>
 800b238:	6823      	ldr	r3, [r4, #0]
 800b23a:	442b      	add	r3, r5
 800b23c:	6023      	str	r3, [r4, #0]
 800b23e:	f8d8 3000 	ldr.w	r3, [r8]
 800b242:	685a      	ldr	r2, [r3, #4]
 800b244:	bb62      	cbnz	r2, 800b2a0 <_malloc_r+0xdc>
 800b246:	f8c8 7000 	str.w	r7, [r8]
 800b24a:	e00f      	b.n	800b26c <_malloc_r+0xa8>
 800b24c:	6822      	ldr	r2, [r4, #0]
 800b24e:	1b52      	subs	r2, r2, r5
 800b250:	d420      	bmi.n	800b294 <_malloc_r+0xd0>
 800b252:	2a0b      	cmp	r2, #11
 800b254:	d917      	bls.n	800b286 <_malloc_r+0xc2>
 800b256:	1961      	adds	r1, r4, r5
 800b258:	42a3      	cmp	r3, r4
 800b25a:	6025      	str	r5, [r4, #0]
 800b25c:	bf18      	it	ne
 800b25e:	6059      	strne	r1, [r3, #4]
 800b260:	6863      	ldr	r3, [r4, #4]
 800b262:	bf08      	it	eq
 800b264:	f8c8 1000 	streq.w	r1, [r8]
 800b268:	5162      	str	r2, [r4, r5]
 800b26a:	604b      	str	r3, [r1, #4]
 800b26c:	4630      	mov	r0, r6
 800b26e:	f000 f82f 	bl	800b2d0 <__malloc_unlock>
 800b272:	f104 000b 	add.w	r0, r4, #11
 800b276:	1d23      	adds	r3, r4, #4
 800b278:	f020 0007 	bic.w	r0, r0, #7
 800b27c:	1ac2      	subs	r2, r0, r3
 800b27e:	bf1c      	itt	ne
 800b280:	1a1b      	subne	r3, r3, r0
 800b282:	50a3      	strne	r3, [r4, r2]
 800b284:	e7af      	b.n	800b1e6 <_malloc_r+0x22>
 800b286:	6862      	ldr	r2, [r4, #4]
 800b288:	42a3      	cmp	r3, r4
 800b28a:	bf0c      	ite	eq
 800b28c:	f8c8 2000 	streq.w	r2, [r8]
 800b290:	605a      	strne	r2, [r3, #4]
 800b292:	e7eb      	b.n	800b26c <_malloc_r+0xa8>
 800b294:	4623      	mov	r3, r4
 800b296:	6864      	ldr	r4, [r4, #4]
 800b298:	e7ae      	b.n	800b1f8 <_malloc_r+0x34>
 800b29a:	463c      	mov	r4, r7
 800b29c:	687f      	ldr	r7, [r7, #4]
 800b29e:	e7b6      	b.n	800b20e <_malloc_r+0x4a>
 800b2a0:	461a      	mov	r2, r3
 800b2a2:	685b      	ldr	r3, [r3, #4]
 800b2a4:	42a3      	cmp	r3, r4
 800b2a6:	d1fb      	bne.n	800b2a0 <_malloc_r+0xdc>
 800b2a8:	2300      	movs	r3, #0
 800b2aa:	6053      	str	r3, [r2, #4]
 800b2ac:	e7de      	b.n	800b26c <_malloc_r+0xa8>
 800b2ae:	230c      	movs	r3, #12
 800b2b0:	6033      	str	r3, [r6, #0]
 800b2b2:	4630      	mov	r0, r6
 800b2b4:	f000 f80c 	bl	800b2d0 <__malloc_unlock>
 800b2b8:	e794      	b.n	800b1e4 <_malloc_r+0x20>
 800b2ba:	6005      	str	r5, [r0, #0]
 800b2bc:	e7d6      	b.n	800b26c <_malloc_r+0xa8>
 800b2be:	bf00      	nop
 800b2c0:	20005564 	.word	0x20005564

0800b2c4 <__malloc_lock>:
 800b2c4:	4801      	ldr	r0, [pc, #4]	@ (800b2cc <__malloc_lock+0x8>)
 800b2c6:	f7ff b90c 	b.w	800a4e2 <__retarget_lock_acquire_recursive>
 800b2ca:	bf00      	nop
 800b2cc:	2000555c 	.word	0x2000555c

0800b2d0 <__malloc_unlock>:
 800b2d0:	4801      	ldr	r0, [pc, #4]	@ (800b2d8 <__malloc_unlock+0x8>)
 800b2d2:	f7ff b907 	b.w	800a4e4 <__retarget_lock_release_recursive>
 800b2d6:	bf00      	nop
 800b2d8:	2000555c 	.word	0x2000555c

0800b2dc <_Balloc>:
 800b2dc:	b570      	push	{r4, r5, r6, lr}
 800b2de:	69c6      	ldr	r6, [r0, #28]
 800b2e0:	4604      	mov	r4, r0
 800b2e2:	460d      	mov	r5, r1
 800b2e4:	b976      	cbnz	r6, 800b304 <_Balloc+0x28>
 800b2e6:	2010      	movs	r0, #16
 800b2e8:	f7ff ff42 	bl	800b170 <malloc>
 800b2ec:	4602      	mov	r2, r0
 800b2ee:	61e0      	str	r0, [r4, #28]
 800b2f0:	b920      	cbnz	r0, 800b2fc <_Balloc+0x20>
 800b2f2:	4b18      	ldr	r3, [pc, #96]	@ (800b354 <_Balloc+0x78>)
 800b2f4:	4818      	ldr	r0, [pc, #96]	@ (800b358 <_Balloc+0x7c>)
 800b2f6:	216b      	movs	r1, #107	@ 0x6b
 800b2f8:	f001 fd16 	bl	800cd28 <__assert_func>
 800b2fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b300:	6006      	str	r6, [r0, #0]
 800b302:	60c6      	str	r6, [r0, #12]
 800b304:	69e6      	ldr	r6, [r4, #28]
 800b306:	68f3      	ldr	r3, [r6, #12]
 800b308:	b183      	cbz	r3, 800b32c <_Balloc+0x50>
 800b30a:	69e3      	ldr	r3, [r4, #28]
 800b30c:	68db      	ldr	r3, [r3, #12]
 800b30e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b312:	b9b8      	cbnz	r0, 800b344 <_Balloc+0x68>
 800b314:	2101      	movs	r1, #1
 800b316:	fa01 f605 	lsl.w	r6, r1, r5
 800b31a:	1d72      	adds	r2, r6, #5
 800b31c:	0092      	lsls	r2, r2, #2
 800b31e:	4620      	mov	r0, r4
 800b320:	f001 fd20 	bl	800cd64 <_calloc_r>
 800b324:	b160      	cbz	r0, 800b340 <_Balloc+0x64>
 800b326:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b32a:	e00e      	b.n	800b34a <_Balloc+0x6e>
 800b32c:	2221      	movs	r2, #33	@ 0x21
 800b32e:	2104      	movs	r1, #4
 800b330:	4620      	mov	r0, r4
 800b332:	f001 fd17 	bl	800cd64 <_calloc_r>
 800b336:	69e3      	ldr	r3, [r4, #28]
 800b338:	60f0      	str	r0, [r6, #12]
 800b33a:	68db      	ldr	r3, [r3, #12]
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d1e4      	bne.n	800b30a <_Balloc+0x2e>
 800b340:	2000      	movs	r0, #0
 800b342:	bd70      	pop	{r4, r5, r6, pc}
 800b344:	6802      	ldr	r2, [r0, #0]
 800b346:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b34a:	2300      	movs	r3, #0
 800b34c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b350:	e7f7      	b.n	800b342 <_Balloc+0x66>
 800b352:	bf00      	nop
 800b354:	0800dc32 	.word	0x0800dc32
 800b358:	0800dcb2 	.word	0x0800dcb2

0800b35c <_Bfree>:
 800b35c:	b570      	push	{r4, r5, r6, lr}
 800b35e:	69c6      	ldr	r6, [r0, #28]
 800b360:	4605      	mov	r5, r0
 800b362:	460c      	mov	r4, r1
 800b364:	b976      	cbnz	r6, 800b384 <_Bfree+0x28>
 800b366:	2010      	movs	r0, #16
 800b368:	f7ff ff02 	bl	800b170 <malloc>
 800b36c:	4602      	mov	r2, r0
 800b36e:	61e8      	str	r0, [r5, #28]
 800b370:	b920      	cbnz	r0, 800b37c <_Bfree+0x20>
 800b372:	4b09      	ldr	r3, [pc, #36]	@ (800b398 <_Bfree+0x3c>)
 800b374:	4809      	ldr	r0, [pc, #36]	@ (800b39c <_Bfree+0x40>)
 800b376:	218f      	movs	r1, #143	@ 0x8f
 800b378:	f001 fcd6 	bl	800cd28 <__assert_func>
 800b37c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b380:	6006      	str	r6, [r0, #0]
 800b382:	60c6      	str	r6, [r0, #12]
 800b384:	b13c      	cbz	r4, 800b396 <_Bfree+0x3a>
 800b386:	69eb      	ldr	r3, [r5, #28]
 800b388:	6862      	ldr	r2, [r4, #4]
 800b38a:	68db      	ldr	r3, [r3, #12]
 800b38c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b390:	6021      	str	r1, [r4, #0]
 800b392:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b396:	bd70      	pop	{r4, r5, r6, pc}
 800b398:	0800dc32 	.word	0x0800dc32
 800b39c:	0800dcb2 	.word	0x0800dcb2

0800b3a0 <__multadd>:
 800b3a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3a4:	690d      	ldr	r5, [r1, #16]
 800b3a6:	4607      	mov	r7, r0
 800b3a8:	460c      	mov	r4, r1
 800b3aa:	461e      	mov	r6, r3
 800b3ac:	f101 0c14 	add.w	ip, r1, #20
 800b3b0:	2000      	movs	r0, #0
 800b3b2:	f8dc 3000 	ldr.w	r3, [ip]
 800b3b6:	b299      	uxth	r1, r3
 800b3b8:	fb02 6101 	mla	r1, r2, r1, r6
 800b3bc:	0c1e      	lsrs	r6, r3, #16
 800b3be:	0c0b      	lsrs	r3, r1, #16
 800b3c0:	fb02 3306 	mla	r3, r2, r6, r3
 800b3c4:	b289      	uxth	r1, r1
 800b3c6:	3001      	adds	r0, #1
 800b3c8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b3cc:	4285      	cmp	r5, r0
 800b3ce:	f84c 1b04 	str.w	r1, [ip], #4
 800b3d2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b3d6:	dcec      	bgt.n	800b3b2 <__multadd+0x12>
 800b3d8:	b30e      	cbz	r6, 800b41e <__multadd+0x7e>
 800b3da:	68a3      	ldr	r3, [r4, #8]
 800b3dc:	42ab      	cmp	r3, r5
 800b3de:	dc19      	bgt.n	800b414 <__multadd+0x74>
 800b3e0:	6861      	ldr	r1, [r4, #4]
 800b3e2:	4638      	mov	r0, r7
 800b3e4:	3101      	adds	r1, #1
 800b3e6:	f7ff ff79 	bl	800b2dc <_Balloc>
 800b3ea:	4680      	mov	r8, r0
 800b3ec:	b928      	cbnz	r0, 800b3fa <__multadd+0x5a>
 800b3ee:	4602      	mov	r2, r0
 800b3f0:	4b0c      	ldr	r3, [pc, #48]	@ (800b424 <__multadd+0x84>)
 800b3f2:	480d      	ldr	r0, [pc, #52]	@ (800b428 <__multadd+0x88>)
 800b3f4:	21ba      	movs	r1, #186	@ 0xba
 800b3f6:	f001 fc97 	bl	800cd28 <__assert_func>
 800b3fa:	6922      	ldr	r2, [r4, #16]
 800b3fc:	3202      	adds	r2, #2
 800b3fe:	f104 010c 	add.w	r1, r4, #12
 800b402:	0092      	lsls	r2, r2, #2
 800b404:	300c      	adds	r0, #12
 800b406:	f7ff f86e 	bl	800a4e6 <memcpy>
 800b40a:	4621      	mov	r1, r4
 800b40c:	4638      	mov	r0, r7
 800b40e:	f7ff ffa5 	bl	800b35c <_Bfree>
 800b412:	4644      	mov	r4, r8
 800b414:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b418:	3501      	adds	r5, #1
 800b41a:	615e      	str	r6, [r3, #20]
 800b41c:	6125      	str	r5, [r4, #16]
 800b41e:	4620      	mov	r0, r4
 800b420:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b424:	0800dca1 	.word	0x0800dca1
 800b428:	0800dcb2 	.word	0x0800dcb2

0800b42c <__s2b>:
 800b42c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b430:	460c      	mov	r4, r1
 800b432:	4615      	mov	r5, r2
 800b434:	461f      	mov	r7, r3
 800b436:	2209      	movs	r2, #9
 800b438:	3308      	adds	r3, #8
 800b43a:	4606      	mov	r6, r0
 800b43c:	fb93 f3f2 	sdiv	r3, r3, r2
 800b440:	2100      	movs	r1, #0
 800b442:	2201      	movs	r2, #1
 800b444:	429a      	cmp	r2, r3
 800b446:	db09      	blt.n	800b45c <__s2b+0x30>
 800b448:	4630      	mov	r0, r6
 800b44a:	f7ff ff47 	bl	800b2dc <_Balloc>
 800b44e:	b940      	cbnz	r0, 800b462 <__s2b+0x36>
 800b450:	4602      	mov	r2, r0
 800b452:	4b19      	ldr	r3, [pc, #100]	@ (800b4b8 <__s2b+0x8c>)
 800b454:	4819      	ldr	r0, [pc, #100]	@ (800b4bc <__s2b+0x90>)
 800b456:	21d3      	movs	r1, #211	@ 0xd3
 800b458:	f001 fc66 	bl	800cd28 <__assert_func>
 800b45c:	0052      	lsls	r2, r2, #1
 800b45e:	3101      	adds	r1, #1
 800b460:	e7f0      	b.n	800b444 <__s2b+0x18>
 800b462:	9b08      	ldr	r3, [sp, #32]
 800b464:	6143      	str	r3, [r0, #20]
 800b466:	2d09      	cmp	r5, #9
 800b468:	f04f 0301 	mov.w	r3, #1
 800b46c:	6103      	str	r3, [r0, #16]
 800b46e:	dd16      	ble.n	800b49e <__s2b+0x72>
 800b470:	f104 0909 	add.w	r9, r4, #9
 800b474:	46c8      	mov	r8, r9
 800b476:	442c      	add	r4, r5
 800b478:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b47c:	4601      	mov	r1, r0
 800b47e:	3b30      	subs	r3, #48	@ 0x30
 800b480:	220a      	movs	r2, #10
 800b482:	4630      	mov	r0, r6
 800b484:	f7ff ff8c 	bl	800b3a0 <__multadd>
 800b488:	45a0      	cmp	r8, r4
 800b48a:	d1f5      	bne.n	800b478 <__s2b+0x4c>
 800b48c:	f1a5 0408 	sub.w	r4, r5, #8
 800b490:	444c      	add	r4, r9
 800b492:	1b2d      	subs	r5, r5, r4
 800b494:	1963      	adds	r3, r4, r5
 800b496:	42bb      	cmp	r3, r7
 800b498:	db04      	blt.n	800b4a4 <__s2b+0x78>
 800b49a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b49e:	340a      	adds	r4, #10
 800b4a0:	2509      	movs	r5, #9
 800b4a2:	e7f6      	b.n	800b492 <__s2b+0x66>
 800b4a4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b4a8:	4601      	mov	r1, r0
 800b4aa:	3b30      	subs	r3, #48	@ 0x30
 800b4ac:	220a      	movs	r2, #10
 800b4ae:	4630      	mov	r0, r6
 800b4b0:	f7ff ff76 	bl	800b3a0 <__multadd>
 800b4b4:	e7ee      	b.n	800b494 <__s2b+0x68>
 800b4b6:	bf00      	nop
 800b4b8:	0800dca1 	.word	0x0800dca1
 800b4bc:	0800dcb2 	.word	0x0800dcb2

0800b4c0 <__hi0bits>:
 800b4c0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b4c4:	4603      	mov	r3, r0
 800b4c6:	bf36      	itet	cc
 800b4c8:	0403      	lslcc	r3, r0, #16
 800b4ca:	2000      	movcs	r0, #0
 800b4cc:	2010      	movcc	r0, #16
 800b4ce:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b4d2:	bf3c      	itt	cc
 800b4d4:	021b      	lslcc	r3, r3, #8
 800b4d6:	3008      	addcc	r0, #8
 800b4d8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b4dc:	bf3c      	itt	cc
 800b4de:	011b      	lslcc	r3, r3, #4
 800b4e0:	3004      	addcc	r0, #4
 800b4e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b4e6:	bf3c      	itt	cc
 800b4e8:	009b      	lslcc	r3, r3, #2
 800b4ea:	3002      	addcc	r0, #2
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	db05      	blt.n	800b4fc <__hi0bits+0x3c>
 800b4f0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b4f4:	f100 0001 	add.w	r0, r0, #1
 800b4f8:	bf08      	it	eq
 800b4fa:	2020      	moveq	r0, #32
 800b4fc:	4770      	bx	lr

0800b4fe <__lo0bits>:
 800b4fe:	6803      	ldr	r3, [r0, #0]
 800b500:	4602      	mov	r2, r0
 800b502:	f013 0007 	ands.w	r0, r3, #7
 800b506:	d00b      	beq.n	800b520 <__lo0bits+0x22>
 800b508:	07d9      	lsls	r1, r3, #31
 800b50a:	d421      	bmi.n	800b550 <__lo0bits+0x52>
 800b50c:	0798      	lsls	r0, r3, #30
 800b50e:	bf49      	itett	mi
 800b510:	085b      	lsrmi	r3, r3, #1
 800b512:	089b      	lsrpl	r3, r3, #2
 800b514:	2001      	movmi	r0, #1
 800b516:	6013      	strmi	r3, [r2, #0]
 800b518:	bf5c      	itt	pl
 800b51a:	6013      	strpl	r3, [r2, #0]
 800b51c:	2002      	movpl	r0, #2
 800b51e:	4770      	bx	lr
 800b520:	b299      	uxth	r1, r3
 800b522:	b909      	cbnz	r1, 800b528 <__lo0bits+0x2a>
 800b524:	0c1b      	lsrs	r3, r3, #16
 800b526:	2010      	movs	r0, #16
 800b528:	b2d9      	uxtb	r1, r3
 800b52a:	b909      	cbnz	r1, 800b530 <__lo0bits+0x32>
 800b52c:	3008      	adds	r0, #8
 800b52e:	0a1b      	lsrs	r3, r3, #8
 800b530:	0719      	lsls	r1, r3, #28
 800b532:	bf04      	itt	eq
 800b534:	091b      	lsreq	r3, r3, #4
 800b536:	3004      	addeq	r0, #4
 800b538:	0799      	lsls	r1, r3, #30
 800b53a:	bf04      	itt	eq
 800b53c:	089b      	lsreq	r3, r3, #2
 800b53e:	3002      	addeq	r0, #2
 800b540:	07d9      	lsls	r1, r3, #31
 800b542:	d403      	bmi.n	800b54c <__lo0bits+0x4e>
 800b544:	085b      	lsrs	r3, r3, #1
 800b546:	f100 0001 	add.w	r0, r0, #1
 800b54a:	d003      	beq.n	800b554 <__lo0bits+0x56>
 800b54c:	6013      	str	r3, [r2, #0]
 800b54e:	4770      	bx	lr
 800b550:	2000      	movs	r0, #0
 800b552:	4770      	bx	lr
 800b554:	2020      	movs	r0, #32
 800b556:	4770      	bx	lr

0800b558 <__i2b>:
 800b558:	b510      	push	{r4, lr}
 800b55a:	460c      	mov	r4, r1
 800b55c:	2101      	movs	r1, #1
 800b55e:	f7ff febd 	bl	800b2dc <_Balloc>
 800b562:	4602      	mov	r2, r0
 800b564:	b928      	cbnz	r0, 800b572 <__i2b+0x1a>
 800b566:	4b05      	ldr	r3, [pc, #20]	@ (800b57c <__i2b+0x24>)
 800b568:	4805      	ldr	r0, [pc, #20]	@ (800b580 <__i2b+0x28>)
 800b56a:	f240 1145 	movw	r1, #325	@ 0x145
 800b56e:	f001 fbdb 	bl	800cd28 <__assert_func>
 800b572:	2301      	movs	r3, #1
 800b574:	6144      	str	r4, [r0, #20]
 800b576:	6103      	str	r3, [r0, #16]
 800b578:	bd10      	pop	{r4, pc}
 800b57a:	bf00      	nop
 800b57c:	0800dca1 	.word	0x0800dca1
 800b580:	0800dcb2 	.word	0x0800dcb2

0800b584 <__multiply>:
 800b584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b588:	4617      	mov	r7, r2
 800b58a:	690a      	ldr	r2, [r1, #16]
 800b58c:	693b      	ldr	r3, [r7, #16]
 800b58e:	429a      	cmp	r2, r3
 800b590:	bfa8      	it	ge
 800b592:	463b      	movge	r3, r7
 800b594:	4689      	mov	r9, r1
 800b596:	bfa4      	itt	ge
 800b598:	460f      	movge	r7, r1
 800b59a:	4699      	movge	r9, r3
 800b59c:	693d      	ldr	r5, [r7, #16]
 800b59e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b5a2:	68bb      	ldr	r3, [r7, #8]
 800b5a4:	6879      	ldr	r1, [r7, #4]
 800b5a6:	eb05 060a 	add.w	r6, r5, sl
 800b5aa:	42b3      	cmp	r3, r6
 800b5ac:	b085      	sub	sp, #20
 800b5ae:	bfb8      	it	lt
 800b5b0:	3101      	addlt	r1, #1
 800b5b2:	f7ff fe93 	bl	800b2dc <_Balloc>
 800b5b6:	b930      	cbnz	r0, 800b5c6 <__multiply+0x42>
 800b5b8:	4602      	mov	r2, r0
 800b5ba:	4b41      	ldr	r3, [pc, #260]	@ (800b6c0 <__multiply+0x13c>)
 800b5bc:	4841      	ldr	r0, [pc, #260]	@ (800b6c4 <__multiply+0x140>)
 800b5be:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b5c2:	f001 fbb1 	bl	800cd28 <__assert_func>
 800b5c6:	f100 0414 	add.w	r4, r0, #20
 800b5ca:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800b5ce:	4623      	mov	r3, r4
 800b5d0:	2200      	movs	r2, #0
 800b5d2:	4573      	cmp	r3, lr
 800b5d4:	d320      	bcc.n	800b618 <__multiply+0x94>
 800b5d6:	f107 0814 	add.w	r8, r7, #20
 800b5da:	f109 0114 	add.w	r1, r9, #20
 800b5de:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800b5e2:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800b5e6:	9302      	str	r3, [sp, #8]
 800b5e8:	1beb      	subs	r3, r5, r7
 800b5ea:	3b15      	subs	r3, #21
 800b5ec:	f023 0303 	bic.w	r3, r3, #3
 800b5f0:	3304      	adds	r3, #4
 800b5f2:	3715      	adds	r7, #21
 800b5f4:	42bd      	cmp	r5, r7
 800b5f6:	bf38      	it	cc
 800b5f8:	2304      	movcc	r3, #4
 800b5fa:	9301      	str	r3, [sp, #4]
 800b5fc:	9b02      	ldr	r3, [sp, #8]
 800b5fe:	9103      	str	r1, [sp, #12]
 800b600:	428b      	cmp	r3, r1
 800b602:	d80c      	bhi.n	800b61e <__multiply+0x9a>
 800b604:	2e00      	cmp	r6, #0
 800b606:	dd03      	ble.n	800b610 <__multiply+0x8c>
 800b608:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d055      	beq.n	800b6bc <__multiply+0x138>
 800b610:	6106      	str	r6, [r0, #16]
 800b612:	b005      	add	sp, #20
 800b614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b618:	f843 2b04 	str.w	r2, [r3], #4
 800b61c:	e7d9      	b.n	800b5d2 <__multiply+0x4e>
 800b61e:	f8b1 a000 	ldrh.w	sl, [r1]
 800b622:	f1ba 0f00 	cmp.w	sl, #0
 800b626:	d01f      	beq.n	800b668 <__multiply+0xe4>
 800b628:	46c4      	mov	ip, r8
 800b62a:	46a1      	mov	r9, r4
 800b62c:	2700      	movs	r7, #0
 800b62e:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b632:	f8d9 3000 	ldr.w	r3, [r9]
 800b636:	fa1f fb82 	uxth.w	fp, r2
 800b63a:	b29b      	uxth	r3, r3
 800b63c:	fb0a 330b 	mla	r3, sl, fp, r3
 800b640:	443b      	add	r3, r7
 800b642:	f8d9 7000 	ldr.w	r7, [r9]
 800b646:	0c12      	lsrs	r2, r2, #16
 800b648:	0c3f      	lsrs	r7, r7, #16
 800b64a:	fb0a 7202 	mla	r2, sl, r2, r7
 800b64e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800b652:	b29b      	uxth	r3, r3
 800b654:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b658:	4565      	cmp	r5, ip
 800b65a:	f849 3b04 	str.w	r3, [r9], #4
 800b65e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800b662:	d8e4      	bhi.n	800b62e <__multiply+0xaa>
 800b664:	9b01      	ldr	r3, [sp, #4]
 800b666:	50e7      	str	r7, [r4, r3]
 800b668:	9b03      	ldr	r3, [sp, #12]
 800b66a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b66e:	3104      	adds	r1, #4
 800b670:	f1b9 0f00 	cmp.w	r9, #0
 800b674:	d020      	beq.n	800b6b8 <__multiply+0x134>
 800b676:	6823      	ldr	r3, [r4, #0]
 800b678:	4647      	mov	r7, r8
 800b67a:	46a4      	mov	ip, r4
 800b67c:	f04f 0a00 	mov.w	sl, #0
 800b680:	f8b7 b000 	ldrh.w	fp, [r7]
 800b684:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800b688:	fb09 220b 	mla	r2, r9, fp, r2
 800b68c:	4452      	add	r2, sl
 800b68e:	b29b      	uxth	r3, r3
 800b690:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b694:	f84c 3b04 	str.w	r3, [ip], #4
 800b698:	f857 3b04 	ldr.w	r3, [r7], #4
 800b69c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b6a0:	f8bc 3000 	ldrh.w	r3, [ip]
 800b6a4:	fb09 330a 	mla	r3, r9, sl, r3
 800b6a8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800b6ac:	42bd      	cmp	r5, r7
 800b6ae:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b6b2:	d8e5      	bhi.n	800b680 <__multiply+0xfc>
 800b6b4:	9a01      	ldr	r2, [sp, #4]
 800b6b6:	50a3      	str	r3, [r4, r2]
 800b6b8:	3404      	adds	r4, #4
 800b6ba:	e79f      	b.n	800b5fc <__multiply+0x78>
 800b6bc:	3e01      	subs	r6, #1
 800b6be:	e7a1      	b.n	800b604 <__multiply+0x80>
 800b6c0:	0800dca1 	.word	0x0800dca1
 800b6c4:	0800dcb2 	.word	0x0800dcb2

0800b6c8 <__pow5mult>:
 800b6c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b6cc:	4615      	mov	r5, r2
 800b6ce:	f012 0203 	ands.w	r2, r2, #3
 800b6d2:	4607      	mov	r7, r0
 800b6d4:	460e      	mov	r6, r1
 800b6d6:	d007      	beq.n	800b6e8 <__pow5mult+0x20>
 800b6d8:	4c25      	ldr	r4, [pc, #148]	@ (800b770 <__pow5mult+0xa8>)
 800b6da:	3a01      	subs	r2, #1
 800b6dc:	2300      	movs	r3, #0
 800b6de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b6e2:	f7ff fe5d 	bl	800b3a0 <__multadd>
 800b6e6:	4606      	mov	r6, r0
 800b6e8:	10ad      	asrs	r5, r5, #2
 800b6ea:	d03d      	beq.n	800b768 <__pow5mult+0xa0>
 800b6ec:	69fc      	ldr	r4, [r7, #28]
 800b6ee:	b97c      	cbnz	r4, 800b710 <__pow5mult+0x48>
 800b6f0:	2010      	movs	r0, #16
 800b6f2:	f7ff fd3d 	bl	800b170 <malloc>
 800b6f6:	4602      	mov	r2, r0
 800b6f8:	61f8      	str	r0, [r7, #28]
 800b6fa:	b928      	cbnz	r0, 800b708 <__pow5mult+0x40>
 800b6fc:	4b1d      	ldr	r3, [pc, #116]	@ (800b774 <__pow5mult+0xac>)
 800b6fe:	481e      	ldr	r0, [pc, #120]	@ (800b778 <__pow5mult+0xb0>)
 800b700:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b704:	f001 fb10 	bl	800cd28 <__assert_func>
 800b708:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b70c:	6004      	str	r4, [r0, #0]
 800b70e:	60c4      	str	r4, [r0, #12]
 800b710:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b714:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b718:	b94c      	cbnz	r4, 800b72e <__pow5mult+0x66>
 800b71a:	f240 2171 	movw	r1, #625	@ 0x271
 800b71e:	4638      	mov	r0, r7
 800b720:	f7ff ff1a 	bl	800b558 <__i2b>
 800b724:	2300      	movs	r3, #0
 800b726:	f8c8 0008 	str.w	r0, [r8, #8]
 800b72a:	4604      	mov	r4, r0
 800b72c:	6003      	str	r3, [r0, #0]
 800b72e:	f04f 0900 	mov.w	r9, #0
 800b732:	07eb      	lsls	r3, r5, #31
 800b734:	d50a      	bpl.n	800b74c <__pow5mult+0x84>
 800b736:	4631      	mov	r1, r6
 800b738:	4622      	mov	r2, r4
 800b73a:	4638      	mov	r0, r7
 800b73c:	f7ff ff22 	bl	800b584 <__multiply>
 800b740:	4631      	mov	r1, r6
 800b742:	4680      	mov	r8, r0
 800b744:	4638      	mov	r0, r7
 800b746:	f7ff fe09 	bl	800b35c <_Bfree>
 800b74a:	4646      	mov	r6, r8
 800b74c:	106d      	asrs	r5, r5, #1
 800b74e:	d00b      	beq.n	800b768 <__pow5mult+0xa0>
 800b750:	6820      	ldr	r0, [r4, #0]
 800b752:	b938      	cbnz	r0, 800b764 <__pow5mult+0x9c>
 800b754:	4622      	mov	r2, r4
 800b756:	4621      	mov	r1, r4
 800b758:	4638      	mov	r0, r7
 800b75a:	f7ff ff13 	bl	800b584 <__multiply>
 800b75e:	6020      	str	r0, [r4, #0]
 800b760:	f8c0 9000 	str.w	r9, [r0]
 800b764:	4604      	mov	r4, r0
 800b766:	e7e4      	b.n	800b732 <__pow5mult+0x6a>
 800b768:	4630      	mov	r0, r6
 800b76a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b76e:	bf00      	nop
 800b770:	0800ddc4 	.word	0x0800ddc4
 800b774:	0800dc32 	.word	0x0800dc32
 800b778:	0800dcb2 	.word	0x0800dcb2

0800b77c <__lshift>:
 800b77c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b780:	460c      	mov	r4, r1
 800b782:	6849      	ldr	r1, [r1, #4]
 800b784:	6923      	ldr	r3, [r4, #16]
 800b786:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b78a:	68a3      	ldr	r3, [r4, #8]
 800b78c:	4607      	mov	r7, r0
 800b78e:	4691      	mov	r9, r2
 800b790:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b794:	f108 0601 	add.w	r6, r8, #1
 800b798:	42b3      	cmp	r3, r6
 800b79a:	db0b      	blt.n	800b7b4 <__lshift+0x38>
 800b79c:	4638      	mov	r0, r7
 800b79e:	f7ff fd9d 	bl	800b2dc <_Balloc>
 800b7a2:	4605      	mov	r5, r0
 800b7a4:	b948      	cbnz	r0, 800b7ba <__lshift+0x3e>
 800b7a6:	4602      	mov	r2, r0
 800b7a8:	4b28      	ldr	r3, [pc, #160]	@ (800b84c <__lshift+0xd0>)
 800b7aa:	4829      	ldr	r0, [pc, #164]	@ (800b850 <__lshift+0xd4>)
 800b7ac:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b7b0:	f001 faba 	bl	800cd28 <__assert_func>
 800b7b4:	3101      	adds	r1, #1
 800b7b6:	005b      	lsls	r3, r3, #1
 800b7b8:	e7ee      	b.n	800b798 <__lshift+0x1c>
 800b7ba:	2300      	movs	r3, #0
 800b7bc:	f100 0114 	add.w	r1, r0, #20
 800b7c0:	f100 0210 	add.w	r2, r0, #16
 800b7c4:	4618      	mov	r0, r3
 800b7c6:	4553      	cmp	r3, sl
 800b7c8:	db33      	blt.n	800b832 <__lshift+0xb6>
 800b7ca:	6920      	ldr	r0, [r4, #16]
 800b7cc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b7d0:	f104 0314 	add.w	r3, r4, #20
 800b7d4:	f019 091f 	ands.w	r9, r9, #31
 800b7d8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b7dc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b7e0:	d02b      	beq.n	800b83a <__lshift+0xbe>
 800b7e2:	f1c9 0e20 	rsb	lr, r9, #32
 800b7e6:	468a      	mov	sl, r1
 800b7e8:	2200      	movs	r2, #0
 800b7ea:	6818      	ldr	r0, [r3, #0]
 800b7ec:	fa00 f009 	lsl.w	r0, r0, r9
 800b7f0:	4310      	orrs	r0, r2
 800b7f2:	f84a 0b04 	str.w	r0, [sl], #4
 800b7f6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b7fa:	459c      	cmp	ip, r3
 800b7fc:	fa22 f20e 	lsr.w	r2, r2, lr
 800b800:	d8f3      	bhi.n	800b7ea <__lshift+0x6e>
 800b802:	ebac 0304 	sub.w	r3, ip, r4
 800b806:	3b15      	subs	r3, #21
 800b808:	f023 0303 	bic.w	r3, r3, #3
 800b80c:	3304      	adds	r3, #4
 800b80e:	f104 0015 	add.w	r0, r4, #21
 800b812:	4560      	cmp	r0, ip
 800b814:	bf88      	it	hi
 800b816:	2304      	movhi	r3, #4
 800b818:	50ca      	str	r2, [r1, r3]
 800b81a:	b10a      	cbz	r2, 800b820 <__lshift+0xa4>
 800b81c:	f108 0602 	add.w	r6, r8, #2
 800b820:	3e01      	subs	r6, #1
 800b822:	4638      	mov	r0, r7
 800b824:	612e      	str	r6, [r5, #16]
 800b826:	4621      	mov	r1, r4
 800b828:	f7ff fd98 	bl	800b35c <_Bfree>
 800b82c:	4628      	mov	r0, r5
 800b82e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b832:	f842 0f04 	str.w	r0, [r2, #4]!
 800b836:	3301      	adds	r3, #1
 800b838:	e7c5      	b.n	800b7c6 <__lshift+0x4a>
 800b83a:	3904      	subs	r1, #4
 800b83c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b840:	f841 2f04 	str.w	r2, [r1, #4]!
 800b844:	459c      	cmp	ip, r3
 800b846:	d8f9      	bhi.n	800b83c <__lshift+0xc0>
 800b848:	e7ea      	b.n	800b820 <__lshift+0xa4>
 800b84a:	bf00      	nop
 800b84c:	0800dca1 	.word	0x0800dca1
 800b850:	0800dcb2 	.word	0x0800dcb2

0800b854 <__mcmp>:
 800b854:	690a      	ldr	r2, [r1, #16]
 800b856:	4603      	mov	r3, r0
 800b858:	6900      	ldr	r0, [r0, #16]
 800b85a:	1a80      	subs	r0, r0, r2
 800b85c:	b530      	push	{r4, r5, lr}
 800b85e:	d10e      	bne.n	800b87e <__mcmp+0x2a>
 800b860:	3314      	adds	r3, #20
 800b862:	3114      	adds	r1, #20
 800b864:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b868:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b86c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b870:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b874:	4295      	cmp	r5, r2
 800b876:	d003      	beq.n	800b880 <__mcmp+0x2c>
 800b878:	d205      	bcs.n	800b886 <__mcmp+0x32>
 800b87a:	f04f 30ff 	mov.w	r0, #4294967295
 800b87e:	bd30      	pop	{r4, r5, pc}
 800b880:	42a3      	cmp	r3, r4
 800b882:	d3f3      	bcc.n	800b86c <__mcmp+0x18>
 800b884:	e7fb      	b.n	800b87e <__mcmp+0x2a>
 800b886:	2001      	movs	r0, #1
 800b888:	e7f9      	b.n	800b87e <__mcmp+0x2a>
	...

0800b88c <__mdiff>:
 800b88c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b890:	4689      	mov	r9, r1
 800b892:	4606      	mov	r6, r0
 800b894:	4611      	mov	r1, r2
 800b896:	4648      	mov	r0, r9
 800b898:	4614      	mov	r4, r2
 800b89a:	f7ff ffdb 	bl	800b854 <__mcmp>
 800b89e:	1e05      	subs	r5, r0, #0
 800b8a0:	d112      	bne.n	800b8c8 <__mdiff+0x3c>
 800b8a2:	4629      	mov	r1, r5
 800b8a4:	4630      	mov	r0, r6
 800b8a6:	f7ff fd19 	bl	800b2dc <_Balloc>
 800b8aa:	4602      	mov	r2, r0
 800b8ac:	b928      	cbnz	r0, 800b8ba <__mdiff+0x2e>
 800b8ae:	4b3f      	ldr	r3, [pc, #252]	@ (800b9ac <__mdiff+0x120>)
 800b8b0:	f240 2137 	movw	r1, #567	@ 0x237
 800b8b4:	483e      	ldr	r0, [pc, #248]	@ (800b9b0 <__mdiff+0x124>)
 800b8b6:	f001 fa37 	bl	800cd28 <__assert_func>
 800b8ba:	2301      	movs	r3, #1
 800b8bc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b8c0:	4610      	mov	r0, r2
 800b8c2:	b003      	add	sp, #12
 800b8c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8c8:	bfbc      	itt	lt
 800b8ca:	464b      	movlt	r3, r9
 800b8cc:	46a1      	movlt	r9, r4
 800b8ce:	4630      	mov	r0, r6
 800b8d0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b8d4:	bfba      	itte	lt
 800b8d6:	461c      	movlt	r4, r3
 800b8d8:	2501      	movlt	r5, #1
 800b8da:	2500      	movge	r5, #0
 800b8dc:	f7ff fcfe 	bl	800b2dc <_Balloc>
 800b8e0:	4602      	mov	r2, r0
 800b8e2:	b918      	cbnz	r0, 800b8ec <__mdiff+0x60>
 800b8e4:	4b31      	ldr	r3, [pc, #196]	@ (800b9ac <__mdiff+0x120>)
 800b8e6:	f240 2145 	movw	r1, #581	@ 0x245
 800b8ea:	e7e3      	b.n	800b8b4 <__mdiff+0x28>
 800b8ec:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b8f0:	6926      	ldr	r6, [r4, #16]
 800b8f2:	60c5      	str	r5, [r0, #12]
 800b8f4:	f109 0310 	add.w	r3, r9, #16
 800b8f8:	f109 0514 	add.w	r5, r9, #20
 800b8fc:	f104 0e14 	add.w	lr, r4, #20
 800b900:	f100 0b14 	add.w	fp, r0, #20
 800b904:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b908:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b90c:	9301      	str	r3, [sp, #4]
 800b90e:	46d9      	mov	r9, fp
 800b910:	f04f 0c00 	mov.w	ip, #0
 800b914:	9b01      	ldr	r3, [sp, #4]
 800b916:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b91a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b91e:	9301      	str	r3, [sp, #4]
 800b920:	fa1f f38a 	uxth.w	r3, sl
 800b924:	4619      	mov	r1, r3
 800b926:	b283      	uxth	r3, r0
 800b928:	1acb      	subs	r3, r1, r3
 800b92a:	0c00      	lsrs	r0, r0, #16
 800b92c:	4463      	add	r3, ip
 800b92e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b932:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b936:	b29b      	uxth	r3, r3
 800b938:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b93c:	4576      	cmp	r6, lr
 800b93e:	f849 3b04 	str.w	r3, [r9], #4
 800b942:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b946:	d8e5      	bhi.n	800b914 <__mdiff+0x88>
 800b948:	1b33      	subs	r3, r6, r4
 800b94a:	3b15      	subs	r3, #21
 800b94c:	f023 0303 	bic.w	r3, r3, #3
 800b950:	3415      	adds	r4, #21
 800b952:	3304      	adds	r3, #4
 800b954:	42a6      	cmp	r6, r4
 800b956:	bf38      	it	cc
 800b958:	2304      	movcc	r3, #4
 800b95a:	441d      	add	r5, r3
 800b95c:	445b      	add	r3, fp
 800b95e:	461e      	mov	r6, r3
 800b960:	462c      	mov	r4, r5
 800b962:	4544      	cmp	r4, r8
 800b964:	d30e      	bcc.n	800b984 <__mdiff+0xf8>
 800b966:	f108 0103 	add.w	r1, r8, #3
 800b96a:	1b49      	subs	r1, r1, r5
 800b96c:	f021 0103 	bic.w	r1, r1, #3
 800b970:	3d03      	subs	r5, #3
 800b972:	45a8      	cmp	r8, r5
 800b974:	bf38      	it	cc
 800b976:	2100      	movcc	r1, #0
 800b978:	440b      	add	r3, r1
 800b97a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b97e:	b191      	cbz	r1, 800b9a6 <__mdiff+0x11a>
 800b980:	6117      	str	r7, [r2, #16]
 800b982:	e79d      	b.n	800b8c0 <__mdiff+0x34>
 800b984:	f854 1b04 	ldr.w	r1, [r4], #4
 800b988:	46e6      	mov	lr, ip
 800b98a:	0c08      	lsrs	r0, r1, #16
 800b98c:	fa1c fc81 	uxtah	ip, ip, r1
 800b990:	4471      	add	r1, lr
 800b992:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b996:	b289      	uxth	r1, r1
 800b998:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b99c:	f846 1b04 	str.w	r1, [r6], #4
 800b9a0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b9a4:	e7dd      	b.n	800b962 <__mdiff+0xd6>
 800b9a6:	3f01      	subs	r7, #1
 800b9a8:	e7e7      	b.n	800b97a <__mdiff+0xee>
 800b9aa:	bf00      	nop
 800b9ac:	0800dca1 	.word	0x0800dca1
 800b9b0:	0800dcb2 	.word	0x0800dcb2

0800b9b4 <__ulp>:
 800b9b4:	b082      	sub	sp, #8
 800b9b6:	ed8d 0b00 	vstr	d0, [sp]
 800b9ba:	9a01      	ldr	r2, [sp, #4]
 800b9bc:	4b0f      	ldr	r3, [pc, #60]	@ (800b9fc <__ulp+0x48>)
 800b9be:	4013      	ands	r3, r2
 800b9c0:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	dc08      	bgt.n	800b9da <__ulp+0x26>
 800b9c8:	425b      	negs	r3, r3
 800b9ca:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800b9ce:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b9d2:	da04      	bge.n	800b9de <__ulp+0x2a>
 800b9d4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800b9d8:	4113      	asrs	r3, r2
 800b9da:	2200      	movs	r2, #0
 800b9dc:	e008      	b.n	800b9f0 <__ulp+0x3c>
 800b9de:	f1a2 0314 	sub.w	r3, r2, #20
 800b9e2:	2b1e      	cmp	r3, #30
 800b9e4:	bfda      	itte	le
 800b9e6:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800b9ea:	40da      	lsrle	r2, r3
 800b9ec:	2201      	movgt	r2, #1
 800b9ee:	2300      	movs	r3, #0
 800b9f0:	4619      	mov	r1, r3
 800b9f2:	4610      	mov	r0, r2
 800b9f4:	ec41 0b10 	vmov	d0, r0, r1
 800b9f8:	b002      	add	sp, #8
 800b9fa:	4770      	bx	lr
 800b9fc:	7ff00000 	.word	0x7ff00000

0800ba00 <__b2d>:
 800ba00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba04:	6906      	ldr	r6, [r0, #16]
 800ba06:	f100 0814 	add.w	r8, r0, #20
 800ba0a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800ba0e:	1f37      	subs	r7, r6, #4
 800ba10:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ba14:	4610      	mov	r0, r2
 800ba16:	f7ff fd53 	bl	800b4c0 <__hi0bits>
 800ba1a:	f1c0 0320 	rsb	r3, r0, #32
 800ba1e:	280a      	cmp	r0, #10
 800ba20:	600b      	str	r3, [r1, #0]
 800ba22:	491b      	ldr	r1, [pc, #108]	@ (800ba90 <__b2d+0x90>)
 800ba24:	dc15      	bgt.n	800ba52 <__b2d+0x52>
 800ba26:	f1c0 0c0b 	rsb	ip, r0, #11
 800ba2a:	fa22 f30c 	lsr.w	r3, r2, ip
 800ba2e:	45b8      	cmp	r8, r7
 800ba30:	ea43 0501 	orr.w	r5, r3, r1
 800ba34:	bf34      	ite	cc
 800ba36:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ba3a:	2300      	movcs	r3, #0
 800ba3c:	3015      	adds	r0, #21
 800ba3e:	fa02 f000 	lsl.w	r0, r2, r0
 800ba42:	fa23 f30c 	lsr.w	r3, r3, ip
 800ba46:	4303      	orrs	r3, r0
 800ba48:	461c      	mov	r4, r3
 800ba4a:	ec45 4b10 	vmov	d0, r4, r5
 800ba4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba52:	45b8      	cmp	r8, r7
 800ba54:	bf3a      	itte	cc
 800ba56:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ba5a:	f1a6 0708 	subcc.w	r7, r6, #8
 800ba5e:	2300      	movcs	r3, #0
 800ba60:	380b      	subs	r0, #11
 800ba62:	d012      	beq.n	800ba8a <__b2d+0x8a>
 800ba64:	f1c0 0120 	rsb	r1, r0, #32
 800ba68:	fa23 f401 	lsr.w	r4, r3, r1
 800ba6c:	4082      	lsls	r2, r0
 800ba6e:	4322      	orrs	r2, r4
 800ba70:	4547      	cmp	r7, r8
 800ba72:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800ba76:	bf8c      	ite	hi
 800ba78:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800ba7c:	2200      	movls	r2, #0
 800ba7e:	4083      	lsls	r3, r0
 800ba80:	40ca      	lsrs	r2, r1
 800ba82:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800ba86:	4313      	orrs	r3, r2
 800ba88:	e7de      	b.n	800ba48 <__b2d+0x48>
 800ba8a:	ea42 0501 	orr.w	r5, r2, r1
 800ba8e:	e7db      	b.n	800ba48 <__b2d+0x48>
 800ba90:	3ff00000 	.word	0x3ff00000

0800ba94 <__d2b>:
 800ba94:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ba98:	460f      	mov	r7, r1
 800ba9a:	2101      	movs	r1, #1
 800ba9c:	ec59 8b10 	vmov	r8, r9, d0
 800baa0:	4616      	mov	r6, r2
 800baa2:	f7ff fc1b 	bl	800b2dc <_Balloc>
 800baa6:	4604      	mov	r4, r0
 800baa8:	b930      	cbnz	r0, 800bab8 <__d2b+0x24>
 800baaa:	4602      	mov	r2, r0
 800baac:	4b23      	ldr	r3, [pc, #140]	@ (800bb3c <__d2b+0xa8>)
 800baae:	4824      	ldr	r0, [pc, #144]	@ (800bb40 <__d2b+0xac>)
 800bab0:	f240 310f 	movw	r1, #783	@ 0x30f
 800bab4:	f001 f938 	bl	800cd28 <__assert_func>
 800bab8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800babc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bac0:	b10d      	cbz	r5, 800bac6 <__d2b+0x32>
 800bac2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bac6:	9301      	str	r3, [sp, #4]
 800bac8:	f1b8 0300 	subs.w	r3, r8, #0
 800bacc:	d023      	beq.n	800bb16 <__d2b+0x82>
 800bace:	4668      	mov	r0, sp
 800bad0:	9300      	str	r3, [sp, #0]
 800bad2:	f7ff fd14 	bl	800b4fe <__lo0bits>
 800bad6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800bada:	b1d0      	cbz	r0, 800bb12 <__d2b+0x7e>
 800badc:	f1c0 0320 	rsb	r3, r0, #32
 800bae0:	fa02 f303 	lsl.w	r3, r2, r3
 800bae4:	430b      	orrs	r3, r1
 800bae6:	40c2      	lsrs	r2, r0
 800bae8:	6163      	str	r3, [r4, #20]
 800baea:	9201      	str	r2, [sp, #4]
 800baec:	9b01      	ldr	r3, [sp, #4]
 800baee:	61a3      	str	r3, [r4, #24]
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	bf0c      	ite	eq
 800baf4:	2201      	moveq	r2, #1
 800baf6:	2202      	movne	r2, #2
 800baf8:	6122      	str	r2, [r4, #16]
 800bafa:	b1a5      	cbz	r5, 800bb26 <__d2b+0x92>
 800bafc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800bb00:	4405      	add	r5, r0
 800bb02:	603d      	str	r5, [r7, #0]
 800bb04:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800bb08:	6030      	str	r0, [r6, #0]
 800bb0a:	4620      	mov	r0, r4
 800bb0c:	b003      	add	sp, #12
 800bb0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bb12:	6161      	str	r1, [r4, #20]
 800bb14:	e7ea      	b.n	800baec <__d2b+0x58>
 800bb16:	a801      	add	r0, sp, #4
 800bb18:	f7ff fcf1 	bl	800b4fe <__lo0bits>
 800bb1c:	9b01      	ldr	r3, [sp, #4]
 800bb1e:	6163      	str	r3, [r4, #20]
 800bb20:	3020      	adds	r0, #32
 800bb22:	2201      	movs	r2, #1
 800bb24:	e7e8      	b.n	800baf8 <__d2b+0x64>
 800bb26:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bb2a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800bb2e:	6038      	str	r0, [r7, #0]
 800bb30:	6918      	ldr	r0, [r3, #16]
 800bb32:	f7ff fcc5 	bl	800b4c0 <__hi0bits>
 800bb36:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bb3a:	e7e5      	b.n	800bb08 <__d2b+0x74>
 800bb3c:	0800dca1 	.word	0x0800dca1
 800bb40:	0800dcb2 	.word	0x0800dcb2

0800bb44 <__ratio>:
 800bb44:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb48:	4688      	mov	r8, r1
 800bb4a:	4669      	mov	r1, sp
 800bb4c:	4681      	mov	r9, r0
 800bb4e:	f7ff ff57 	bl	800ba00 <__b2d>
 800bb52:	a901      	add	r1, sp, #4
 800bb54:	4640      	mov	r0, r8
 800bb56:	ec55 4b10 	vmov	r4, r5, d0
 800bb5a:	f7ff ff51 	bl	800ba00 <__b2d>
 800bb5e:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800bb62:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800bb66:	1ad2      	subs	r2, r2, r3
 800bb68:	e9dd 3100 	ldrd	r3, r1, [sp]
 800bb6c:	1a5b      	subs	r3, r3, r1
 800bb6e:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 800bb72:	ec57 6b10 	vmov	r6, r7, d0
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	bfd6      	itet	le
 800bb7a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800bb7e:	462a      	movgt	r2, r5
 800bb80:	463a      	movle	r2, r7
 800bb82:	46ab      	mov	fp, r5
 800bb84:	46a2      	mov	sl, r4
 800bb86:	bfce      	itee	gt
 800bb88:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800bb8c:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800bb90:	ee00 3a90 	vmovle	s1, r3
 800bb94:	ec4b ab17 	vmov	d7, sl, fp
 800bb98:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800bb9c:	b003      	add	sp, #12
 800bb9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bba2 <__copybits>:
 800bba2:	3901      	subs	r1, #1
 800bba4:	b570      	push	{r4, r5, r6, lr}
 800bba6:	1149      	asrs	r1, r1, #5
 800bba8:	6914      	ldr	r4, [r2, #16]
 800bbaa:	3101      	adds	r1, #1
 800bbac:	f102 0314 	add.w	r3, r2, #20
 800bbb0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800bbb4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800bbb8:	1f05      	subs	r5, r0, #4
 800bbba:	42a3      	cmp	r3, r4
 800bbbc:	d30c      	bcc.n	800bbd8 <__copybits+0x36>
 800bbbe:	1aa3      	subs	r3, r4, r2
 800bbc0:	3b11      	subs	r3, #17
 800bbc2:	f023 0303 	bic.w	r3, r3, #3
 800bbc6:	3211      	adds	r2, #17
 800bbc8:	42a2      	cmp	r2, r4
 800bbca:	bf88      	it	hi
 800bbcc:	2300      	movhi	r3, #0
 800bbce:	4418      	add	r0, r3
 800bbd0:	2300      	movs	r3, #0
 800bbd2:	4288      	cmp	r0, r1
 800bbd4:	d305      	bcc.n	800bbe2 <__copybits+0x40>
 800bbd6:	bd70      	pop	{r4, r5, r6, pc}
 800bbd8:	f853 6b04 	ldr.w	r6, [r3], #4
 800bbdc:	f845 6f04 	str.w	r6, [r5, #4]!
 800bbe0:	e7eb      	b.n	800bbba <__copybits+0x18>
 800bbe2:	f840 3b04 	str.w	r3, [r0], #4
 800bbe6:	e7f4      	b.n	800bbd2 <__copybits+0x30>

0800bbe8 <__any_on>:
 800bbe8:	f100 0214 	add.w	r2, r0, #20
 800bbec:	6900      	ldr	r0, [r0, #16]
 800bbee:	114b      	asrs	r3, r1, #5
 800bbf0:	4298      	cmp	r0, r3
 800bbf2:	b510      	push	{r4, lr}
 800bbf4:	db11      	blt.n	800bc1a <__any_on+0x32>
 800bbf6:	dd0a      	ble.n	800bc0e <__any_on+0x26>
 800bbf8:	f011 011f 	ands.w	r1, r1, #31
 800bbfc:	d007      	beq.n	800bc0e <__any_on+0x26>
 800bbfe:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800bc02:	fa24 f001 	lsr.w	r0, r4, r1
 800bc06:	fa00 f101 	lsl.w	r1, r0, r1
 800bc0a:	428c      	cmp	r4, r1
 800bc0c:	d10b      	bne.n	800bc26 <__any_on+0x3e>
 800bc0e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bc12:	4293      	cmp	r3, r2
 800bc14:	d803      	bhi.n	800bc1e <__any_on+0x36>
 800bc16:	2000      	movs	r0, #0
 800bc18:	bd10      	pop	{r4, pc}
 800bc1a:	4603      	mov	r3, r0
 800bc1c:	e7f7      	b.n	800bc0e <__any_on+0x26>
 800bc1e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bc22:	2900      	cmp	r1, #0
 800bc24:	d0f5      	beq.n	800bc12 <__any_on+0x2a>
 800bc26:	2001      	movs	r0, #1
 800bc28:	e7f6      	b.n	800bc18 <__any_on+0x30>

0800bc2a <sulp>:
 800bc2a:	b570      	push	{r4, r5, r6, lr}
 800bc2c:	4604      	mov	r4, r0
 800bc2e:	460d      	mov	r5, r1
 800bc30:	4616      	mov	r6, r2
 800bc32:	ec45 4b10 	vmov	d0, r4, r5
 800bc36:	f7ff febd 	bl	800b9b4 <__ulp>
 800bc3a:	b17e      	cbz	r6, 800bc5c <sulp+0x32>
 800bc3c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800bc40:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	dd09      	ble.n	800bc5c <sulp+0x32>
 800bc48:	051b      	lsls	r3, r3, #20
 800bc4a:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 800bc4e:	2000      	movs	r0, #0
 800bc50:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 800bc54:	ec41 0b17 	vmov	d7, r0, r1
 800bc58:	ee20 0b07 	vmul.f64	d0, d0, d7
 800bc5c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800bc60 <_strtod_l>:
 800bc60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc64:	ed2d 8b0a 	vpush	{d8-d12}
 800bc68:	b097      	sub	sp, #92	@ 0x5c
 800bc6a:	4688      	mov	r8, r1
 800bc6c:	920e      	str	r2, [sp, #56]	@ 0x38
 800bc6e:	2200      	movs	r2, #0
 800bc70:	9212      	str	r2, [sp, #72]	@ 0x48
 800bc72:	9005      	str	r0, [sp, #20]
 800bc74:	f04f 0a00 	mov.w	sl, #0
 800bc78:	f04f 0b00 	mov.w	fp, #0
 800bc7c:	460a      	mov	r2, r1
 800bc7e:	9211      	str	r2, [sp, #68]	@ 0x44
 800bc80:	7811      	ldrb	r1, [r2, #0]
 800bc82:	292b      	cmp	r1, #43	@ 0x2b
 800bc84:	d04c      	beq.n	800bd20 <_strtod_l+0xc0>
 800bc86:	d839      	bhi.n	800bcfc <_strtod_l+0x9c>
 800bc88:	290d      	cmp	r1, #13
 800bc8a:	d833      	bhi.n	800bcf4 <_strtod_l+0x94>
 800bc8c:	2908      	cmp	r1, #8
 800bc8e:	d833      	bhi.n	800bcf8 <_strtod_l+0x98>
 800bc90:	2900      	cmp	r1, #0
 800bc92:	d03c      	beq.n	800bd0e <_strtod_l+0xae>
 800bc94:	2200      	movs	r2, #0
 800bc96:	9208      	str	r2, [sp, #32]
 800bc98:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 800bc9a:	782a      	ldrb	r2, [r5, #0]
 800bc9c:	2a30      	cmp	r2, #48	@ 0x30
 800bc9e:	f040 80b7 	bne.w	800be10 <_strtod_l+0x1b0>
 800bca2:	786a      	ldrb	r2, [r5, #1]
 800bca4:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800bca8:	2a58      	cmp	r2, #88	@ 0x58
 800bcaa:	d170      	bne.n	800bd8e <_strtod_l+0x12e>
 800bcac:	9302      	str	r3, [sp, #8]
 800bcae:	9b08      	ldr	r3, [sp, #32]
 800bcb0:	9301      	str	r3, [sp, #4]
 800bcb2:	ab12      	add	r3, sp, #72	@ 0x48
 800bcb4:	9300      	str	r3, [sp, #0]
 800bcb6:	4a90      	ldr	r2, [pc, #576]	@ (800bef8 <_strtod_l+0x298>)
 800bcb8:	9805      	ldr	r0, [sp, #20]
 800bcba:	ab13      	add	r3, sp, #76	@ 0x4c
 800bcbc:	a911      	add	r1, sp, #68	@ 0x44
 800bcbe:	f001 f8cd 	bl	800ce5c <__gethex>
 800bcc2:	f010 060f 	ands.w	r6, r0, #15
 800bcc6:	4604      	mov	r4, r0
 800bcc8:	d005      	beq.n	800bcd6 <_strtod_l+0x76>
 800bcca:	2e06      	cmp	r6, #6
 800bccc:	d12a      	bne.n	800bd24 <_strtod_l+0xc4>
 800bcce:	3501      	adds	r5, #1
 800bcd0:	2300      	movs	r3, #0
 800bcd2:	9511      	str	r5, [sp, #68]	@ 0x44
 800bcd4:	9308      	str	r3, [sp, #32]
 800bcd6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	f040 8537 	bne.w	800c74c <_strtod_l+0xaec>
 800bcde:	9b08      	ldr	r3, [sp, #32]
 800bce0:	ec4b ab10 	vmov	d0, sl, fp
 800bce4:	b1cb      	cbz	r3, 800bd1a <_strtod_l+0xba>
 800bce6:	eeb1 0b40 	vneg.f64	d0, d0
 800bcea:	b017      	add	sp, #92	@ 0x5c
 800bcec:	ecbd 8b0a 	vpop	{d8-d12}
 800bcf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcf4:	2920      	cmp	r1, #32
 800bcf6:	d1cd      	bne.n	800bc94 <_strtod_l+0x34>
 800bcf8:	3201      	adds	r2, #1
 800bcfa:	e7c0      	b.n	800bc7e <_strtod_l+0x1e>
 800bcfc:	292d      	cmp	r1, #45	@ 0x2d
 800bcfe:	d1c9      	bne.n	800bc94 <_strtod_l+0x34>
 800bd00:	2101      	movs	r1, #1
 800bd02:	9108      	str	r1, [sp, #32]
 800bd04:	1c51      	adds	r1, r2, #1
 800bd06:	9111      	str	r1, [sp, #68]	@ 0x44
 800bd08:	7852      	ldrb	r2, [r2, #1]
 800bd0a:	2a00      	cmp	r2, #0
 800bd0c:	d1c4      	bne.n	800bc98 <_strtod_l+0x38>
 800bd0e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bd10:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	f040 8517 	bne.w	800c748 <_strtod_l+0xae8>
 800bd1a:	ec4b ab10 	vmov	d0, sl, fp
 800bd1e:	e7e4      	b.n	800bcea <_strtod_l+0x8a>
 800bd20:	2100      	movs	r1, #0
 800bd22:	e7ee      	b.n	800bd02 <_strtod_l+0xa2>
 800bd24:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800bd26:	b13a      	cbz	r2, 800bd38 <_strtod_l+0xd8>
 800bd28:	2135      	movs	r1, #53	@ 0x35
 800bd2a:	a814      	add	r0, sp, #80	@ 0x50
 800bd2c:	f7ff ff39 	bl	800bba2 <__copybits>
 800bd30:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800bd32:	9805      	ldr	r0, [sp, #20]
 800bd34:	f7ff fb12 	bl	800b35c <_Bfree>
 800bd38:	1e73      	subs	r3, r6, #1
 800bd3a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800bd3c:	2b04      	cmp	r3, #4
 800bd3e:	d806      	bhi.n	800bd4e <_strtod_l+0xee>
 800bd40:	e8df f003 	tbb	[pc, r3]
 800bd44:	201d0314 	.word	0x201d0314
 800bd48:	14          	.byte	0x14
 800bd49:	00          	.byte	0x00
 800bd4a:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 800bd4e:	05e3      	lsls	r3, r4, #23
 800bd50:	bf48      	it	mi
 800bd52:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800bd56:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bd5a:	0d1b      	lsrs	r3, r3, #20
 800bd5c:	051b      	lsls	r3, r3, #20
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d1b9      	bne.n	800bcd6 <_strtod_l+0x76>
 800bd62:	f7fe fb93 	bl	800a48c <__errno>
 800bd66:	2322      	movs	r3, #34	@ 0x22
 800bd68:	6003      	str	r3, [r0, #0]
 800bd6a:	e7b4      	b.n	800bcd6 <_strtod_l+0x76>
 800bd6c:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 800bd70:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800bd74:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800bd78:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800bd7c:	e7e7      	b.n	800bd4e <_strtod_l+0xee>
 800bd7e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800bf00 <_strtod_l+0x2a0>
 800bd82:	e7e4      	b.n	800bd4e <_strtod_l+0xee>
 800bd84:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800bd88:	f04f 3aff 	mov.w	sl, #4294967295
 800bd8c:	e7df      	b.n	800bd4e <_strtod_l+0xee>
 800bd8e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800bd90:	1c5a      	adds	r2, r3, #1
 800bd92:	9211      	str	r2, [sp, #68]	@ 0x44
 800bd94:	785b      	ldrb	r3, [r3, #1]
 800bd96:	2b30      	cmp	r3, #48	@ 0x30
 800bd98:	d0f9      	beq.n	800bd8e <_strtod_l+0x12e>
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d09b      	beq.n	800bcd6 <_strtod_l+0x76>
 800bd9e:	2301      	movs	r3, #1
 800bda0:	9307      	str	r3, [sp, #28]
 800bda2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800bda4:	930a      	str	r3, [sp, #40]	@ 0x28
 800bda6:	2300      	movs	r3, #0
 800bda8:	9306      	str	r3, [sp, #24]
 800bdaa:	4699      	mov	r9, r3
 800bdac:	461d      	mov	r5, r3
 800bdae:	220a      	movs	r2, #10
 800bdb0:	9811      	ldr	r0, [sp, #68]	@ 0x44
 800bdb2:	7804      	ldrb	r4, [r0, #0]
 800bdb4:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 800bdb8:	b2d9      	uxtb	r1, r3
 800bdba:	2909      	cmp	r1, #9
 800bdbc:	d92a      	bls.n	800be14 <_strtod_l+0x1b4>
 800bdbe:	494f      	ldr	r1, [pc, #316]	@ (800befc <_strtod_l+0x29c>)
 800bdc0:	2201      	movs	r2, #1
 800bdc2:	f000 ff87 	bl	800ccd4 <strncmp>
 800bdc6:	b398      	cbz	r0, 800be30 <_strtod_l+0x1d0>
 800bdc8:	2000      	movs	r0, #0
 800bdca:	4622      	mov	r2, r4
 800bdcc:	462b      	mov	r3, r5
 800bdce:	4607      	mov	r7, r0
 800bdd0:	4601      	mov	r1, r0
 800bdd2:	2a65      	cmp	r2, #101	@ 0x65
 800bdd4:	d001      	beq.n	800bdda <_strtod_l+0x17a>
 800bdd6:	2a45      	cmp	r2, #69	@ 0x45
 800bdd8:	d118      	bne.n	800be0c <_strtod_l+0x1ac>
 800bdda:	b91b      	cbnz	r3, 800bde4 <_strtod_l+0x184>
 800bddc:	9b07      	ldr	r3, [sp, #28]
 800bdde:	4303      	orrs	r3, r0
 800bde0:	d095      	beq.n	800bd0e <_strtod_l+0xae>
 800bde2:	2300      	movs	r3, #0
 800bde4:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 800bde8:	f108 0201 	add.w	r2, r8, #1
 800bdec:	9211      	str	r2, [sp, #68]	@ 0x44
 800bdee:	f898 2001 	ldrb.w	r2, [r8, #1]
 800bdf2:	2a2b      	cmp	r2, #43	@ 0x2b
 800bdf4:	d074      	beq.n	800bee0 <_strtod_l+0x280>
 800bdf6:	2a2d      	cmp	r2, #45	@ 0x2d
 800bdf8:	d07a      	beq.n	800bef0 <_strtod_l+0x290>
 800bdfa:	f04f 0e00 	mov.w	lr, #0
 800bdfe:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 800be02:	2c09      	cmp	r4, #9
 800be04:	f240 8082 	bls.w	800bf0c <_strtod_l+0x2ac>
 800be08:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800be0c:	2400      	movs	r4, #0
 800be0e:	e09d      	b.n	800bf4c <_strtod_l+0x2ec>
 800be10:	2300      	movs	r3, #0
 800be12:	e7c5      	b.n	800bda0 <_strtod_l+0x140>
 800be14:	2d08      	cmp	r5, #8
 800be16:	bfc8      	it	gt
 800be18:	9906      	ldrgt	r1, [sp, #24]
 800be1a:	f100 0001 	add.w	r0, r0, #1
 800be1e:	bfca      	itet	gt
 800be20:	fb02 3301 	mlagt	r3, r2, r1, r3
 800be24:	fb02 3909 	mlale	r9, r2, r9, r3
 800be28:	9306      	strgt	r3, [sp, #24]
 800be2a:	3501      	adds	r5, #1
 800be2c:	9011      	str	r0, [sp, #68]	@ 0x44
 800be2e:	e7bf      	b.n	800bdb0 <_strtod_l+0x150>
 800be30:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800be32:	1c5a      	adds	r2, r3, #1
 800be34:	9211      	str	r2, [sp, #68]	@ 0x44
 800be36:	785a      	ldrb	r2, [r3, #1]
 800be38:	b3bd      	cbz	r5, 800beaa <_strtod_l+0x24a>
 800be3a:	4607      	mov	r7, r0
 800be3c:	462b      	mov	r3, r5
 800be3e:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800be42:	2909      	cmp	r1, #9
 800be44:	d912      	bls.n	800be6c <_strtod_l+0x20c>
 800be46:	2101      	movs	r1, #1
 800be48:	e7c3      	b.n	800bdd2 <_strtod_l+0x172>
 800be4a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800be4c:	1c5a      	adds	r2, r3, #1
 800be4e:	9211      	str	r2, [sp, #68]	@ 0x44
 800be50:	785a      	ldrb	r2, [r3, #1]
 800be52:	3001      	adds	r0, #1
 800be54:	2a30      	cmp	r2, #48	@ 0x30
 800be56:	d0f8      	beq.n	800be4a <_strtod_l+0x1ea>
 800be58:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800be5c:	2b08      	cmp	r3, #8
 800be5e:	f200 847a 	bhi.w	800c756 <_strtod_l+0xaf6>
 800be62:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800be64:	930a      	str	r3, [sp, #40]	@ 0x28
 800be66:	4607      	mov	r7, r0
 800be68:	2000      	movs	r0, #0
 800be6a:	4603      	mov	r3, r0
 800be6c:	3a30      	subs	r2, #48	@ 0x30
 800be6e:	f100 0101 	add.w	r1, r0, #1
 800be72:	d014      	beq.n	800be9e <_strtod_l+0x23e>
 800be74:	440f      	add	r7, r1
 800be76:	469c      	mov	ip, r3
 800be78:	f04f 0e0a 	mov.w	lr, #10
 800be7c:	f10c 0401 	add.w	r4, ip, #1
 800be80:	1ae6      	subs	r6, r4, r3
 800be82:	42b1      	cmp	r1, r6
 800be84:	dc13      	bgt.n	800beae <_strtod_l+0x24e>
 800be86:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800be8a:	1819      	adds	r1, r3, r0
 800be8c:	2908      	cmp	r1, #8
 800be8e:	f103 0301 	add.w	r3, r3, #1
 800be92:	4403      	add	r3, r0
 800be94:	dc19      	bgt.n	800beca <_strtod_l+0x26a>
 800be96:	210a      	movs	r1, #10
 800be98:	fb01 2909 	mla	r9, r1, r9, r2
 800be9c:	2100      	movs	r1, #0
 800be9e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800bea0:	1c50      	adds	r0, r2, #1
 800bea2:	9011      	str	r0, [sp, #68]	@ 0x44
 800bea4:	7852      	ldrb	r2, [r2, #1]
 800bea6:	4608      	mov	r0, r1
 800bea8:	e7c9      	b.n	800be3e <_strtod_l+0x1de>
 800beaa:	4628      	mov	r0, r5
 800beac:	e7d2      	b.n	800be54 <_strtod_l+0x1f4>
 800beae:	f1bc 0f08 	cmp.w	ip, #8
 800beb2:	dc03      	bgt.n	800bebc <_strtod_l+0x25c>
 800beb4:	fb0e f909 	mul.w	r9, lr, r9
 800beb8:	46a4      	mov	ip, r4
 800beba:	e7df      	b.n	800be7c <_strtod_l+0x21c>
 800bebc:	2c10      	cmp	r4, #16
 800bebe:	bfde      	ittt	le
 800bec0:	9e06      	ldrle	r6, [sp, #24]
 800bec2:	fb0e f606 	mulle.w	r6, lr, r6
 800bec6:	9606      	strle	r6, [sp, #24]
 800bec8:	e7f6      	b.n	800beb8 <_strtod_l+0x258>
 800beca:	290f      	cmp	r1, #15
 800becc:	bfdf      	itttt	le
 800bece:	9806      	ldrle	r0, [sp, #24]
 800bed0:	210a      	movle	r1, #10
 800bed2:	fb01 2200 	mlale	r2, r1, r0, r2
 800bed6:	9206      	strle	r2, [sp, #24]
 800bed8:	e7e0      	b.n	800be9c <_strtod_l+0x23c>
 800beda:	2700      	movs	r7, #0
 800bedc:	2101      	movs	r1, #1
 800bede:	e77d      	b.n	800bddc <_strtod_l+0x17c>
 800bee0:	f04f 0e00 	mov.w	lr, #0
 800bee4:	f108 0202 	add.w	r2, r8, #2
 800bee8:	9211      	str	r2, [sp, #68]	@ 0x44
 800beea:	f898 2002 	ldrb.w	r2, [r8, #2]
 800beee:	e786      	b.n	800bdfe <_strtod_l+0x19e>
 800bef0:	f04f 0e01 	mov.w	lr, #1
 800bef4:	e7f6      	b.n	800bee4 <_strtod_l+0x284>
 800bef6:	bf00      	nop
 800bef8:	0800ded4 	.word	0x0800ded4
 800befc:	0800dd0b 	.word	0x0800dd0b
 800bf00:	7ff00000 	.word	0x7ff00000
 800bf04:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800bf06:	1c54      	adds	r4, r2, #1
 800bf08:	9411      	str	r4, [sp, #68]	@ 0x44
 800bf0a:	7852      	ldrb	r2, [r2, #1]
 800bf0c:	2a30      	cmp	r2, #48	@ 0x30
 800bf0e:	d0f9      	beq.n	800bf04 <_strtod_l+0x2a4>
 800bf10:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 800bf14:	2c08      	cmp	r4, #8
 800bf16:	f63f af79 	bhi.w	800be0c <_strtod_l+0x1ac>
 800bf1a:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 800bf1e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800bf20:	9209      	str	r2, [sp, #36]	@ 0x24
 800bf22:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800bf24:	1c54      	adds	r4, r2, #1
 800bf26:	9411      	str	r4, [sp, #68]	@ 0x44
 800bf28:	7852      	ldrb	r2, [r2, #1]
 800bf2a:	f1a2 0630 	sub.w	r6, r2, #48	@ 0x30
 800bf2e:	2e09      	cmp	r6, #9
 800bf30:	d937      	bls.n	800bfa2 <_strtod_l+0x342>
 800bf32:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 800bf34:	1ba4      	subs	r4, r4, r6
 800bf36:	2c08      	cmp	r4, #8
 800bf38:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 800bf3c:	dc02      	bgt.n	800bf44 <_strtod_l+0x2e4>
 800bf3e:	4564      	cmp	r4, ip
 800bf40:	bfa8      	it	ge
 800bf42:	4664      	movge	r4, ip
 800bf44:	f1be 0f00 	cmp.w	lr, #0
 800bf48:	d000      	beq.n	800bf4c <_strtod_l+0x2ec>
 800bf4a:	4264      	negs	r4, r4
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d14d      	bne.n	800bfec <_strtod_l+0x38c>
 800bf50:	9b07      	ldr	r3, [sp, #28]
 800bf52:	4318      	orrs	r0, r3
 800bf54:	f47f aebf 	bne.w	800bcd6 <_strtod_l+0x76>
 800bf58:	2900      	cmp	r1, #0
 800bf5a:	f47f aed8 	bne.w	800bd0e <_strtod_l+0xae>
 800bf5e:	2a69      	cmp	r2, #105	@ 0x69
 800bf60:	d027      	beq.n	800bfb2 <_strtod_l+0x352>
 800bf62:	dc24      	bgt.n	800bfae <_strtod_l+0x34e>
 800bf64:	2a49      	cmp	r2, #73	@ 0x49
 800bf66:	d024      	beq.n	800bfb2 <_strtod_l+0x352>
 800bf68:	2a4e      	cmp	r2, #78	@ 0x4e
 800bf6a:	f47f aed0 	bne.w	800bd0e <_strtod_l+0xae>
 800bf6e:	4997      	ldr	r1, [pc, #604]	@ (800c1cc <_strtod_l+0x56c>)
 800bf70:	a811      	add	r0, sp, #68	@ 0x44
 800bf72:	f001 f995 	bl	800d2a0 <__match>
 800bf76:	2800      	cmp	r0, #0
 800bf78:	f43f aec9 	beq.w	800bd0e <_strtod_l+0xae>
 800bf7c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800bf7e:	781b      	ldrb	r3, [r3, #0]
 800bf80:	2b28      	cmp	r3, #40	@ 0x28
 800bf82:	d12d      	bne.n	800bfe0 <_strtod_l+0x380>
 800bf84:	4992      	ldr	r1, [pc, #584]	@ (800c1d0 <_strtod_l+0x570>)
 800bf86:	aa14      	add	r2, sp, #80	@ 0x50
 800bf88:	a811      	add	r0, sp, #68	@ 0x44
 800bf8a:	f001 f99d 	bl	800d2c8 <__hexnan>
 800bf8e:	2805      	cmp	r0, #5
 800bf90:	d126      	bne.n	800bfe0 <_strtod_l+0x380>
 800bf92:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800bf94:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 800bf98:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800bf9c:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800bfa0:	e699      	b.n	800bcd6 <_strtod_l+0x76>
 800bfa2:	240a      	movs	r4, #10
 800bfa4:	fb04 2c0c 	mla	ip, r4, ip, r2
 800bfa8:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 800bfac:	e7b9      	b.n	800bf22 <_strtod_l+0x2c2>
 800bfae:	2a6e      	cmp	r2, #110	@ 0x6e
 800bfb0:	e7db      	b.n	800bf6a <_strtod_l+0x30a>
 800bfb2:	4988      	ldr	r1, [pc, #544]	@ (800c1d4 <_strtod_l+0x574>)
 800bfb4:	a811      	add	r0, sp, #68	@ 0x44
 800bfb6:	f001 f973 	bl	800d2a0 <__match>
 800bfba:	2800      	cmp	r0, #0
 800bfbc:	f43f aea7 	beq.w	800bd0e <_strtod_l+0xae>
 800bfc0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800bfc2:	4985      	ldr	r1, [pc, #532]	@ (800c1d8 <_strtod_l+0x578>)
 800bfc4:	3b01      	subs	r3, #1
 800bfc6:	a811      	add	r0, sp, #68	@ 0x44
 800bfc8:	9311      	str	r3, [sp, #68]	@ 0x44
 800bfca:	f001 f969 	bl	800d2a0 <__match>
 800bfce:	b910      	cbnz	r0, 800bfd6 <_strtod_l+0x376>
 800bfd0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800bfd2:	3301      	adds	r3, #1
 800bfd4:	9311      	str	r3, [sp, #68]	@ 0x44
 800bfd6:	f8df b214 	ldr.w	fp, [pc, #532]	@ 800c1ec <_strtod_l+0x58c>
 800bfda:	f04f 0a00 	mov.w	sl, #0
 800bfde:	e67a      	b.n	800bcd6 <_strtod_l+0x76>
 800bfe0:	487e      	ldr	r0, [pc, #504]	@ (800c1dc <_strtod_l+0x57c>)
 800bfe2:	f000 fe99 	bl	800cd18 <nan>
 800bfe6:	ec5b ab10 	vmov	sl, fp, d0
 800bfea:	e674      	b.n	800bcd6 <_strtod_l+0x76>
 800bfec:	ee07 9a90 	vmov	s15, r9
 800bff0:	1be2      	subs	r2, r4, r7
 800bff2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800bff6:	2d00      	cmp	r5, #0
 800bff8:	bf08      	it	eq
 800bffa:	461d      	moveq	r5, r3
 800bffc:	2b10      	cmp	r3, #16
 800bffe:	9209      	str	r2, [sp, #36]	@ 0x24
 800c000:	461a      	mov	r2, r3
 800c002:	bfa8      	it	ge
 800c004:	2210      	movge	r2, #16
 800c006:	2b09      	cmp	r3, #9
 800c008:	ec5b ab17 	vmov	sl, fp, d7
 800c00c:	dc15      	bgt.n	800c03a <_strtod_l+0x3da>
 800c00e:	1be1      	subs	r1, r4, r7
 800c010:	2900      	cmp	r1, #0
 800c012:	f43f ae60 	beq.w	800bcd6 <_strtod_l+0x76>
 800c016:	eba4 0107 	sub.w	r1, r4, r7
 800c01a:	dd72      	ble.n	800c102 <_strtod_l+0x4a2>
 800c01c:	2916      	cmp	r1, #22
 800c01e:	dc59      	bgt.n	800c0d4 <_strtod_l+0x474>
 800c020:	4b6f      	ldr	r3, [pc, #444]	@ (800c1e0 <_strtod_l+0x580>)
 800c022:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c024:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c028:	ed93 7b00 	vldr	d7, [r3]
 800c02c:	ec4b ab16 	vmov	d6, sl, fp
 800c030:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c034:	ec5b ab17 	vmov	sl, fp, d7
 800c038:	e64d      	b.n	800bcd6 <_strtod_l+0x76>
 800c03a:	4969      	ldr	r1, [pc, #420]	@ (800c1e0 <_strtod_l+0x580>)
 800c03c:	eddd 6a06 	vldr	s13, [sp, #24]
 800c040:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800c044:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 800c048:	2b0f      	cmp	r3, #15
 800c04a:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800c04e:	eea7 6b05 	vfma.f64	d6, d7, d5
 800c052:	ec5b ab16 	vmov	sl, fp, d6
 800c056:	ddda      	ble.n	800c00e <_strtod_l+0x3ae>
 800c058:	1a9a      	subs	r2, r3, r2
 800c05a:	1be1      	subs	r1, r4, r7
 800c05c:	440a      	add	r2, r1
 800c05e:	2a00      	cmp	r2, #0
 800c060:	f340 8094 	ble.w	800c18c <_strtod_l+0x52c>
 800c064:	f012 000f 	ands.w	r0, r2, #15
 800c068:	d00a      	beq.n	800c080 <_strtod_l+0x420>
 800c06a:	495d      	ldr	r1, [pc, #372]	@ (800c1e0 <_strtod_l+0x580>)
 800c06c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800c070:	ed91 7b00 	vldr	d7, [r1]
 800c074:	ec4b ab16 	vmov	d6, sl, fp
 800c078:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c07c:	ec5b ab17 	vmov	sl, fp, d7
 800c080:	f032 020f 	bics.w	r2, r2, #15
 800c084:	d073      	beq.n	800c16e <_strtod_l+0x50e>
 800c086:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 800c08a:	dd47      	ble.n	800c11c <_strtod_l+0x4bc>
 800c08c:	2400      	movs	r4, #0
 800c08e:	4625      	mov	r5, r4
 800c090:	9407      	str	r4, [sp, #28]
 800c092:	4626      	mov	r6, r4
 800c094:	9a05      	ldr	r2, [sp, #20]
 800c096:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800c1ec <_strtod_l+0x58c>
 800c09a:	2322      	movs	r3, #34	@ 0x22
 800c09c:	6013      	str	r3, [r2, #0]
 800c09e:	f04f 0a00 	mov.w	sl, #0
 800c0a2:	9b07      	ldr	r3, [sp, #28]
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	f43f ae16 	beq.w	800bcd6 <_strtod_l+0x76>
 800c0aa:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800c0ac:	9805      	ldr	r0, [sp, #20]
 800c0ae:	f7ff f955 	bl	800b35c <_Bfree>
 800c0b2:	9805      	ldr	r0, [sp, #20]
 800c0b4:	4631      	mov	r1, r6
 800c0b6:	f7ff f951 	bl	800b35c <_Bfree>
 800c0ba:	9805      	ldr	r0, [sp, #20]
 800c0bc:	4629      	mov	r1, r5
 800c0be:	f7ff f94d 	bl	800b35c <_Bfree>
 800c0c2:	9907      	ldr	r1, [sp, #28]
 800c0c4:	9805      	ldr	r0, [sp, #20]
 800c0c6:	f7ff f949 	bl	800b35c <_Bfree>
 800c0ca:	9805      	ldr	r0, [sp, #20]
 800c0cc:	4621      	mov	r1, r4
 800c0ce:	f7ff f945 	bl	800b35c <_Bfree>
 800c0d2:	e600      	b.n	800bcd6 <_strtod_l+0x76>
 800c0d4:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 800c0d8:	1be0      	subs	r0, r4, r7
 800c0da:	4281      	cmp	r1, r0
 800c0dc:	dbbc      	blt.n	800c058 <_strtod_l+0x3f8>
 800c0de:	4a40      	ldr	r2, [pc, #256]	@ (800c1e0 <_strtod_l+0x580>)
 800c0e0:	f1c3 030f 	rsb	r3, r3, #15
 800c0e4:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800c0e8:	ed91 7b00 	vldr	d7, [r1]
 800c0ec:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c0ee:	ec4b ab16 	vmov	d6, sl, fp
 800c0f2:	1acb      	subs	r3, r1, r3
 800c0f4:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800c0f8:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c0fc:	ed92 6b00 	vldr	d6, [r2]
 800c100:	e796      	b.n	800c030 <_strtod_l+0x3d0>
 800c102:	3116      	adds	r1, #22
 800c104:	dba8      	blt.n	800c058 <_strtod_l+0x3f8>
 800c106:	4b36      	ldr	r3, [pc, #216]	@ (800c1e0 <_strtod_l+0x580>)
 800c108:	1b3c      	subs	r4, r7, r4
 800c10a:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800c10e:	ed94 7b00 	vldr	d7, [r4]
 800c112:	ec4b ab16 	vmov	d6, sl, fp
 800c116:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800c11a:	e78b      	b.n	800c034 <_strtod_l+0x3d4>
 800c11c:	2000      	movs	r0, #0
 800c11e:	ec4b ab17 	vmov	d7, sl, fp
 800c122:	4e30      	ldr	r6, [pc, #192]	@ (800c1e4 <_strtod_l+0x584>)
 800c124:	1112      	asrs	r2, r2, #4
 800c126:	4601      	mov	r1, r0
 800c128:	2a01      	cmp	r2, #1
 800c12a:	dc23      	bgt.n	800c174 <_strtod_l+0x514>
 800c12c:	b108      	cbz	r0, 800c132 <_strtod_l+0x4d2>
 800c12e:	ec5b ab17 	vmov	sl, fp, d7
 800c132:	4a2c      	ldr	r2, [pc, #176]	@ (800c1e4 <_strtod_l+0x584>)
 800c134:	482c      	ldr	r0, [pc, #176]	@ (800c1e8 <_strtod_l+0x588>)
 800c136:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800c13a:	ed92 7b00 	vldr	d7, [r2]
 800c13e:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800c142:	ec4b ab16 	vmov	d6, sl, fp
 800c146:	4a29      	ldr	r2, [pc, #164]	@ (800c1ec <_strtod_l+0x58c>)
 800c148:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c14c:	ee17 1a90 	vmov	r1, s15
 800c150:	400a      	ands	r2, r1
 800c152:	4282      	cmp	r2, r0
 800c154:	ec5b ab17 	vmov	sl, fp, d7
 800c158:	d898      	bhi.n	800c08c <_strtod_l+0x42c>
 800c15a:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 800c15e:	4282      	cmp	r2, r0
 800c160:	bf86      	itte	hi
 800c162:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 800c1f0 <_strtod_l+0x590>
 800c166:	f04f 3aff 	movhi.w	sl, #4294967295
 800c16a:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 800c16e:	2200      	movs	r2, #0
 800c170:	9206      	str	r2, [sp, #24]
 800c172:	e076      	b.n	800c262 <_strtod_l+0x602>
 800c174:	f012 0f01 	tst.w	r2, #1
 800c178:	d004      	beq.n	800c184 <_strtod_l+0x524>
 800c17a:	ed96 6b00 	vldr	d6, [r6]
 800c17e:	2001      	movs	r0, #1
 800c180:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c184:	3101      	adds	r1, #1
 800c186:	1052      	asrs	r2, r2, #1
 800c188:	3608      	adds	r6, #8
 800c18a:	e7cd      	b.n	800c128 <_strtod_l+0x4c8>
 800c18c:	d0ef      	beq.n	800c16e <_strtod_l+0x50e>
 800c18e:	4252      	negs	r2, r2
 800c190:	f012 000f 	ands.w	r0, r2, #15
 800c194:	d00a      	beq.n	800c1ac <_strtod_l+0x54c>
 800c196:	4912      	ldr	r1, [pc, #72]	@ (800c1e0 <_strtod_l+0x580>)
 800c198:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800c19c:	ed91 7b00 	vldr	d7, [r1]
 800c1a0:	ec4b ab16 	vmov	d6, sl, fp
 800c1a4:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800c1a8:	ec5b ab17 	vmov	sl, fp, d7
 800c1ac:	1112      	asrs	r2, r2, #4
 800c1ae:	d0de      	beq.n	800c16e <_strtod_l+0x50e>
 800c1b0:	2a1f      	cmp	r2, #31
 800c1b2:	dd1f      	ble.n	800c1f4 <_strtod_l+0x594>
 800c1b4:	2400      	movs	r4, #0
 800c1b6:	4625      	mov	r5, r4
 800c1b8:	9407      	str	r4, [sp, #28]
 800c1ba:	4626      	mov	r6, r4
 800c1bc:	9a05      	ldr	r2, [sp, #20]
 800c1be:	2322      	movs	r3, #34	@ 0x22
 800c1c0:	f04f 0a00 	mov.w	sl, #0
 800c1c4:	f04f 0b00 	mov.w	fp, #0
 800c1c8:	6013      	str	r3, [r2, #0]
 800c1ca:	e76a      	b.n	800c0a2 <_strtod_l+0x442>
 800c1cc:	0800dbf9 	.word	0x0800dbf9
 800c1d0:	0800dec0 	.word	0x0800dec0
 800c1d4:	0800dbf1 	.word	0x0800dbf1
 800c1d8:	0800dc28 	.word	0x0800dc28
 800c1dc:	0800dd61 	.word	0x0800dd61
 800c1e0:	0800ddf8 	.word	0x0800ddf8
 800c1e4:	0800ddd0 	.word	0x0800ddd0
 800c1e8:	7ca00000 	.word	0x7ca00000
 800c1ec:	7ff00000 	.word	0x7ff00000
 800c1f0:	7fefffff 	.word	0x7fefffff
 800c1f4:	f012 0110 	ands.w	r1, r2, #16
 800c1f8:	bf18      	it	ne
 800c1fa:	216a      	movne	r1, #106	@ 0x6a
 800c1fc:	9106      	str	r1, [sp, #24]
 800c1fe:	ec4b ab17 	vmov	d7, sl, fp
 800c202:	49af      	ldr	r1, [pc, #700]	@ (800c4c0 <_strtod_l+0x860>)
 800c204:	2000      	movs	r0, #0
 800c206:	07d6      	lsls	r6, r2, #31
 800c208:	d504      	bpl.n	800c214 <_strtod_l+0x5b4>
 800c20a:	ed91 6b00 	vldr	d6, [r1]
 800c20e:	2001      	movs	r0, #1
 800c210:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c214:	1052      	asrs	r2, r2, #1
 800c216:	f101 0108 	add.w	r1, r1, #8
 800c21a:	d1f4      	bne.n	800c206 <_strtod_l+0x5a6>
 800c21c:	b108      	cbz	r0, 800c222 <_strtod_l+0x5c2>
 800c21e:	ec5b ab17 	vmov	sl, fp, d7
 800c222:	9a06      	ldr	r2, [sp, #24]
 800c224:	b1b2      	cbz	r2, 800c254 <_strtod_l+0x5f4>
 800c226:	f3cb 510a 	ubfx	r1, fp, #20, #11
 800c22a:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 800c22e:	2a00      	cmp	r2, #0
 800c230:	4658      	mov	r0, fp
 800c232:	dd0f      	ble.n	800c254 <_strtod_l+0x5f4>
 800c234:	2a1f      	cmp	r2, #31
 800c236:	dd55      	ble.n	800c2e4 <_strtod_l+0x684>
 800c238:	2a34      	cmp	r2, #52	@ 0x34
 800c23a:	bfde      	ittt	le
 800c23c:	f04f 32ff 	movle.w	r2, #4294967295
 800c240:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 800c244:	408a      	lslle	r2, r1
 800c246:	f04f 0a00 	mov.w	sl, #0
 800c24a:	bfcc      	ite	gt
 800c24c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800c250:	ea02 0b00 	andle.w	fp, r2, r0
 800c254:	ec4b ab17 	vmov	d7, sl, fp
 800c258:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c25c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c260:	d0a8      	beq.n	800c1b4 <_strtod_l+0x554>
 800c262:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c264:	9805      	ldr	r0, [sp, #20]
 800c266:	f8cd 9000 	str.w	r9, [sp]
 800c26a:	462a      	mov	r2, r5
 800c26c:	f7ff f8de 	bl	800b42c <__s2b>
 800c270:	9007      	str	r0, [sp, #28]
 800c272:	2800      	cmp	r0, #0
 800c274:	f43f af0a 	beq.w	800c08c <_strtod_l+0x42c>
 800c278:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c27a:	1b3f      	subs	r7, r7, r4
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	bfb4      	ite	lt
 800c280:	463b      	movlt	r3, r7
 800c282:	2300      	movge	r3, #0
 800c284:	930a      	str	r3, [sp, #40]	@ 0x28
 800c286:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c288:	ed9f bb89 	vldr	d11, [pc, #548]	@ 800c4b0 <_strtod_l+0x850>
 800c28c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800c290:	2400      	movs	r4, #0
 800c292:	930d      	str	r3, [sp, #52]	@ 0x34
 800c294:	4625      	mov	r5, r4
 800c296:	9b07      	ldr	r3, [sp, #28]
 800c298:	9805      	ldr	r0, [sp, #20]
 800c29a:	6859      	ldr	r1, [r3, #4]
 800c29c:	f7ff f81e 	bl	800b2dc <_Balloc>
 800c2a0:	4606      	mov	r6, r0
 800c2a2:	2800      	cmp	r0, #0
 800c2a4:	f43f aef6 	beq.w	800c094 <_strtod_l+0x434>
 800c2a8:	9b07      	ldr	r3, [sp, #28]
 800c2aa:	691a      	ldr	r2, [r3, #16]
 800c2ac:	ec4b ab19 	vmov	d9, sl, fp
 800c2b0:	3202      	adds	r2, #2
 800c2b2:	f103 010c 	add.w	r1, r3, #12
 800c2b6:	0092      	lsls	r2, r2, #2
 800c2b8:	300c      	adds	r0, #12
 800c2ba:	f7fe f914 	bl	800a4e6 <memcpy>
 800c2be:	eeb0 0b49 	vmov.f64	d0, d9
 800c2c2:	9805      	ldr	r0, [sp, #20]
 800c2c4:	aa14      	add	r2, sp, #80	@ 0x50
 800c2c6:	a913      	add	r1, sp, #76	@ 0x4c
 800c2c8:	f7ff fbe4 	bl	800ba94 <__d2b>
 800c2cc:	9012      	str	r0, [sp, #72]	@ 0x48
 800c2ce:	2800      	cmp	r0, #0
 800c2d0:	f43f aee0 	beq.w	800c094 <_strtod_l+0x434>
 800c2d4:	9805      	ldr	r0, [sp, #20]
 800c2d6:	2101      	movs	r1, #1
 800c2d8:	f7ff f93e 	bl	800b558 <__i2b>
 800c2dc:	4605      	mov	r5, r0
 800c2de:	b940      	cbnz	r0, 800c2f2 <_strtod_l+0x692>
 800c2e0:	2500      	movs	r5, #0
 800c2e2:	e6d7      	b.n	800c094 <_strtod_l+0x434>
 800c2e4:	f04f 31ff 	mov.w	r1, #4294967295
 800c2e8:	fa01 f202 	lsl.w	r2, r1, r2
 800c2ec:	ea02 0a0a 	and.w	sl, r2, sl
 800c2f0:	e7b0      	b.n	800c254 <_strtod_l+0x5f4>
 800c2f2:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 800c2f4:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800c2f6:	2f00      	cmp	r7, #0
 800c2f8:	bfab      	itete	ge
 800c2fa:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 800c2fc:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 800c2fe:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 800c302:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 800c306:	bfac      	ite	ge
 800c308:	eb07 0903 	addge.w	r9, r7, r3
 800c30c:	eba3 0807 	sublt.w	r8, r3, r7
 800c310:	9b06      	ldr	r3, [sp, #24]
 800c312:	1aff      	subs	r7, r7, r3
 800c314:	4417      	add	r7, r2
 800c316:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 800c31a:	4a6a      	ldr	r2, [pc, #424]	@ (800c4c4 <_strtod_l+0x864>)
 800c31c:	3f01      	subs	r7, #1
 800c31e:	4297      	cmp	r7, r2
 800c320:	da51      	bge.n	800c3c6 <_strtod_l+0x766>
 800c322:	1bd1      	subs	r1, r2, r7
 800c324:	291f      	cmp	r1, #31
 800c326:	eba3 0301 	sub.w	r3, r3, r1
 800c32a:	f04f 0201 	mov.w	r2, #1
 800c32e:	dc3e      	bgt.n	800c3ae <_strtod_l+0x74e>
 800c330:	408a      	lsls	r2, r1
 800c332:	920c      	str	r2, [sp, #48]	@ 0x30
 800c334:	2200      	movs	r2, #0
 800c336:	920b      	str	r2, [sp, #44]	@ 0x2c
 800c338:	eb09 0703 	add.w	r7, r9, r3
 800c33c:	4498      	add	r8, r3
 800c33e:	9b06      	ldr	r3, [sp, #24]
 800c340:	45b9      	cmp	r9, r7
 800c342:	4498      	add	r8, r3
 800c344:	464b      	mov	r3, r9
 800c346:	bfa8      	it	ge
 800c348:	463b      	movge	r3, r7
 800c34a:	4543      	cmp	r3, r8
 800c34c:	bfa8      	it	ge
 800c34e:	4643      	movge	r3, r8
 800c350:	2b00      	cmp	r3, #0
 800c352:	bfc2      	ittt	gt
 800c354:	1aff      	subgt	r7, r7, r3
 800c356:	eba8 0803 	subgt.w	r8, r8, r3
 800c35a:	eba9 0903 	subgt.w	r9, r9, r3
 800c35e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c360:	2b00      	cmp	r3, #0
 800c362:	dd16      	ble.n	800c392 <_strtod_l+0x732>
 800c364:	4629      	mov	r1, r5
 800c366:	9805      	ldr	r0, [sp, #20]
 800c368:	461a      	mov	r2, r3
 800c36a:	f7ff f9ad 	bl	800b6c8 <__pow5mult>
 800c36e:	4605      	mov	r5, r0
 800c370:	2800      	cmp	r0, #0
 800c372:	d0b5      	beq.n	800c2e0 <_strtod_l+0x680>
 800c374:	4601      	mov	r1, r0
 800c376:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800c378:	9805      	ldr	r0, [sp, #20]
 800c37a:	f7ff f903 	bl	800b584 <__multiply>
 800c37e:	900f      	str	r0, [sp, #60]	@ 0x3c
 800c380:	2800      	cmp	r0, #0
 800c382:	f43f ae87 	beq.w	800c094 <_strtod_l+0x434>
 800c386:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800c388:	9805      	ldr	r0, [sp, #20]
 800c38a:	f7fe ffe7 	bl	800b35c <_Bfree>
 800c38e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c390:	9312      	str	r3, [sp, #72]	@ 0x48
 800c392:	2f00      	cmp	r7, #0
 800c394:	dc1b      	bgt.n	800c3ce <_strtod_l+0x76e>
 800c396:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c398:	2b00      	cmp	r3, #0
 800c39a:	dd21      	ble.n	800c3e0 <_strtod_l+0x780>
 800c39c:	4631      	mov	r1, r6
 800c39e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c3a0:	9805      	ldr	r0, [sp, #20]
 800c3a2:	f7ff f991 	bl	800b6c8 <__pow5mult>
 800c3a6:	4606      	mov	r6, r0
 800c3a8:	b9d0      	cbnz	r0, 800c3e0 <_strtod_l+0x780>
 800c3aa:	2600      	movs	r6, #0
 800c3ac:	e672      	b.n	800c094 <_strtod_l+0x434>
 800c3ae:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 800c3b2:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 800c3b6:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 800c3ba:	37e2      	adds	r7, #226	@ 0xe2
 800c3bc:	fa02 f107 	lsl.w	r1, r2, r7
 800c3c0:	910b      	str	r1, [sp, #44]	@ 0x2c
 800c3c2:	920c      	str	r2, [sp, #48]	@ 0x30
 800c3c4:	e7b8      	b.n	800c338 <_strtod_l+0x6d8>
 800c3c6:	2200      	movs	r2, #0
 800c3c8:	920b      	str	r2, [sp, #44]	@ 0x2c
 800c3ca:	2201      	movs	r2, #1
 800c3cc:	e7f9      	b.n	800c3c2 <_strtod_l+0x762>
 800c3ce:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800c3d0:	9805      	ldr	r0, [sp, #20]
 800c3d2:	463a      	mov	r2, r7
 800c3d4:	f7ff f9d2 	bl	800b77c <__lshift>
 800c3d8:	9012      	str	r0, [sp, #72]	@ 0x48
 800c3da:	2800      	cmp	r0, #0
 800c3dc:	d1db      	bne.n	800c396 <_strtod_l+0x736>
 800c3de:	e659      	b.n	800c094 <_strtod_l+0x434>
 800c3e0:	f1b8 0f00 	cmp.w	r8, #0
 800c3e4:	dd07      	ble.n	800c3f6 <_strtod_l+0x796>
 800c3e6:	4631      	mov	r1, r6
 800c3e8:	9805      	ldr	r0, [sp, #20]
 800c3ea:	4642      	mov	r2, r8
 800c3ec:	f7ff f9c6 	bl	800b77c <__lshift>
 800c3f0:	4606      	mov	r6, r0
 800c3f2:	2800      	cmp	r0, #0
 800c3f4:	d0d9      	beq.n	800c3aa <_strtod_l+0x74a>
 800c3f6:	f1b9 0f00 	cmp.w	r9, #0
 800c3fa:	dd08      	ble.n	800c40e <_strtod_l+0x7ae>
 800c3fc:	4629      	mov	r1, r5
 800c3fe:	9805      	ldr	r0, [sp, #20]
 800c400:	464a      	mov	r2, r9
 800c402:	f7ff f9bb 	bl	800b77c <__lshift>
 800c406:	4605      	mov	r5, r0
 800c408:	2800      	cmp	r0, #0
 800c40a:	f43f ae43 	beq.w	800c094 <_strtod_l+0x434>
 800c40e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800c410:	9805      	ldr	r0, [sp, #20]
 800c412:	4632      	mov	r2, r6
 800c414:	f7ff fa3a 	bl	800b88c <__mdiff>
 800c418:	4604      	mov	r4, r0
 800c41a:	2800      	cmp	r0, #0
 800c41c:	f43f ae3a 	beq.w	800c094 <_strtod_l+0x434>
 800c420:	2300      	movs	r3, #0
 800c422:	f8d0 800c 	ldr.w	r8, [r0, #12]
 800c426:	60c3      	str	r3, [r0, #12]
 800c428:	4629      	mov	r1, r5
 800c42a:	f7ff fa13 	bl	800b854 <__mcmp>
 800c42e:	2800      	cmp	r0, #0
 800c430:	da4c      	bge.n	800c4cc <_strtod_l+0x86c>
 800c432:	ea58 080a 	orrs.w	r8, r8, sl
 800c436:	d172      	bne.n	800c51e <_strtod_l+0x8be>
 800c438:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d16e      	bne.n	800c51e <_strtod_l+0x8be>
 800c440:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c444:	0d1b      	lsrs	r3, r3, #20
 800c446:	051b      	lsls	r3, r3, #20
 800c448:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800c44c:	d967      	bls.n	800c51e <_strtod_l+0x8be>
 800c44e:	6963      	ldr	r3, [r4, #20]
 800c450:	b913      	cbnz	r3, 800c458 <_strtod_l+0x7f8>
 800c452:	6923      	ldr	r3, [r4, #16]
 800c454:	2b01      	cmp	r3, #1
 800c456:	dd62      	ble.n	800c51e <_strtod_l+0x8be>
 800c458:	4621      	mov	r1, r4
 800c45a:	2201      	movs	r2, #1
 800c45c:	9805      	ldr	r0, [sp, #20]
 800c45e:	f7ff f98d 	bl	800b77c <__lshift>
 800c462:	4629      	mov	r1, r5
 800c464:	4604      	mov	r4, r0
 800c466:	f7ff f9f5 	bl	800b854 <__mcmp>
 800c46a:	2800      	cmp	r0, #0
 800c46c:	dd57      	ble.n	800c51e <_strtod_l+0x8be>
 800c46e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c472:	9a06      	ldr	r2, [sp, #24]
 800c474:	0d1b      	lsrs	r3, r3, #20
 800c476:	051b      	lsls	r3, r3, #20
 800c478:	2a00      	cmp	r2, #0
 800c47a:	d06e      	beq.n	800c55a <_strtod_l+0x8fa>
 800c47c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800c480:	d86b      	bhi.n	800c55a <_strtod_l+0x8fa>
 800c482:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800c486:	f67f ae99 	bls.w	800c1bc <_strtod_l+0x55c>
 800c48a:	ed9f 7b0b 	vldr	d7, [pc, #44]	@ 800c4b8 <_strtod_l+0x858>
 800c48e:	ec4b ab16 	vmov	d6, sl, fp
 800c492:	4b0d      	ldr	r3, [pc, #52]	@ (800c4c8 <_strtod_l+0x868>)
 800c494:	ee26 7b07 	vmul.f64	d7, d6, d7
 800c498:	ee17 2a90 	vmov	r2, s15
 800c49c:	4013      	ands	r3, r2
 800c49e:	ec5b ab17 	vmov	sl, fp, d7
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	f47f ae01 	bne.w	800c0aa <_strtod_l+0x44a>
 800c4a8:	9a05      	ldr	r2, [sp, #20]
 800c4aa:	2322      	movs	r3, #34	@ 0x22
 800c4ac:	6013      	str	r3, [r2, #0]
 800c4ae:	e5fc      	b.n	800c0aa <_strtod_l+0x44a>
 800c4b0:	ffc00000 	.word	0xffc00000
 800c4b4:	41dfffff 	.word	0x41dfffff
 800c4b8:	00000000 	.word	0x00000000
 800c4bc:	39500000 	.word	0x39500000
 800c4c0:	0800dee8 	.word	0x0800dee8
 800c4c4:	fffffc02 	.word	0xfffffc02
 800c4c8:	7ff00000 	.word	0x7ff00000
 800c4cc:	46d9      	mov	r9, fp
 800c4ce:	d15d      	bne.n	800c58c <_strtod_l+0x92c>
 800c4d0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c4d4:	f1b8 0f00 	cmp.w	r8, #0
 800c4d8:	d02a      	beq.n	800c530 <_strtod_l+0x8d0>
 800c4da:	4aa9      	ldr	r2, [pc, #676]	@ (800c780 <_strtod_l+0xb20>)
 800c4dc:	4293      	cmp	r3, r2
 800c4de:	d12a      	bne.n	800c536 <_strtod_l+0x8d6>
 800c4e0:	9b06      	ldr	r3, [sp, #24]
 800c4e2:	4652      	mov	r2, sl
 800c4e4:	b1fb      	cbz	r3, 800c526 <_strtod_l+0x8c6>
 800c4e6:	4ba7      	ldr	r3, [pc, #668]	@ (800c784 <_strtod_l+0xb24>)
 800c4e8:	ea0b 0303 	and.w	r3, fp, r3
 800c4ec:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800c4f0:	f04f 31ff 	mov.w	r1, #4294967295
 800c4f4:	d81a      	bhi.n	800c52c <_strtod_l+0x8cc>
 800c4f6:	0d1b      	lsrs	r3, r3, #20
 800c4f8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c4fc:	fa01 f303 	lsl.w	r3, r1, r3
 800c500:	429a      	cmp	r2, r3
 800c502:	d118      	bne.n	800c536 <_strtod_l+0x8d6>
 800c504:	4ba0      	ldr	r3, [pc, #640]	@ (800c788 <_strtod_l+0xb28>)
 800c506:	4599      	cmp	r9, r3
 800c508:	d102      	bne.n	800c510 <_strtod_l+0x8b0>
 800c50a:	3201      	adds	r2, #1
 800c50c:	f43f adc2 	beq.w	800c094 <_strtod_l+0x434>
 800c510:	4b9c      	ldr	r3, [pc, #624]	@ (800c784 <_strtod_l+0xb24>)
 800c512:	ea09 0303 	and.w	r3, r9, r3
 800c516:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 800c51a:	f04f 0a00 	mov.w	sl, #0
 800c51e:	9b06      	ldr	r3, [sp, #24]
 800c520:	2b00      	cmp	r3, #0
 800c522:	d1b2      	bne.n	800c48a <_strtod_l+0x82a>
 800c524:	e5c1      	b.n	800c0aa <_strtod_l+0x44a>
 800c526:	f04f 33ff 	mov.w	r3, #4294967295
 800c52a:	e7e9      	b.n	800c500 <_strtod_l+0x8a0>
 800c52c:	460b      	mov	r3, r1
 800c52e:	e7e7      	b.n	800c500 <_strtod_l+0x8a0>
 800c530:	ea53 030a 	orrs.w	r3, r3, sl
 800c534:	d09b      	beq.n	800c46e <_strtod_l+0x80e>
 800c536:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c538:	b1c3      	cbz	r3, 800c56c <_strtod_l+0x90c>
 800c53a:	ea13 0f09 	tst.w	r3, r9
 800c53e:	d0ee      	beq.n	800c51e <_strtod_l+0x8be>
 800c540:	9a06      	ldr	r2, [sp, #24]
 800c542:	4650      	mov	r0, sl
 800c544:	4659      	mov	r1, fp
 800c546:	f1b8 0f00 	cmp.w	r8, #0
 800c54a:	d013      	beq.n	800c574 <_strtod_l+0x914>
 800c54c:	f7ff fb6d 	bl	800bc2a <sulp>
 800c550:	ee39 7b00 	vadd.f64	d7, d9, d0
 800c554:	ec5b ab17 	vmov	sl, fp, d7
 800c558:	e7e1      	b.n	800c51e <_strtod_l+0x8be>
 800c55a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800c55e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800c562:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800c566:	f04f 3aff 	mov.w	sl, #4294967295
 800c56a:	e7d8      	b.n	800c51e <_strtod_l+0x8be>
 800c56c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c56e:	ea13 0f0a 	tst.w	r3, sl
 800c572:	e7e4      	b.n	800c53e <_strtod_l+0x8de>
 800c574:	f7ff fb59 	bl	800bc2a <sulp>
 800c578:	ee39 0b40 	vsub.f64	d0, d9, d0
 800c57c:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800c580:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c584:	ec5b ab10 	vmov	sl, fp, d0
 800c588:	d1c9      	bne.n	800c51e <_strtod_l+0x8be>
 800c58a:	e617      	b.n	800c1bc <_strtod_l+0x55c>
 800c58c:	4629      	mov	r1, r5
 800c58e:	4620      	mov	r0, r4
 800c590:	f7ff fad8 	bl	800bb44 <__ratio>
 800c594:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 800c598:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800c59c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c5a0:	d85d      	bhi.n	800c65e <_strtod_l+0x9fe>
 800c5a2:	f1b8 0f00 	cmp.w	r8, #0
 800c5a6:	d164      	bne.n	800c672 <_strtod_l+0xa12>
 800c5a8:	f1ba 0f00 	cmp.w	sl, #0
 800c5ac:	d14b      	bne.n	800c646 <_strtod_l+0x9e6>
 800c5ae:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c5b2:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d160      	bne.n	800c67c <_strtod_l+0xa1c>
 800c5ba:	eeb4 0bc8 	vcmpe.f64	d0, d8
 800c5be:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800c5c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c5c6:	d401      	bmi.n	800c5cc <_strtod_l+0x96c>
 800c5c8:	ee20 8b08 	vmul.f64	d8, d0, d8
 800c5cc:	eeb1 ab48 	vneg.f64	d10, d8
 800c5d0:	486c      	ldr	r0, [pc, #432]	@ (800c784 <_strtod_l+0xb24>)
 800c5d2:	496e      	ldr	r1, [pc, #440]	@ (800c78c <_strtod_l+0xb2c>)
 800c5d4:	ea09 0700 	and.w	r7, r9, r0
 800c5d8:	428f      	cmp	r7, r1
 800c5da:	ec53 2b1a 	vmov	r2, r3, d10
 800c5de:	d17d      	bne.n	800c6dc <_strtod_l+0xa7c>
 800c5e0:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 800c5e4:	ec4b ab1c 	vmov	d12, sl, fp
 800c5e8:	eeb0 0b4c 	vmov.f64	d0, d12
 800c5ec:	f7ff f9e2 	bl	800b9b4 <__ulp>
 800c5f0:	4864      	ldr	r0, [pc, #400]	@ (800c784 <_strtod_l+0xb24>)
 800c5f2:	eea0 cb0a 	vfma.f64	d12, d0, d10
 800c5f6:	ee1c 3a90 	vmov	r3, s25
 800c5fa:	4a65      	ldr	r2, [pc, #404]	@ (800c790 <_strtod_l+0xb30>)
 800c5fc:	ea03 0100 	and.w	r1, r3, r0
 800c600:	4291      	cmp	r1, r2
 800c602:	ec5b ab1c 	vmov	sl, fp, d12
 800c606:	d93c      	bls.n	800c682 <_strtod_l+0xa22>
 800c608:	ee19 2a90 	vmov	r2, s19
 800c60c:	4b5e      	ldr	r3, [pc, #376]	@ (800c788 <_strtod_l+0xb28>)
 800c60e:	429a      	cmp	r2, r3
 800c610:	d104      	bne.n	800c61c <_strtod_l+0x9bc>
 800c612:	ee19 3a10 	vmov	r3, s18
 800c616:	3301      	adds	r3, #1
 800c618:	f43f ad3c 	beq.w	800c094 <_strtod_l+0x434>
 800c61c:	f8df b168 	ldr.w	fp, [pc, #360]	@ 800c788 <_strtod_l+0xb28>
 800c620:	f04f 3aff 	mov.w	sl, #4294967295
 800c624:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800c626:	9805      	ldr	r0, [sp, #20]
 800c628:	f7fe fe98 	bl	800b35c <_Bfree>
 800c62c:	9805      	ldr	r0, [sp, #20]
 800c62e:	4631      	mov	r1, r6
 800c630:	f7fe fe94 	bl	800b35c <_Bfree>
 800c634:	9805      	ldr	r0, [sp, #20]
 800c636:	4629      	mov	r1, r5
 800c638:	f7fe fe90 	bl	800b35c <_Bfree>
 800c63c:	9805      	ldr	r0, [sp, #20]
 800c63e:	4621      	mov	r1, r4
 800c640:	f7fe fe8c 	bl	800b35c <_Bfree>
 800c644:	e627      	b.n	800c296 <_strtod_l+0x636>
 800c646:	f1ba 0f01 	cmp.w	sl, #1
 800c64a:	d103      	bne.n	800c654 <_strtod_l+0x9f4>
 800c64c:	f1bb 0f00 	cmp.w	fp, #0
 800c650:	f43f adb4 	beq.w	800c1bc <_strtod_l+0x55c>
 800c654:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800c658:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800c65c:	e7b8      	b.n	800c5d0 <_strtod_l+0x970>
 800c65e:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800c662:	ee20 8b08 	vmul.f64	d8, d0, d8
 800c666:	f1b8 0f00 	cmp.w	r8, #0
 800c66a:	d0af      	beq.n	800c5cc <_strtod_l+0x96c>
 800c66c:	eeb0 ab48 	vmov.f64	d10, d8
 800c670:	e7ae      	b.n	800c5d0 <_strtod_l+0x970>
 800c672:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 800c676:	eeb0 8b4a 	vmov.f64	d8, d10
 800c67a:	e7a9      	b.n	800c5d0 <_strtod_l+0x970>
 800c67c:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800c680:	e7a6      	b.n	800c5d0 <_strtod_l+0x970>
 800c682:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800c686:	9b06      	ldr	r3, [sp, #24]
 800c688:	46d9      	mov	r9, fp
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d1ca      	bne.n	800c624 <_strtod_l+0x9c4>
 800c68e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c692:	0d1b      	lsrs	r3, r3, #20
 800c694:	051b      	lsls	r3, r3, #20
 800c696:	429f      	cmp	r7, r3
 800c698:	d1c4      	bne.n	800c624 <_strtod_l+0x9c4>
 800c69a:	ec51 0b18 	vmov	r0, r1, d8
 800c69e:	f7f3 fffb 	bl	8000698 <__aeabi_d2lz>
 800c6a2:	f7f3 ffb3 	bl	800060c <__aeabi_l2d>
 800c6a6:	f3cb 0913 	ubfx	r9, fp, #0, #20
 800c6aa:	ec41 0b17 	vmov	d7, r0, r1
 800c6ae:	ea49 090a 	orr.w	r9, r9, sl
 800c6b2:	ea59 0908 	orrs.w	r9, r9, r8
 800c6b6:	ee38 8b47 	vsub.f64	d8, d8, d7
 800c6ba:	d03c      	beq.n	800c736 <_strtod_l+0xad6>
 800c6bc:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 800c768 <_strtod_l+0xb08>
 800c6c0:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800c6c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c6c8:	f53f acef 	bmi.w	800c0aa <_strtod_l+0x44a>
 800c6cc:	ed9f 7b28 	vldr	d7, [pc, #160]	@ 800c770 <_strtod_l+0xb10>
 800c6d0:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800c6d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c6d8:	dda4      	ble.n	800c624 <_strtod_l+0x9c4>
 800c6da:	e4e6      	b.n	800c0aa <_strtod_l+0x44a>
 800c6dc:	9906      	ldr	r1, [sp, #24]
 800c6de:	b1e1      	cbz	r1, 800c71a <_strtod_l+0xaba>
 800c6e0:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 800c6e4:	d819      	bhi.n	800c71a <_strtod_l+0xaba>
 800c6e6:	eeb4 8bcb 	vcmpe.f64	d8, d11
 800c6ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c6ee:	d811      	bhi.n	800c714 <_strtod_l+0xab4>
 800c6f0:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 800c6f4:	ee18 3a10 	vmov	r3, s16
 800c6f8:	2b01      	cmp	r3, #1
 800c6fa:	bf38      	it	cc
 800c6fc:	2301      	movcc	r3, #1
 800c6fe:	ee08 3a10 	vmov	s16, r3
 800c702:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 800c706:	f1b8 0f00 	cmp.w	r8, #0
 800c70a:	d111      	bne.n	800c730 <_strtod_l+0xad0>
 800c70c:	eeb1 7b48 	vneg.f64	d7, d8
 800c710:	ec53 2b17 	vmov	r2, r3, d7
 800c714:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 800c718:	1bcb      	subs	r3, r1, r7
 800c71a:	eeb0 0b49 	vmov.f64	d0, d9
 800c71e:	ec43 2b1a 	vmov	d10, r2, r3
 800c722:	f7ff f947 	bl	800b9b4 <__ulp>
 800c726:	eeaa 9b00 	vfma.f64	d9, d10, d0
 800c72a:	ec5b ab19 	vmov	sl, fp, d9
 800c72e:	e7aa      	b.n	800c686 <_strtod_l+0xa26>
 800c730:	eeb0 7b48 	vmov.f64	d7, d8
 800c734:	e7ec      	b.n	800c710 <_strtod_l+0xab0>
 800c736:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 800c778 <_strtod_l+0xb18>
 800c73a:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800c73e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c742:	f57f af6f 	bpl.w	800c624 <_strtod_l+0x9c4>
 800c746:	e4b0      	b.n	800c0aa <_strtod_l+0x44a>
 800c748:	2300      	movs	r3, #0
 800c74a:	9308      	str	r3, [sp, #32]
 800c74c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c74e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c750:	6013      	str	r3, [r2, #0]
 800c752:	f7ff bac4 	b.w	800bcde <_strtod_l+0x7e>
 800c756:	2a65      	cmp	r2, #101	@ 0x65
 800c758:	f43f abbf 	beq.w	800beda <_strtod_l+0x27a>
 800c75c:	2a45      	cmp	r2, #69	@ 0x45
 800c75e:	f43f abbc 	beq.w	800beda <_strtod_l+0x27a>
 800c762:	2101      	movs	r1, #1
 800c764:	f7ff bbf4 	b.w	800bf50 <_strtod_l+0x2f0>
 800c768:	94a03595 	.word	0x94a03595
 800c76c:	3fdfffff 	.word	0x3fdfffff
 800c770:	35afe535 	.word	0x35afe535
 800c774:	3fe00000 	.word	0x3fe00000
 800c778:	94a03595 	.word	0x94a03595
 800c77c:	3fcfffff 	.word	0x3fcfffff
 800c780:	000fffff 	.word	0x000fffff
 800c784:	7ff00000 	.word	0x7ff00000
 800c788:	7fefffff 	.word	0x7fefffff
 800c78c:	7fe00000 	.word	0x7fe00000
 800c790:	7c9fffff 	.word	0x7c9fffff

0800c794 <_strtod_r>:
 800c794:	4b01      	ldr	r3, [pc, #4]	@ (800c79c <_strtod_r+0x8>)
 800c796:	f7ff ba63 	b.w	800bc60 <_strtod_l>
 800c79a:	bf00      	nop
 800c79c:	2000006c 	.word	0x2000006c

0800c7a0 <_strtol_l.isra.0>:
 800c7a0:	2b24      	cmp	r3, #36	@ 0x24
 800c7a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c7a6:	4686      	mov	lr, r0
 800c7a8:	4690      	mov	r8, r2
 800c7aa:	d801      	bhi.n	800c7b0 <_strtol_l.isra.0+0x10>
 800c7ac:	2b01      	cmp	r3, #1
 800c7ae:	d106      	bne.n	800c7be <_strtol_l.isra.0+0x1e>
 800c7b0:	f7fd fe6c 	bl	800a48c <__errno>
 800c7b4:	2316      	movs	r3, #22
 800c7b6:	6003      	str	r3, [r0, #0]
 800c7b8:	2000      	movs	r0, #0
 800c7ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c7be:	4834      	ldr	r0, [pc, #208]	@ (800c890 <_strtol_l.isra.0+0xf0>)
 800c7c0:	460d      	mov	r5, r1
 800c7c2:	462a      	mov	r2, r5
 800c7c4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c7c8:	5d06      	ldrb	r6, [r0, r4]
 800c7ca:	f016 0608 	ands.w	r6, r6, #8
 800c7ce:	d1f8      	bne.n	800c7c2 <_strtol_l.isra.0+0x22>
 800c7d0:	2c2d      	cmp	r4, #45	@ 0x2d
 800c7d2:	d110      	bne.n	800c7f6 <_strtol_l.isra.0+0x56>
 800c7d4:	782c      	ldrb	r4, [r5, #0]
 800c7d6:	2601      	movs	r6, #1
 800c7d8:	1c95      	adds	r5, r2, #2
 800c7da:	f033 0210 	bics.w	r2, r3, #16
 800c7de:	d115      	bne.n	800c80c <_strtol_l.isra.0+0x6c>
 800c7e0:	2c30      	cmp	r4, #48	@ 0x30
 800c7e2:	d10d      	bne.n	800c800 <_strtol_l.isra.0+0x60>
 800c7e4:	782a      	ldrb	r2, [r5, #0]
 800c7e6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c7ea:	2a58      	cmp	r2, #88	@ 0x58
 800c7ec:	d108      	bne.n	800c800 <_strtol_l.isra.0+0x60>
 800c7ee:	786c      	ldrb	r4, [r5, #1]
 800c7f0:	3502      	adds	r5, #2
 800c7f2:	2310      	movs	r3, #16
 800c7f4:	e00a      	b.n	800c80c <_strtol_l.isra.0+0x6c>
 800c7f6:	2c2b      	cmp	r4, #43	@ 0x2b
 800c7f8:	bf04      	itt	eq
 800c7fa:	782c      	ldrbeq	r4, [r5, #0]
 800c7fc:	1c95      	addeq	r5, r2, #2
 800c7fe:	e7ec      	b.n	800c7da <_strtol_l.isra.0+0x3a>
 800c800:	2b00      	cmp	r3, #0
 800c802:	d1f6      	bne.n	800c7f2 <_strtol_l.isra.0+0x52>
 800c804:	2c30      	cmp	r4, #48	@ 0x30
 800c806:	bf14      	ite	ne
 800c808:	230a      	movne	r3, #10
 800c80a:	2308      	moveq	r3, #8
 800c80c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800c810:	f10c 3cff 	add.w	ip, ip, #4294967295
 800c814:	2200      	movs	r2, #0
 800c816:	fbbc f9f3 	udiv	r9, ip, r3
 800c81a:	4610      	mov	r0, r2
 800c81c:	fb03 ca19 	mls	sl, r3, r9, ip
 800c820:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800c824:	2f09      	cmp	r7, #9
 800c826:	d80f      	bhi.n	800c848 <_strtol_l.isra.0+0xa8>
 800c828:	463c      	mov	r4, r7
 800c82a:	42a3      	cmp	r3, r4
 800c82c:	dd1b      	ble.n	800c866 <_strtol_l.isra.0+0xc6>
 800c82e:	1c57      	adds	r7, r2, #1
 800c830:	d007      	beq.n	800c842 <_strtol_l.isra.0+0xa2>
 800c832:	4581      	cmp	r9, r0
 800c834:	d314      	bcc.n	800c860 <_strtol_l.isra.0+0xc0>
 800c836:	d101      	bne.n	800c83c <_strtol_l.isra.0+0x9c>
 800c838:	45a2      	cmp	sl, r4
 800c83a:	db11      	blt.n	800c860 <_strtol_l.isra.0+0xc0>
 800c83c:	fb00 4003 	mla	r0, r0, r3, r4
 800c840:	2201      	movs	r2, #1
 800c842:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c846:	e7eb      	b.n	800c820 <_strtol_l.isra.0+0x80>
 800c848:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800c84c:	2f19      	cmp	r7, #25
 800c84e:	d801      	bhi.n	800c854 <_strtol_l.isra.0+0xb4>
 800c850:	3c37      	subs	r4, #55	@ 0x37
 800c852:	e7ea      	b.n	800c82a <_strtol_l.isra.0+0x8a>
 800c854:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800c858:	2f19      	cmp	r7, #25
 800c85a:	d804      	bhi.n	800c866 <_strtol_l.isra.0+0xc6>
 800c85c:	3c57      	subs	r4, #87	@ 0x57
 800c85e:	e7e4      	b.n	800c82a <_strtol_l.isra.0+0x8a>
 800c860:	f04f 32ff 	mov.w	r2, #4294967295
 800c864:	e7ed      	b.n	800c842 <_strtol_l.isra.0+0xa2>
 800c866:	1c53      	adds	r3, r2, #1
 800c868:	d108      	bne.n	800c87c <_strtol_l.isra.0+0xdc>
 800c86a:	2322      	movs	r3, #34	@ 0x22
 800c86c:	f8ce 3000 	str.w	r3, [lr]
 800c870:	4660      	mov	r0, ip
 800c872:	f1b8 0f00 	cmp.w	r8, #0
 800c876:	d0a0      	beq.n	800c7ba <_strtol_l.isra.0+0x1a>
 800c878:	1e69      	subs	r1, r5, #1
 800c87a:	e006      	b.n	800c88a <_strtol_l.isra.0+0xea>
 800c87c:	b106      	cbz	r6, 800c880 <_strtol_l.isra.0+0xe0>
 800c87e:	4240      	negs	r0, r0
 800c880:	f1b8 0f00 	cmp.w	r8, #0
 800c884:	d099      	beq.n	800c7ba <_strtol_l.isra.0+0x1a>
 800c886:	2a00      	cmp	r2, #0
 800c888:	d1f6      	bne.n	800c878 <_strtol_l.isra.0+0xd8>
 800c88a:	f8c8 1000 	str.w	r1, [r8]
 800c88e:	e794      	b.n	800c7ba <_strtol_l.isra.0+0x1a>
 800c890:	0800df11 	.word	0x0800df11

0800c894 <_strtol_r>:
 800c894:	f7ff bf84 	b.w	800c7a0 <_strtol_l.isra.0>

0800c898 <__ssputs_r>:
 800c898:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c89c:	688e      	ldr	r6, [r1, #8]
 800c89e:	461f      	mov	r7, r3
 800c8a0:	42be      	cmp	r6, r7
 800c8a2:	680b      	ldr	r3, [r1, #0]
 800c8a4:	4682      	mov	sl, r0
 800c8a6:	460c      	mov	r4, r1
 800c8a8:	4690      	mov	r8, r2
 800c8aa:	d82d      	bhi.n	800c908 <__ssputs_r+0x70>
 800c8ac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c8b0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c8b4:	d026      	beq.n	800c904 <__ssputs_r+0x6c>
 800c8b6:	6965      	ldr	r5, [r4, #20]
 800c8b8:	6909      	ldr	r1, [r1, #16]
 800c8ba:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c8be:	eba3 0901 	sub.w	r9, r3, r1
 800c8c2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c8c6:	1c7b      	adds	r3, r7, #1
 800c8c8:	444b      	add	r3, r9
 800c8ca:	106d      	asrs	r5, r5, #1
 800c8cc:	429d      	cmp	r5, r3
 800c8ce:	bf38      	it	cc
 800c8d0:	461d      	movcc	r5, r3
 800c8d2:	0553      	lsls	r3, r2, #21
 800c8d4:	d527      	bpl.n	800c926 <__ssputs_r+0x8e>
 800c8d6:	4629      	mov	r1, r5
 800c8d8:	f7fe fc74 	bl	800b1c4 <_malloc_r>
 800c8dc:	4606      	mov	r6, r0
 800c8de:	b360      	cbz	r0, 800c93a <__ssputs_r+0xa2>
 800c8e0:	6921      	ldr	r1, [r4, #16]
 800c8e2:	464a      	mov	r2, r9
 800c8e4:	f7fd fdff 	bl	800a4e6 <memcpy>
 800c8e8:	89a3      	ldrh	r3, [r4, #12]
 800c8ea:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c8ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c8f2:	81a3      	strh	r3, [r4, #12]
 800c8f4:	6126      	str	r6, [r4, #16]
 800c8f6:	6165      	str	r5, [r4, #20]
 800c8f8:	444e      	add	r6, r9
 800c8fa:	eba5 0509 	sub.w	r5, r5, r9
 800c8fe:	6026      	str	r6, [r4, #0]
 800c900:	60a5      	str	r5, [r4, #8]
 800c902:	463e      	mov	r6, r7
 800c904:	42be      	cmp	r6, r7
 800c906:	d900      	bls.n	800c90a <__ssputs_r+0x72>
 800c908:	463e      	mov	r6, r7
 800c90a:	6820      	ldr	r0, [r4, #0]
 800c90c:	4632      	mov	r2, r6
 800c90e:	4641      	mov	r1, r8
 800c910:	f000 f9c6 	bl	800cca0 <memmove>
 800c914:	68a3      	ldr	r3, [r4, #8]
 800c916:	1b9b      	subs	r3, r3, r6
 800c918:	60a3      	str	r3, [r4, #8]
 800c91a:	6823      	ldr	r3, [r4, #0]
 800c91c:	4433      	add	r3, r6
 800c91e:	6023      	str	r3, [r4, #0]
 800c920:	2000      	movs	r0, #0
 800c922:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c926:	462a      	mov	r2, r5
 800c928:	f000 fd7b 	bl	800d422 <_realloc_r>
 800c92c:	4606      	mov	r6, r0
 800c92e:	2800      	cmp	r0, #0
 800c930:	d1e0      	bne.n	800c8f4 <__ssputs_r+0x5c>
 800c932:	6921      	ldr	r1, [r4, #16]
 800c934:	4650      	mov	r0, sl
 800c936:	f7fe fbd1 	bl	800b0dc <_free_r>
 800c93a:	230c      	movs	r3, #12
 800c93c:	f8ca 3000 	str.w	r3, [sl]
 800c940:	89a3      	ldrh	r3, [r4, #12]
 800c942:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c946:	81a3      	strh	r3, [r4, #12]
 800c948:	f04f 30ff 	mov.w	r0, #4294967295
 800c94c:	e7e9      	b.n	800c922 <__ssputs_r+0x8a>
	...

0800c950 <_svfiprintf_r>:
 800c950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c954:	4698      	mov	r8, r3
 800c956:	898b      	ldrh	r3, [r1, #12]
 800c958:	061b      	lsls	r3, r3, #24
 800c95a:	b09d      	sub	sp, #116	@ 0x74
 800c95c:	4607      	mov	r7, r0
 800c95e:	460d      	mov	r5, r1
 800c960:	4614      	mov	r4, r2
 800c962:	d510      	bpl.n	800c986 <_svfiprintf_r+0x36>
 800c964:	690b      	ldr	r3, [r1, #16]
 800c966:	b973      	cbnz	r3, 800c986 <_svfiprintf_r+0x36>
 800c968:	2140      	movs	r1, #64	@ 0x40
 800c96a:	f7fe fc2b 	bl	800b1c4 <_malloc_r>
 800c96e:	6028      	str	r0, [r5, #0]
 800c970:	6128      	str	r0, [r5, #16]
 800c972:	b930      	cbnz	r0, 800c982 <_svfiprintf_r+0x32>
 800c974:	230c      	movs	r3, #12
 800c976:	603b      	str	r3, [r7, #0]
 800c978:	f04f 30ff 	mov.w	r0, #4294967295
 800c97c:	b01d      	add	sp, #116	@ 0x74
 800c97e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c982:	2340      	movs	r3, #64	@ 0x40
 800c984:	616b      	str	r3, [r5, #20]
 800c986:	2300      	movs	r3, #0
 800c988:	9309      	str	r3, [sp, #36]	@ 0x24
 800c98a:	2320      	movs	r3, #32
 800c98c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c990:	f8cd 800c 	str.w	r8, [sp, #12]
 800c994:	2330      	movs	r3, #48	@ 0x30
 800c996:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800cb34 <_svfiprintf_r+0x1e4>
 800c99a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c99e:	f04f 0901 	mov.w	r9, #1
 800c9a2:	4623      	mov	r3, r4
 800c9a4:	469a      	mov	sl, r3
 800c9a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c9aa:	b10a      	cbz	r2, 800c9b0 <_svfiprintf_r+0x60>
 800c9ac:	2a25      	cmp	r2, #37	@ 0x25
 800c9ae:	d1f9      	bne.n	800c9a4 <_svfiprintf_r+0x54>
 800c9b0:	ebba 0b04 	subs.w	fp, sl, r4
 800c9b4:	d00b      	beq.n	800c9ce <_svfiprintf_r+0x7e>
 800c9b6:	465b      	mov	r3, fp
 800c9b8:	4622      	mov	r2, r4
 800c9ba:	4629      	mov	r1, r5
 800c9bc:	4638      	mov	r0, r7
 800c9be:	f7ff ff6b 	bl	800c898 <__ssputs_r>
 800c9c2:	3001      	adds	r0, #1
 800c9c4:	f000 80a7 	beq.w	800cb16 <_svfiprintf_r+0x1c6>
 800c9c8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c9ca:	445a      	add	r2, fp
 800c9cc:	9209      	str	r2, [sp, #36]	@ 0x24
 800c9ce:	f89a 3000 	ldrb.w	r3, [sl]
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	f000 809f 	beq.w	800cb16 <_svfiprintf_r+0x1c6>
 800c9d8:	2300      	movs	r3, #0
 800c9da:	f04f 32ff 	mov.w	r2, #4294967295
 800c9de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c9e2:	f10a 0a01 	add.w	sl, sl, #1
 800c9e6:	9304      	str	r3, [sp, #16]
 800c9e8:	9307      	str	r3, [sp, #28]
 800c9ea:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c9ee:	931a      	str	r3, [sp, #104]	@ 0x68
 800c9f0:	4654      	mov	r4, sl
 800c9f2:	2205      	movs	r2, #5
 800c9f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c9f8:	484e      	ldr	r0, [pc, #312]	@ (800cb34 <_svfiprintf_r+0x1e4>)
 800c9fa:	f7f3 fc21 	bl	8000240 <memchr>
 800c9fe:	9a04      	ldr	r2, [sp, #16]
 800ca00:	b9d8      	cbnz	r0, 800ca3a <_svfiprintf_r+0xea>
 800ca02:	06d0      	lsls	r0, r2, #27
 800ca04:	bf44      	itt	mi
 800ca06:	2320      	movmi	r3, #32
 800ca08:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ca0c:	0711      	lsls	r1, r2, #28
 800ca0e:	bf44      	itt	mi
 800ca10:	232b      	movmi	r3, #43	@ 0x2b
 800ca12:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ca16:	f89a 3000 	ldrb.w	r3, [sl]
 800ca1a:	2b2a      	cmp	r3, #42	@ 0x2a
 800ca1c:	d015      	beq.n	800ca4a <_svfiprintf_r+0xfa>
 800ca1e:	9a07      	ldr	r2, [sp, #28]
 800ca20:	4654      	mov	r4, sl
 800ca22:	2000      	movs	r0, #0
 800ca24:	f04f 0c0a 	mov.w	ip, #10
 800ca28:	4621      	mov	r1, r4
 800ca2a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ca2e:	3b30      	subs	r3, #48	@ 0x30
 800ca30:	2b09      	cmp	r3, #9
 800ca32:	d94b      	bls.n	800cacc <_svfiprintf_r+0x17c>
 800ca34:	b1b0      	cbz	r0, 800ca64 <_svfiprintf_r+0x114>
 800ca36:	9207      	str	r2, [sp, #28]
 800ca38:	e014      	b.n	800ca64 <_svfiprintf_r+0x114>
 800ca3a:	eba0 0308 	sub.w	r3, r0, r8
 800ca3e:	fa09 f303 	lsl.w	r3, r9, r3
 800ca42:	4313      	orrs	r3, r2
 800ca44:	9304      	str	r3, [sp, #16]
 800ca46:	46a2      	mov	sl, r4
 800ca48:	e7d2      	b.n	800c9f0 <_svfiprintf_r+0xa0>
 800ca4a:	9b03      	ldr	r3, [sp, #12]
 800ca4c:	1d19      	adds	r1, r3, #4
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	9103      	str	r1, [sp, #12]
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	bfbb      	ittet	lt
 800ca56:	425b      	neglt	r3, r3
 800ca58:	f042 0202 	orrlt.w	r2, r2, #2
 800ca5c:	9307      	strge	r3, [sp, #28]
 800ca5e:	9307      	strlt	r3, [sp, #28]
 800ca60:	bfb8      	it	lt
 800ca62:	9204      	strlt	r2, [sp, #16]
 800ca64:	7823      	ldrb	r3, [r4, #0]
 800ca66:	2b2e      	cmp	r3, #46	@ 0x2e
 800ca68:	d10a      	bne.n	800ca80 <_svfiprintf_r+0x130>
 800ca6a:	7863      	ldrb	r3, [r4, #1]
 800ca6c:	2b2a      	cmp	r3, #42	@ 0x2a
 800ca6e:	d132      	bne.n	800cad6 <_svfiprintf_r+0x186>
 800ca70:	9b03      	ldr	r3, [sp, #12]
 800ca72:	1d1a      	adds	r2, r3, #4
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	9203      	str	r2, [sp, #12]
 800ca78:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ca7c:	3402      	adds	r4, #2
 800ca7e:	9305      	str	r3, [sp, #20]
 800ca80:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800cb44 <_svfiprintf_r+0x1f4>
 800ca84:	7821      	ldrb	r1, [r4, #0]
 800ca86:	2203      	movs	r2, #3
 800ca88:	4650      	mov	r0, sl
 800ca8a:	f7f3 fbd9 	bl	8000240 <memchr>
 800ca8e:	b138      	cbz	r0, 800caa0 <_svfiprintf_r+0x150>
 800ca90:	9b04      	ldr	r3, [sp, #16]
 800ca92:	eba0 000a 	sub.w	r0, r0, sl
 800ca96:	2240      	movs	r2, #64	@ 0x40
 800ca98:	4082      	lsls	r2, r0
 800ca9a:	4313      	orrs	r3, r2
 800ca9c:	3401      	adds	r4, #1
 800ca9e:	9304      	str	r3, [sp, #16]
 800caa0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800caa4:	4824      	ldr	r0, [pc, #144]	@ (800cb38 <_svfiprintf_r+0x1e8>)
 800caa6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800caaa:	2206      	movs	r2, #6
 800caac:	f7f3 fbc8 	bl	8000240 <memchr>
 800cab0:	2800      	cmp	r0, #0
 800cab2:	d036      	beq.n	800cb22 <_svfiprintf_r+0x1d2>
 800cab4:	4b21      	ldr	r3, [pc, #132]	@ (800cb3c <_svfiprintf_r+0x1ec>)
 800cab6:	bb1b      	cbnz	r3, 800cb00 <_svfiprintf_r+0x1b0>
 800cab8:	9b03      	ldr	r3, [sp, #12]
 800caba:	3307      	adds	r3, #7
 800cabc:	f023 0307 	bic.w	r3, r3, #7
 800cac0:	3308      	adds	r3, #8
 800cac2:	9303      	str	r3, [sp, #12]
 800cac4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cac6:	4433      	add	r3, r6
 800cac8:	9309      	str	r3, [sp, #36]	@ 0x24
 800caca:	e76a      	b.n	800c9a2 <_svfiprintf_r+0x52>
 800cacc:	fb0c 3202 	mla	r2, ip, r2, r3
 800cad0:	460c      	mov	r4, r1
 800cad2:	2001      	movs	r0, #1
 800cad4:	e7a8      	b.n	800ca28 <_svfiprintf_r+0xd8>
 800cad6:	2300      	movs	r3, #0
 800cad8:	3401      	adds	r4, #1
 800cada:	9305      	str	r3, [sp, #20]
 800cadc:	4619      	mov	r1, r3
 800cade:	f04f 0c0a 	mov.w	ip, #10
 800cae2:	4620      	mov	r0, r4
 800cae4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cae8:	3a30      	subs	r2, #48	@ 0x30
 800caea:	2a09      	cmp	r2, #9
 800caec:	d903      	bls.n	800caf6 <_svfiprintf_r+0x1a6>
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d0c6      	beq.n	800ca80 <_svfiprintf_r+0x130>
 800caf2:	9105      	str	r1, [sp, #20]
 800caf4:	e7c4      	b.n	800ca80 <_svfiprintf_r+0x130>
 800caf6:	fb0c 2101 	mla	r1, ip, r1, r2
 800cafa:	4604      	mov	r4, r0
 800cafc:	2301      	movs	r3, #1
 800cafe:	e7f0      	b.n	800cae2 <_svfiprintf_r+0x192>
 800cb00:	ab03      	add	r3, sp, #12
 800cb02:	9300      	str	r3, [sp, #0]
 800cb04:	462a      	mov	r2, r5
 800cb06:	4b0e      	ldr	r3, [pc, #56]	@ (800cb40 <_svfiprintf_r+0x1f0>)
 800cb08:	a904      	add	r1, sp, #16
 800cb0a:	4638      	mov	r0, r7
 800cb0c:	f7fc fd04 	bl	8009518 <_printf_float>
 800cb10:	1c42      	adds	r2, r0, #1
 800cb12:	4606      	mov	r6, r0
 800cb14:	d1d6      	bne.n	800cac4 <_svfiprintf_r+0x174>
 800cb16:	89ab      	ldrh	r3, [r5, #12]
 800cb18:	065b      	lsls	r3, r3, #25
 800cb1a:	f53f af2d 	bmi.w	800c978 <_svfiprintf_r+0x28>
 800cb1e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cb20:	e72c      	b.n	800c97c <_svfiprintf_r+0x2c>
 800cb22:	ab03      	add	r3, sp, #12
 800cb24:	9300      	str	r3, [sp, #0]
 800cb26:	462a      	mov	r2, r5
 800cb28:	4b05      	ldr	r3, [pc, #20]	@ (800cb40 <_svfiprintf_r+0x1f0>)
 800cb2a:	a904      	add	r1, sp, #16
 800cb2c:	4638      	mov	r0, r7
 800cb2e:	f7fc ff7b 	bl	8009a28 <_printf_i>
 800cb32:	e7ed      	b.n	800cb10 <_svfiprintf_r+0x1c0>
 800cb34:	0800dd0d 	.word	0x0800dd0d
 800cb38:	0800dd17 	.word	0x0800dd17
 800cb3c:	08009519 	.word	0x08009519
 800cb40:	0800c899 	.word	0x0800c899
 800cb44:	0800dd13 	.word	0x0800dd13

0800cb48 <__sflush_r>:
 800cb48:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cb4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb50:	0716      	lsls	r6, r2, #28
 800cb52:	4605      	mov	r5, r0
 800cb54:	460c      	mov	r4, r1
 800cb56:	d454      	bmi.n	800cc02 <__sflush_r+0xba>
 800cb58:	684b      	ldr	r3, [r1, #4]
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	dc02      	bgt.n	800cb64 <__sflush_r+0x1c>
 800cb5e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	dd48      	ble.n	800cbf6 <__sflush_r+0xae>
 800cb64:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cb66:	2e00      	cmp	r6, #0
 800cb68:	d045      	beq.n	800cbf6 <__sflush_r+0xae>
 800cb6a:	2300      	movs	r3, #0
 800cb6c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800cb70:	682f      	ldr	r7, [r5, #0]
 800cb72:	6a21      	ldr	r1, [r4, #32]
 800cb74:	602b      	str	r3, [r5, #0]
 800cb76:	d030      	beq.n	800cbda <__sflush_r+0x92>
 800cb78:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800cb7a:	89a3      	ldrh	r3, [r4, #12]
 800cb7c:	0759      	lsls	r1, r3, #29
 800cb7e:	d505      	bpl.n	800cb8c <__sflush_r+0x44>
 800cb80:	6863      	ldr	r3, [r4, #4]
 800cb82:	1ad2      	subs	r2, r2, r3
 800cb84:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800cb86:	b10b      	cbz	r3, 800cb8c <__sflush_r+0x44>
 800cb88:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800cb8a:	1ad2      	subs	r2, r2, r3
 800cb8c:	2300      	movs	r3, #0
 800cb8e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cb90:	6a21      	ldr	r1, [r4, #32]
 800cb92:	4628      	mov	r0, r5
 800cb94:	47b0      	blx	r6
 800cb96:	1c43      	adds	r3, r0, #1
 800cb98:	89a3      	ldrh	r3, [r4, #12]
 800cb9a:	d106      	bne.n	800cbaa <__sflush_r+0x62>
 800cb9c:	6829      	ldr	r1, [r5, #0]
 800cb9e:	291d      	cmp	r1, #29
 800cba0:	d82b      	bhi.n	800cbfa <__sflush_r+0xb2>
 800cba2:	4a2a      	ldr	r2, [pc, #168]	@ (800cc4c <__sflush_r+0x104>)
 800cba4:	40ca      	lsrs	r2, r1
 800cba6:	07d6      	lsls	r6, r2, #31
 800cba8:	d527      	bpl.n	800cbfa <__sflush_r+0xb2>
 800cbaa:	2200      	movs	r2, #0
 800cbac:	6062      	str	r2, [r4, #4]
 800cbae:	04d9      	lsls	r1, r3, #19
 800cbb0:	6922      	ldr	r2, [r4, #16]
 800cbb2:	6022      	str	r2, [r4, #0]
 800cbb4:	d504      	bpl.n	800cbc0 <__sflush_r+0x78>
 800cbb6:	1c42      	adds	r2, r0, #1
 800cbb8:	d101      	bne.n	800cbbe <__sflush_r+0x76>
 800cbba:	682b      	ldr	r3, [r5, #0]
 800cbbc:	b903      	cbnz	r3, 800cbc0 <__sflush_r+0x78>
 800cbbe:	6560      	str	r0, [r4, #84]	@ 0x54
 800cbc0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cbc2:	602f      	str	r7, [r5, #0]
 800cbc4:	b1b9      	cbz	r1, 800cbf6 <__sflush_r+0xae>
 800cbc6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cbca:	4299      	cmp	r1, r3
 800cbcc:	d002      	beq.n	800cbd4 <__sflush_r+0x8c>
 800cbce:	4628      	mov	r0, r5
 800cbd0:	f7fe fa84 	bl	800b0dc <_free_r>
 800cbd4:	2300      	movs	r3, #0
 800cbd6:	6363      	str	r3, [r4, #52]	@ 0x34
 800cbd8:	e00d      	b.n	800cbf6 <__sflush_r+0xae>
 800cbda:	2301      	movs	r3, #1
 800cbdc:	4628      	mov	r0, r5
 800cbde:	47b0      	blx	r6
 800cbe0:	4602      	mov	r2, r0
 800cbe2:	1c50      	adds	r0, r2, #1
 800cbe4:	d1c9      	bne.n	800cb7a <__sflush_r+0x32>
 800cbe6:	682b      	ldr	r3, [r5, #0]
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d0c6      	beq.n	800cb7a <__sflush_r+0x32>
 800cbec:	2b1d      	cmp	r3, #29
 800cbee:	d001      	beq.n	800cbf4 <__sflush_r+0xac>
 800cbf0:	2b16      	cmp	r3, #22
 800cbf2:	d11e      	bne.n	800cc32 <__sflush_r+0xea>
 800cbf4:	602f      	str	r7, [r5, #0]
 800cbf6:	2000      	movs	r0, #0
 800cbf8:	e022      	b.n	800cc40 <__sflush_r+0xf8>
 800cbfa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cbfe:	b21b      	sxth	r3, r3
 800cc00:	e01b      	b.n	800cc3a <__sflush_r+0xf2>
 800cc02:	690f      	ldr	r7, [r1, #16]
 800cc04:	2f00      	cmp	r7, #0
 800cc06:	d0f6      	beq.n	800cbf6 <__sflush_r+0xae>
 800cc08:	0793      	lsls	r3, r2, #30
 800cc0a:	680e      	ldr	r6, [r1, #0]
 800cc0c:	bf08      	it	eq
 800cc0e:	694b      	ldreq	r3, [r1, #20]
 800cc10:	600f      	str	r7, [r1, #0]
 800cc12:	bf18      	it	ne
 800cc14:	2300      	movne	r3, #0
 800cc16:	eba6 0807 	sub.w	r8, r6, r7
 800cc1a:	608b      	str	r3, [r1, #8]
 800cc1c:	f1b8 0f00 	cmp.w	r8, #0
 800cc20:	dde9      	ble.n	800cbf6 <__sflush_r+0xae>
 800cc22:	6a21      	ldr	r1, [r4, #32]
 800cc24:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800cc26:	4643      	mov	r3, r8
 800cc28:	463a      	mov	r2, r7
 800cc2a:	4628      	mov	r0, r5
 800cc2c:	47b0      	blx	r6
 800cc2e:	2800      	cmp	r0, #0
 800cc30:	dc08      	bgt.n	800cc44 <__sflush_r+0xfc>
 800cc32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cc36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cc3a:	81a3      	strh	r3, [r4, #12]
 800cc3c:	f04f 30ff 	mov.w	r0, #4294967295
 800cc40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc44:	4407      	add	r7, r0
 800cc46:	eba8 0800 	sub.w	r8, r8, r0
 800cc4a:	e7e7      	b.n	800cc1c <__sflush_r+0xd4>
 800cc4c:	20400001 	.word	0x20400001

0800cc50 <_fflush_r>:
 800cc50:	b538      	push	{r3, r4, r5, lr}
 800cc52:	690b      	ldr	r3, [r1, #16]
 800cc54:	4605      	mov	r5, r0
 800cc56:	460c      	mov	r4, r1
 800cc58:	b913      	cbnz	r3, 800cc60 <_fflush_r+0x10>
 800cc5a:	2500      	movs	r5, #0
 800cc5c:	4628      	mov	r0, r5
 800cc5e:	bd38      	pop	{r3, r4, r5, pc}
 800cc60:	b118      	cbz	r0, 800cc6a <_fflush_r+0x1a>
 800cc62:	6a03      	ldr	r3, [r0, #32]
 800cc64:	b90b      	cbnz	r3, 800cc6a <_fflush_r+0x1a>
 800cc66:	f7fd fa8f 	bl	800a188 <__sinit>
 800cc6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d0f3      	beq.n	800cc5a <_fflush_r+0xa>
 800cc72:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800cc74:	07d0      	lsls	r0, r2, #31
 800cc76:	d404      	bmi.n	800cc82 <_fflush_r+0x32>
 800cc78:	0599      	lsls	r1, r3, #22
 800cc7a:	d402      	bmi.n	800cc82 <_fflush_r+0x32>
 800cc7c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cc7e:	f7fd fc30 	bl	800a4e2 <__retarget_lock_acquire_recursive>
 800cc82:	4628      	mov	r0, r5
 800cc84:	4621      	mov	r1, r4
 800cc86:	f7ff ff5f 	bl	800cb48 <__sflush_r>
 800cc8a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cc8c:	07da      	lsls	r2, r3, #31
 800cc8e:	4605      	mov	r5, r0
 800cc90:	d4e4      	bmi.n	800cc5c <_fflush_r+0xc>
 800cc92:	89a3      	ldrh	r3, [r4, #12]
 800cc94:	059b      	lsls	r3, r3, #22
 800cc96:	d4e1      	bmi.n	800cc5c <_fflush_r+0xc>
 800cc98:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cc9a:	f7fd fc23 	bl	800a4e4 <__retarget_lock_release_recursive>
 800cc9e:	e7dd      	b.n	800cc5c <_fflush_r+0xc>

0800cca0 <memmove>:
 800cca0:	4288      	cmp	r0, r1
 800cca2:	b510      	push	{r4, lr}
 800cca4:	eb01 0402 	add.w	r4, r1, r2
 800cca8:	d902      	bls.n	800ccb0 <memmove+0x10>
 800ccaa:	4284      	cmp	r4, r0
 800ccac:	4623      	mov	r3, r4
 800ccae:	d807      	bhi.n	800ccc0 <memmove+0x20>
 800ccb0:	1e43      	subs	r3, r0, #1
 800ccb2:	42a1      	cmp	r1, r4
 800ccb4:	d008      	beq.n	800ccc8 <memmove+0x28>
 800ccb6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ccba:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ccbe:	e7f8      	b.n	800ccb2 <memmove+0x12>
 800ccc0:	4402      	add	r2, r0
 800ccc2:	4601      	mov	r1, r0
 800ccc4:	428a      	cmp	r2, r1
 800ccc6:	d100      	bne.n	800ccca <memmove+0x2a>
 800ccc8:	bd10      	pop	{r4, pc}
 800ccca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ccce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ccd2:	e7f7      	b.n	800ccc4 <memmove+0x24>

0800ccd4 <strncmp>:
 800ccd4:	b510      	push	{r4, lr}
 800ccd6:	b16a      	cbz	r2, 800ccf4 <strncmp+0x20>
 800ccd8:	3901      	subs	r1, #1
 800ccda:	1884      	adds	r4, r0, r2
 800ccdc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cce0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800cce4:	429a      	cmp	r2, r3
 800cce6:	d103      	bne.n	800ccf0 <strncmp+0x1c>
 800cce8:	42a0      	cmp	r0, r4
 800ccea:	d001      	beq.n	800ccf0 <strncmp+0x1c>
 800ccec:	2a00      	cmp	r2, #0
 800ccee:	d1f5      	bne.n	800ccdc <strncmp+0x8>
 800ccf0:	1ad0      	subs	r0, r2, r3
 800ccf2:	bd10      	pop	{r4, pc}
 800ccf4:	4610      	mov	r0, r2
 800ccf6:	e7fc      	b.n	800ccf2 <strncmp+0x1e>

0800ccf8 <_sbrk_r>:
 800ccf8:	b538      	push	{r3, r4, r5, lr}
 800ccfa:	4d06      	ldr	r5, [pc, #24]	@ (800cd14 <_sbrk_r+0x1c>)
 800ccfc:	2300      	movs	r3, #0
 800ccfe:	4604      	mov	r4, r0
 800cd00:	4608      	mov	r0, r1
 800cd02:	602b      	str	r3, [r5, #0]
 800cd04:	f7f4 fd3e 	bl	8001784 <_sbrk>
 800cd08:	1c43      	adds	r3, r0, #1
 800cd0a:	d102      	bne.n	800cd12 <_sbrk_r+0x1a>
 800cd0c:	682b      	ldr	r3, [r5, #0]
 800cd0e:	b103      	cbz	r3, 800cd12 <_sbrk_r+0x1a>
 800cd10:	6023      	str	r3, [r4, #0]
 800cd12:	bd38      	pop	{r3, r4, r5, pc}
 800cd14:	20005558 	.word	0x20005558

0800cd18 <nan>:
 800cd18:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800cd20 <nan+0x8>
 800cd1c:	4770      	bx	lr
 800cd1e:	bf00      	nop
 800cd20:	00000000 	.word	0x00000000
 800cd24:	7ff80000 	.word	0x7ff80000

0800cd28 <__assert_func>:
 800cd28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cd2a:	4614      	mov	r4, r2
 800cd2c:	461a      	mov	r2, r3
 800cd2e:	4b09      	ldr	r3, [pc, #36]	@ (800cd54 <__assert_func+0x2c>)
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	4605      	mov	r5, r0
 800cd34:	68d8      	ldr	r0, [r3, #12]
 800cd36:	b14c      	cbz	r4, 800cd4c <__assert_func+0x24>
 800cd38:	4b07      	ldr	r3, [pc, #28]	@ (800cd58 <__assert_func+0x30>)
 800cd3a:	9100      	str	r1, [sp, #0]
 800cd3c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cd40:	4906      	ldr	r1, [pc, #24]	@ (800cd5c <__assert_func+0x34>)
 800cd42:	462b      	mov	r3, r5
 800cd44:	f000 fba8 	bl	800d498 <fiprintf>
 800cd48:	f000 fbb8 	bl	800d4bc <abort>
 800cd4c:	4b04      	ldr	r3, [pc, #16]	@ (800cd60 <__assert_func+0x38>)
 800cd4e:	461c      	mov	r4, r3
 800cd50:	e7f3      	b.n	800cd3a <__assert_func+0x12>
 800cd52:	bf00      	nop
 800cd54:	2000001c 	.word	0x2000001c
 800cd58:	0800dd26 	.word	0x0800dd26
 800cd5c:	0800dd33 	.word	0x0800dd33
 800cd60:	0800dd61 	.word	0x0800dd61

0800cd64 <_calloc_r>:
 800cd64:	b570      	push	{r4, r5, r6, lr}
 800cd66:	fba1 5402 	umull	r5, r4, r1, r2
 800cd6a:	b934      	cbnz	r4, 800cd7a <_calloc_r+0x16>
 800cd6c:	4629      	mov	r1, r5
 800cd6e:	f7fe fa29 	bl	800b1c4 <_malloc_r>
 800cd72:	4606      	mov	r6, r0
 800cd74:	b928      	cbnz	r0, 800cd82 <_calloc_r+0x1e>
 800cd76:	4630      	mov	r0, r6
 800cd78:	bd70      	pop	{r4, r5, r6, pc}
 800cd7a:	220c      	movs	r2, #12
 800cd7c:	6002      	str	r2, [r0, #0]
 800cd7e:	2600      	movs	r6, #0
 800cd80:	e7f9      	b.n	800cd76 <_calloc_r+0x12>
 800cd82:	462a      	mov	r2, r5
 800cd84:	4621      	mov	r1, r4
 800cd86:	f7fd fad0 	bl	800a32a <memset>
 800cd8a:	e7f4      	b.n	800cd76 <_calloc_r+0x12>

0800cd8c <rshift>:
 800cd8c:	6903      	ldr	r3, [r0, #16]
 800cd8e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800cd92:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cd96:	ea4f 1261 	mov.w	r2, r1, asr #5
 800cd9a:	f100 0414 	add.w	r4, r0, #20
 800cd9e:	dd45      	ble.n	800ce2c <rshift+0xa0>
 800cda0:	f011 011f 	ands.w	r1, r1, #31
 800cda4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800cda8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800cdac:	d10c      	bne.n	800cdc8 <rshift+0x3c>
 800cdae:	f100 0710 	add.w	r7, r0, #16
 800cdb2:	4629      	mov	r1, r5
 800cdb4:	42b1      	cmp	r1, r6
 800cdb6:	d334      	bcc.n	800ce22 <rshift+0x96>
 800cdb8:	1a9b      	subs	r3, r3, r2
 800cdba:	009b      	lsls	r3, r3, #2
 800cdbc:	1eea      	subs	r2, r5, #3
 800cdbe:	4296      	cmp	r6, r2
 800cdc0:	bf38      	it	cc
 800cdc2:	2300      	movcc	r3, #0
 800cdc4:	4423      	add	r3, r4
 800cdc6:	e015      	b.n	800cdf4 <rshift+0x68>
 800cdc8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800cdcc:	f1c1 0820 	rsb	r8, r1, #32
 800cdd0:	40cf      	lsrs	r7, r1
 800cdd2:	f105 0e04 	add.w	lr, r5, #4
 800cdd6:	46a1      	mov	r9, r4
 800cdd8:	4576      	cmp	r6, lr
 800cdda:	46f4      	mov	ip, lr
 800cddc:	d815      	bhi.n	800ce0a <rshift+0x7e>
 800cdde:	1a9a      	subs	r2, r3, r2
 800cde0:	0092      	lsls	r2, r2, #2
 800cde2:	3a04      	subs	r2, #4
 800cde4:	3501      	adds	r5, #1
 800cde6:	42ae      	cmp	r6, r5
 800cde8:	bf38      	it	cc
 800cdea:	2200      	movcc	r2, #0
 800cdec:	18a3      	adds	r3, r4, r2
 800cdee:	50a7      	str	r7, [r4, r2]
 800cdf0:	b107      	cbz	r7, 800cdf4 <rshift+0x68>
 800cdf2:	3304      	adds	r3, #4
 800cdf4:	1b1a      	subs	r2, r3, r4
 800cdf6:	42a3      	cmp	r3, r4
 800cdf8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800cdfc:	bf08      	it	eq
 800cdfe:	2300      	moveq	r3, #0
 800ce00:	6102      	str	r2, [r0, #16]
 800ce02:	bf08      	it	eq
 800ce04:	6143      	streq	r3, [r0, #20]
 800ce06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ce0a:	f8dc c000 	ldr.w	ip, [ip]
 800ce0e:	fa0c fc08 	lsl.w	ip, ip, r8
 800ce12:	ea4c 0707 	orr.w	r7, ip, r7
 800ce16:	f849 7b04 	str.w	r7, [r9], #4
 800ce1a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ce1e:	40cf      	lsrs	r7, r1
 800ce20:	e7da      	b.n	800cdd8 <rshift+0x4c>
 800ce22:	f851 cb04 	ldr.w	ip, [r1], #4
 800ce26:	f847 cf04 	str.w	ip, [r7, #4]!
 800ce2a:	e7c3      	b.n	800cdb4 <rshift+0x28>
 800ce2c:	4623      	mov	r3, r4
 800ce2e:	e7e1      	b.n	800cdf4 <rshift+0x68>

0800ce30 <__hexdig_fun>:
 800ce30:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800ce34:	2b09      	cmp	r3, #9
 800ce36:	d802      	bhi.n	800ce3e <__hexdig_fun+0xe>
 800ce38:	3820      	subs	r0, #32
 800ce3a:	b2c0      	uxtb	r0, r0
 800ce3c:	4770      	bx	lr
 800ce3e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800ce42:	2b05      	cmp	r3, #5
 800ce44:	d801      	bhi.n	800ce4a <__hexdig_fun+0x1a>
 800ce46:	3847      	subs	r0, #71	@ 0x47
 800ce48:	e7f7      	b.n	800ce3a <__hexdig_fun+0xa>
 800ce4a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800ce4e:	2b05      	cmp	r3, #5
 800ce50:	d801      	bhi.n	800ce56 <__hexdig_fun+0x26>
 800ce52:	3827      	subs	r0, #39	@ 0x27
 800ce54:	e7f1      	b.n	800ce3a <__hexdig_fun+0xa>
 800ce56:	2000      	movs	r0, #0
 800ce58:	4770      	bx	lr
	...

0800ce5c <__gethex>:
 800ce5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce60:	b085      	sub	sp, #20
 800ce62:	468a      	mov	sl, r1
 800ce64:	9302      	str	r3, [sp, #8]
 800ce66:	680b      	ldr	r3, [r1, #0]
 800ce68:	9001      	str	r0, [sp, #4]
 800ce6a:	4690      	mov	r8, r2
 800ce6c:	1c9c      	adds	r4, r3, #2
 800ce6e:	46a1      	mov	r9, r4
 800ce70:	f814 0b01 	ldrb.w	r0, [r4], #1
 800ce74:	2830      	cmp	r0, #48	@ 0x30
 800ce76:	d0fa      	beq.n	800ce6e <__gethex+0x12>
 800ce78:	eba9 0303 	sub.w	r3, r9, r3
 800ce7c:	f1a3 0b02 	sub.w	fp, r3, #2
 800ce80:	f7ff ffd6 	bl	800ce30 <__hexdig_fun>
 800ce84:	4605      	mov	r5, r0
 800ce86:	2800      	cmp	r0, #0
 800ce88:	d168      	bne.n	800cf5c <__gethex+0x100>
 800ce8a:	49a0      	ldr	r1, [pc, #640]	@ (800d10c <__gethex+0x2b0>)
 800ce8c:	2201      	movs	r2, #1
 800ce8e:	4648      	mov	r0, r9
 800ce90:	f7ff ff20 	bl	800ccd4 <strncmp>
 800ce94:	4607      	mov	r7, r0
 800ce96:	2800      	cmp	r0, #0
 800ce98:	d167      	bne.n	800cf6a <__gethex+0x10e>
 800ce9a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800ce9e:	4626      	mov	r6, r4
 800cea0:	f7ff ffc6 	bl	800ce30 <__hexdig_fun>
 800cea4:	2800      	cmp	r0, #0
 800cea6:	d062      	beq.n	800cf6e <__gethex+0x112>
 800cea8:	4623      	mov	r3, r4
 800ceaa:	7818      	ldrb	r0, [r3, #0]
 800ceac:	2830      	cmp	r0, #48	@ 0x30
 800ceae:	4699      	mov	r9, r3
 800ceb0:	f103 0301 	add.w	r3, r3, #1
 800ceb4:	d0f9      	beq.n	800ceaa <__gethex+0x4e>
 800ceb6:	f7ff ffbb 	bl	800ce30 <__hexdig_fun>
 800ceba:	fab0 f580 	clz	r5, r0
 800cebe:	096d      	lsrs	r5, r5, #5
 800cec0:	f04f 0b01 	mov.w	fp, #1
 800cec4:	464a      	mov	r2, r9
 800cec6:	4616      	mov	r6, r2
 800cec8:	3201      	adds	r2, #1
 800ceca:	7830      	ldrb	r0, [r6, #0]
 800cecc:	f7ff ffb0 	bl	800ce30 <__hexdig_fun>
 800ced0:	2800      	cmp	r0, #0
 800ced2:	d1f8      	bne.n	800cec6 <__gethex+0x6a>
 800ced4:	498d      	ldr	r1, [pc, #564]	@ (800d10c <__gethex+0x2b0>)
 800ced6:	2201      	movs	r2, #1
 800ced8:	4630      	mov	r0, r6
 800ceda:	f7ff fefb 	bl	800ccd4 <strncmp>
 800cede:	2800      	cmp	r0, #0
 800cee0:	d13f      	bne.n	800cf62 <__gethex+0x106>
 800cee2:	b944      	cbnz	r4, 800cef6 <__gethex+0x9a>
 800cee4:	1c74      	adds	r4, r6, #1
 800cee6:	4622      	mov	r2, r4
 800cee8:	4616      	mov	r6, r2
 800ceea:	3201      	adds	r2, #1
 800ceec:	7830      	ldrb	r0, [r6, #0]
 800ceee:	f7ff ff9f 	bl	800ce30 <__hexdig_fun>
 800cef2:	2800      	cmp	r0, #0
 800cef4:	d1f8      	bne.n	800cee8 <__gethex+0x8c>
 800cef6:	1ba4      	subs	r4, r4, r6
 800cef8:	00a7      	lsls	r7, r4, #2
 800cefa:	7833      	ldrb	r3, [r6, #0]
 800cefc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800cf00:	2b50      	cmp	r3, #80	@ 0x50
 800cf02:	d13e      	bne.n	800cf82 <__gethex+0x126>
 800cf04:	7873      	ldrb	r3, [r6, #1]
 800cf06:	2b2b      	cmp	r3, #43	@ 0x2b
 800cf08:	d033      	beq.n	800cf72 <__gethex+0x116>
 800cf0a:	2b2d      	cmp	r3, #45	@ 0x2d
 800cf0c:	d034      	beq.n	800cf78 <__gethex+0x11c>
 800cf0e:	1c71      	adds	r1, r6, #1
 800cf10:	2400      	movs	r4, #0
 800cf12:	7808      	ldrb	r0, [r1, #0]
 800cf14:	f7ff ff8c 	bl	800ce30 <__hexdig_fun>
 800cf18:	1e43      	subs	r3, r0, #1
 800cf1a:	b2db      	uxtb	r3, r3
 800cf1c:	2b18      	cmp	r3, #24
 800cf1e:	d830      	bhi.n	800cf82 <__gethex+0x126>
 800cf20:	f1a0 0210 	sub.w	r2, r0, #16
 800cf24:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800cf28:	f7ff ff82 	bl	800ce30 <__hexdig_fun>
 800cf2c:	f100 3cff 	add.w	ip, r0, #4294967295
 800cf30:	fa5f fc8c 	uxtb.w	ip, ip
 800cf34:	f1bc 0f18 	cmp.w	ip, #24
 800cf38:	f04f 030a 	mov.w	r3, #10
 800cf3c:	d91e      	bls.n	800cf7c <__gethex+0x120>
 800cf3e:	b104      	cbz	r4, 800cf42 <__gethex+0xe6>
 800cf40:	4252      	negs	r2, r2
 800cf42:	4417      	add	r7, r2
 800cf44:	f8ca 1000 	str.w	r1, [sl]
 800cf48:	b1ed      	cbz	r5, 800cf86 <__gethex+0x12a>
 800cf4a:	f1bb 0f00 	cmp.w	fp, #0
 800cf4e:	bf0c      	ite	eq
 800cf50:	2506      	moveq	r5, #6
 800cf52:	2500      	movne	r5, #0
 800cf54:	4628      	mov	r0, r5
 800cf56:	b005      	add	sp, #20
 800cf58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf5c:	2500      	movs	r5, #0
 800cf5e:	462c      	mov	r4, r5
 800cf60:	e7b0      	b.n	800cec4 <__gethex+0x68>
 800cf62:	2c00      	cmp	r4, #0
 800cf64:	d1c7      	bne.n	800cef6 <__gethex+0x9a>
 800cf66:	4627      	mov	r7, r4
 800cf68:	e7c7      	b.n	800cefa <__gethex+0x9e>
 800cf6a:	464e      	mov	r6, r9
 800cf6c:	462f      	mov	r7, r5
 800cf6e:	2501      	movs	r5, #1
 800cf70:	e7c3      	b.n	800cefa <__gethex+0x9e>
 800cf72:	2400      	movs	r4, #0
 800cf74:	1cb1      	adds	r1, r6, #2
 800cf76:	e7cc      	b.n	800cf12 <__gethex+0xb6>
 800cf78:	2401      	movs	r4, #1
 800cf7a:	e7fb      	b.n	800cf74 <__gethex+0x118>
 800cf7c:	fb03 0002 	mla	r0, r3, r2, r0
 800cf80:	e7ce      	b.n	800cf20 <__gethex+0xc4>
 800cf82:	4631      	mov	r1, r6
 800cf84:	e7de      	b.n	800cf44 <__gethex+0xe8>
 800cf86:	eba6 0309 	sub.w	r3, r6, r9
 800cf8a:	3b01      	subs	r3, #1
 800cf8c:	4629      	mov	r1, r5
 800cf8e:	2b07      	cmp	r3, #7
 800cf90:	dc0a      	bgt.n	800cfa8 <__gethex+0x14c>
 800cf92:	9801      	ldr	r0, [sp, #4]
 800cf94:	f7fe f9a2 	bl	800b2dc <_Balloc>
 800cf98:	4604      	mov	r4, r0
 800cf9a:	b940      	cbnz	r0, 800cfae <__gethex+0x152>
 800cf9c:	4b5c      	ldr	r3, [pc, #368]	@ (800d110 <__gethex+0x2b4>)
 800cf9e:	4602      	mov	r2, r0
 800cfa0:	21e4      	movs	r1, #228	@ 0xe4
 800cfa2:	485c      	ldr	r0, [pc, #368]	@ (800d114 <__gethex+0x2b8>)
 800cfa4:	f7ff fec0 	bl	800cd28 <__assert_func>
 800cfa8:	3101      	adds	r1, #1
 800cfaa:	105b      	asrs	r3, r3, #1
 800cfac:	e7ef      	b.n	800cf8e <__gethex+0x132>
 800cfae:	f100 0a14 	add.w	sl, r0, #20
 800cfb2:	2300      	movs	r3, #0
 800cfb4:	4655      	mov	r5, sl
 800cfb6:	469b      	mov	fp, r3
 800cfb8:	45b1      	cmp	r9, r6
 800cfba:	d337      	bcc.n	800d02c <__gethex+0x1d0>
 800cfbc:	f845 bb04 	str.w	fp, [r5], #4
 800cfc0:	eba5 050a 	sub.w	r5, r5, sl
 800cfc4:	10ad      	asrs	r5, r5, #2
 800cfc6:	6125      	str	r5, [r4, #16]
 800cfc8:	4658      	mov	r0, fp
 800cfca:	f7fe fa79 	bl	800b4c0 <__hi0bits>
 800cfce:	016d      	lsls	r5, r5, #5
 800cfd0:	f8d8 6000 	ldr.w	r6, [r8]
 800cfd4:	1a2d      	subs	r5, r5, r0
 800cfd6:	42b5      	cmp	r5, r6
 800cfd8:	dd54      	ble.n	800d084 <__gethex+0x228>
 800cfda:	1bad      	subs	r5, r5, r6
 800cfdc:	4629      	mov	r1, r5
 800cfde:	4620      	mov	r0, r4
 800cfe0:	f7fe fe02 	bl	800bbe8 <__any_on>
 800cfe4:	4681      	mov	r9, r0
 800cfe6:	b178      	cbz	r0, 800d008 <__gethex+0x1ac>
 800cfe8:	1e6b      	subs	r3, r5, #1
 800cfea:	1159      	asrs	r1, r3, #5
 800cfec:	f003 021f 	and.w	r2, r3, #31
 800cff0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800cff4:	f04f 0901 	mov.w	r9, #1
 800cff8:	fa09 f202 	lsl.w	r2, r9, r2
 800cffc:	420a      	tst	r2, r1
 800cffe:	d003      	beq.n	800d008 <__gethex+0x1ac>
 800d000:	454b      	cmp	r3, r9
 800d002:	dc36      	bgt.n	800d072 <__gethex+0x216>
 800d004:	f04f 0902 	mov.w	r9, #2
 800d008:	4629      	mov	r1, r5
 800d00a:	4620      	mov	r0, r4
 800d00c:	f7ff febe 	bl	800cd8c <rshift>
 800d010:	442f      	add	r7, r5
 800d012:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d016:	42bb      	cmp	r3, r7
 800d018:	da42      	bge.n	800d0a0 <__gethex+0x244>
 800d01a:	9801      	ldr	r0, [sp, #4]
 800d01c:	4621      	mov	r1, r4
 800d01e:	f7fe f99d 	bl	800b35c <_Bfree>
 800d022:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d024:	2300      	movs	r3, #0
 800d026:	6013      	str	r3, [r2, #0]
 800d028:	25a3      	movs	r5, #163	@ 0xa3
 800d02a:	e793      	b.n	800cf54 <__gethex+0xf8>
 800d02c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800d030:	2a2e      	cmp	r2, #46	@ 0x2e
 800d032:	d012      	beq.n	800d05a <__gethex+0x1fe>
 800d034:	2b20      	cmp	r3, #32
 800d036:	d104      	bne.n	800d042 <__gethex+0x1e6>
 800d038:	f845 bb04 	str.w	fp, [r5], #4
 800d03c:	f04f 0b00 	mov.w	fp, #0
 800d040:	465b      	mov	r3, fp
 800d042:	7830      	ldrb	r0, [r6, #0]
 800d044:	9303      	str	r3, [sp, #12]
 800d046:	f7ff fef3 	bl	800ce30 <__hexdig_fun>
 800d04a:	9b03      	ldr	r3, [sp, #12]
 800d04c:	f000 000f 	and.w	r0, r0, #15
 800d050:	4098      	lsls	r0, r3
 800d052:	ea4b 0b00 	orr.w	fp, fp, r0
 800d056:	3304      	adds	r3, #4
 800d058:	e7ae      	b.n	800cfb8 <__gethex+0x15c>
 800d05a:	45b1      	cmp	r9, r6
 800d05c:	d8ea      	bhi.n	800d034 <__gethex+0x1d8>
 800d05e:	492b      	ldr	r1, [pc, #172]	@ (800d10c <__gethex+0x2b0>)
 800d060:	9303      	str	r3, [sp, #12]
 800d062:	2201      	movs	r2, #1
 800d064:	4630      	mov	r0, r6
 800d066:	f7ff fe35 	bl	800ccd4 <strncmp>
 800d06a:	9b03      	ldr	r3, [sp, #12]
 800d06c:	2800      	cmp	r0, #0
 800d06e:	d1e1      	bne.n	800d034 <__gethex+0x1d8>
 800d070:	e7a2      	b.n	800cfb8 <__gethex+0x15c>
 800d072:	1ea9      	subs	r1, r5, #2
 800d074:	4620      	mov	r0, r4
 800d076:	f7fe fdb7 	bl	800bbe8 <__any_on>
 800d07a:	2800      	cmp	r0, #0
 800d07c:	d0c2      	beq.n	800d004 <__gethex+0x1a8>
 800d07e:	f04f 0903 	mov.w	r9, #3
 800d082:	e7c1      	b.n	800d008 <__gethex+0x1ac>
 800d084:	da09      	bge.n	800d09a <__gethex+0x23e>
 800d086:	1b75      	subs	r5, r6, r5
 800d088:	4621      	mov	r1, r4
 800d08a:	9801      	ldr	r0, [sp, #4]
 800d08c:	462a      	mov	r2, r5
 800d08e:	f7fe fb75 	bl	800b77c <__lshift>
 800d092:	1b7f      	subs	r7, r7, r5
 800d094:	4604      	mov	r4, r0
 800d096:	f100 0a14 	add.w	sl, r0, #20
 800d09a:	f04f 0900 	mov.w	r9, #0
 800d09e:	e7b8      	b.n	800d012 <__gethex+0x1b6>
 800d0a0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800d0a4:	42bd      	cmp	r5, r7
 800d0a6:	dd6f      	ble.n	800d188 <__gethex+0x32c>
 800d0a8:	1bed      	subs	r5, r5, r7
 800d0aa:	42ae      	cmp	r6, r5
 800d0ac:	dc34      	bgt.n	800d118 <__gethex+0x2bc>
 800d0ae:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d0b2:	2b02      	cmp	r3, #2
 800d0b4:	d022      	beq.n	800d0fc <__gethex+0x2a0>
 800d0b6:	2b03      	cmp	r3, #3
 800d0b8:	d024      	beq.n	800d104 <__gethex+0x2a8>
 800d0ba:	2b01      	cmp	r3, #1
 800d0bc:	d115      	bne.n	800d0ea <__gethex+0x28e>
 800d0be:	42ae      	cmp	r6, r5
 800d0c0:	d113      	bne.n	800d0ea <__gethex+0x28e>
 800d0c2:	2e01      	cmp	r6, #1
 800d0c4:	d10b      	bne.n	800d0de <__gethex+0x282>
 800d0c6:	9a02      	ldr	r2, [sp, #8]
 800d0c8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d0cc:	6013      	str	r3, [r2, #0]
 800d0ce:	2301      	movs	r3, #1
 800d0d0:	6123      	str	r3, [r4, #16]
 800d0d2:	f8ca 3000 	str.w	r3, [sl]
 800d0d6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d0d8:	2562      	movs	r5, #98	@ 0x62
 800d0da:	601c      	str	r4, [r3, #0]
 800d0dc:	e73a      	b.n	800cf54 <__gethex+0xf8>
 800d0de:	1e71      	subs	r1, r6, #1
 800d0e0:	4620      	mov	r0, r4
 800d0e2:	f7fe fd81 	bl	800bbe8 <__any_on>
 800d0e6:	2800      	cmp	r0, #0
 800d0e8:	d1ed      	bne.n	800d0c6 <__gethex+0x26a>
 800d0ea:	9801      	ldr	r0, [sp, #4]
 800d0ec:	4621      	mov	r1, r4
 800d0ee:	f7fe f935 	bl	800b35c <_Bfree>
 800d0f2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d0f4:	2300      	movs	r3, #0
 800d0f6:	6013      	str	r3, [r2, #0]
 800d0f8:	2550      	movs	r5, #80	@ 0x50
 800d0fa:	e72b      	b.n	800cf54 <__gethex+0xf8>
 800d0fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d1f3      	bne.n	800d0ea <__gethex+0x28e>
 800d102:	e7e0      	b.n	800d0c6 <__gethex+0x26a>
 800d104:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d106:	2b00      	cmp	r3, #0
 800d108:	d1dd      	bne.n	800d0c6 <__gethex+0x26a>
 800d10a:	e7ee      	b.n	800d0ea <__gethex+0x28e>
 800d10c:	0800dd0b 	.word	0x0800dd0b
 800d110:	0800dca1 	.word	0x0800dca1
 800d114:	0800dd62 	.word	0x0800dd62
 800d118:	1e6f      	subs	r7, r5, #1
 800d11a:	f1b9 0f00 	cmp.w	r9, #0
 800d11e:	d130      	bne.n	800d182 <__gethex+0x326>
 800d120:	b127      	cbz	r7, 800d12c <__gethex+0x2d0>
 800d122:	4639      	mov	r1, r7
 800d124:	4620      	mov	r0, r4
 800d126:	f7fe fd5f 	bl	800bbe8 <__any_on>
 800d12a:	4681      	mov	r9, r0
 800d12c:	117a      	asrs	r2, r7, #5
 800d12e:	2301      	movs	r3, #1
 800d130:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800d134:	f007 071f 	and.w	r7, r7, #31
 800d138:	40bb      	lsls	r3, r7
 800d13a:	4213      	tst	r3, r2
 800d13c:	4629      	mov	r1, r5
 800d13e:	4620      	mov	r0, r4
 800d140:	bf18      	it	ne
 800d142:	f049 0902 	orrne.w	r9, r9, #2
 800d146:	f7ff fe21 	bl	800cd8c <rshift>
 800d14a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800d14e:	1b76      	subs	r6, r6, r5
 800d150:	2502      	movs	r5, #2
 800d152:	f1b9 0f00 	cmp.w	r9, #0
 800d156:	d047      	beq.n	800d1e8 <__gethex+0x38c>
 800d158:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d15c:	2b02      	cmp	r3, #2
 800d15e:	d015      	beq.n	800d18c <__gethex+0x330>
 800d160:	2b03      	cmp	r3, #3
 800d162:	d017      	beq.n	800d194 <__gethex+0x338>
 800d164:	2b01      	cmp	r3, #1
 800d166:	d109      	bne.n	800d17c <__gethex+0x320>
 800d168:	f019 0f02 	tst.w	r9, #2
 800d16c:	d006      	beq.n	800d17c <__gethex+0x320>
 800d16e:	f8da 3000 	ldr.w	r3, [sl]
 800d172:	ea49 0903 	orr.w	r9, r9, r3
 800d176:	f019 0f01 	tst.w	r9, #1
 800d17a:	d10e      	bne.n	800d19a <__gethex+0x33e>
 800d17c:	f045 0510 	orr.w	r5, r5, #16
 800d180:	e032      	b.n	800d1e8 <__gethex+0x38c>
 800d182:	f04f 0901 	mov.w	r9, #1
 800d186:	e7d1      	b.n	800d12c <__gethex+0x2d0>
 800d188:	2501      	movs	r5, #1
 800d18a:	e7e2      	b.n	800d152 <__gethex+0x2f6>
 800d18c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d18e:	f1c3 0301 	rsb	r3, r3, #1
 800d192:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d194:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d196:	2b00      	cmp	r3, #0
 800d198:	d0f0      	beq.n	800d17c <__gethex+0x320>
 800d19a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d19e:	f104 0314 	add.w	r3, r4, #20
 800d1a2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800d1a6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800d1aa:	f04f 0c00 	mov.w	ip, #0
 800d1ae:	4618      	mov	r0, r3
 800d1b0:	f853 2b04 	ldr.w	r2, [r3], #4
 800d1b4:	f1b2 3fff 	cmp.w	r2, #4294967295
 800d1b8:	d01b      	beq.n	800d1f2 <__gethex+0x396>
 800d1ba:	3201      	adds	r2, #1
 800d1bc:	6002      	str	r2, [r0, #0]
 800d1be:	2d02      	cmp	r5, #2
 800d1c0:	f104 0314 	add.w	r3, r4, #20
 800d1c4:	d13c      	bne.n	800d240 <__gethex+0x3e4>
 800d1c6:	f8d8 2000 	ldr.w	r2, [r8]
 800d1ca:	3a01      	subs	r2, #1
 800d1cc:	42b2      	cmp	r2, r6
 800d1ce:	d109      	bne.n	800d1e4 <__gethex+0x388>
 800d1d0:	1171      	asrs	r1, r6, #5
 800d1d2:	2201      	movs	r2, #1
 800d1d4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d1d8:	f006 061f 	and.w	r6, r6, #31
 800d1dc:	fa02 f606 	lsl.w	r6, r2, r6
 800d1e0:	421e      	tst	r6, r3
 800d1e2:	d13a      	bne.n	800d25a <__gethex+0x3fe>
 800d1e4:	f045 0520 	orr.w	r5, r5, #32
 800d1e8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d1ea:	601c      	str	r4, [r3, #0]
 800d1ec:	9b02      	ldr	r3, [sp, #8]
 800d1ee:	601f      	str	r7, [r3, #0]
 800d1f0:	e6b0      	b.n	800cf54 <__gethex+0xf8>
 800d1f2:	4299      	cmp	r1, r3
 800d1f4:	f843 cc04 	str.w	ip, [r3, #-4]
 800d1f8:	d8d9      	bhi.n	800d1ae <__gethex+0x352>
 800d1fa:	68a3      	ldr	r3, [r4, #8]
 800d1fc:	459b      	cmp	fp, r3
 800d1fe:	db17      	blt.n	800d230 <__gethex+0x3d4>
 800d200:	6861      	ldr	r1, [r4, #4]
 800d202:	9801      	ldr	r0, [sp, #4]
 800d204:	3101      	adds	r1, #1
 800d206:	f7fe f869 	bl	800b2dc <_Balloc>
 800d20a:	4681      	mov	r9, r0
 800d20c:	b918      	cbnz	r0, 800d216 <__gethex+0x3ba>
 800d20e:	4b1a      	ldr	r3, [pc, #104]	@ (800d278 <__gethex+0x41c>)
 800d210:	4602      	mov	r2, r0
 800d212:	2184      	movs	r1, #132	@ 0x84
 800d214:	e6c5      	b.n	800cfa2 <__gethex+0x146>
 800d216:	6922      	ldr	r2, [r4, #16]
 800d218:	3202      	adds	r2, #2
 800d21a:	f104 010c 	add.w	r1, r4, #12
 800d21e:	0092      	lsls	r2, r2, #2
 800d220:	300c      	adds	r0, #12
 800d222:	f7fd f960 	bl	800a4e6 <memcpy>
 800d226:	4621      	mov	r1, r4
 800d228:	9801      	ldr	r0, [sp, #4]
 800d22a:	f7fe f897 	bl	800b35c <_Bfree>
 800d22e:	464c      	mov	r4, r9
 800d230:	6923      	ldr	r3, [r4, #16]
 800d232:	1c5a      	adds	r2, r3, #1
 800d234:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d238:	6122      	str	r2, [r4, #16]
 800d23a:	2201      	movs	r2, #1
 800d23c:	615a      	str	r2, [r3, #20]
 800d23e:	e7be      	b.n	800d1be <__gethex+0x362>
 800d240:	6922      	ldr	r2, [r4, #16]
 800d242:	455a      	cmp	r2, fp
 800d244:	dd0b      	ble.n	800d25e <__gethex+0x402>
 800d246:	2101      	movs	r1, #1
 800d248:	4620      	mov	r0, r4
 800d24a:	f7ff fd9f 	bl	800cd8c <rshift>
 800d24e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d252:	3701      	adds	r7, #1
 800d254:	42bb      	cmp	r3, r7
 800d256:	f6ff aee0 	blt.w	800d01a <__gethex+0x1be>
 800d25a:	2501      	movs	r5, #1
 800d25c:	e7c2      	b.n	800d1e4 <__gethex+0x388>
 800d25e:	f016 061f 	ands.w	r6, r6, #31
 800d262:	d0fa      	beq.n	800d25a <__gethex+0x3fe>
 800d264:	4453      	add	r3, sl
 800d266:	f1c6 0620 	rsb	r6, r6, #32
 800d26a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800d26e:	f7fe f927 	bl	800b4c0 <__hi0bits>
 800d272:	42b0      	cmp	r0, r6
 800d274:	dbe7      	blt.n	800d246 <__gethex+0x3ea>
 800d276:	e7f0      	b.n	800d25a <__gethex+0x3fe>
 800d278:	0800dca1 	.word	0x0800dca1

0800d27c <L_shift>:
 800d27c:	f1c2 0208 	rsb	r2, r2, #8
 800d280:	0092      	lsls	r2, r2, #2
 800d282:	b570      	push	{r4, r5, r6, lr}
 800d284:	f1c2 0620 	rsb	r6, r2, #32
 800d288:	6843      	ldr	r3, [r0, #4]
 800d28a:	6804      	ldr	r4, [r0, #0]
 800d28c:	fa03 f506 	lsl.w	r5, r3, r6
 800d290:	432c      	orrs	r4, r5
 800d292:	40d3      	lsrs	r3, r2
 800d294:	6004      	str	r4, [r0, #0]
 800d296:	f840 3f04 	str.w	r3, [r0, #4]!
 800d29a:	4288      	cmp	r0, r1
 800d29c:	d3f4      	bcc.n	800d288 <L_shift+0xc>
 800d29e:	bd70      	pop	{r4, r5, r6, pc}

0800d2a0 <__match>:
 800d2a0:	b530      	push	{r4, r5, lr}
 800d2a2:	6803      	ldr	r3, [r0, #0]
 800d2a4:	3301      	adds	r3, #1
 800d2a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d2aa:	b914      	cbnz	r4, 800d2b2 <__match+0x12>
 800d2ac:	6003      	str	r3, [r0, #0]
 800d2ae:	2001      	movs	r0, #1
 800d2b0:	bd30      	pop	{r4, r5, pc}
 800d2b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d2b6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800d2ba:	2d19      	cmp	r5, #25
 800d2bc:	bf98      	it	ls
 800d2be:	3220      	addls	r2, #32
 800d2c0:	42a2      	cmp	r2, r4
 800d2c2:	d0f0      	beq.n	800d2a6 <__match+0x6>
 800d2c4:	2000      	movs	r0, #0
 800d2c6:	e7f3      	b.n	800d2b0 <__match+0x10>

0800d2c8 <__hexnan>:
 800d2c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2cc:	680b      	ldr	r3, [r1, #0]
 800d2ce:	6801      	ldr	r1, [r0, #0]
 800d2d0:	115e      	asrs	r6, r3, #5
 800d2d2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d2d6:	f013 031f 	ands.w	r3, r3, #31
 800d2da:	b087      	sub	sp, #28
 800d2dc:	bf18      	it	ne
 800d2de:	3604      	addne	r6, #4
 800d2e0:	2500      	movs	r5, #0
 800d2e2:	1f37      	subs	r7, r6, #4
 800d2e4:	4682      	mov	sl, r0
 800d2e6:	4690      	mov	r8, r2
 800d2e8:	9301      	str	r3, [sp, #4]
 800d2ea:	f846 5c04 	str.w	r5, [r6, #-4]
 800d2ee:	46b9      	mov	r9, r7
 800d2f0:	463c      	mov	r4, r7
 800d2f2:	9502      	str	r5, [sp, #8]
 800d2f4:	46ab      	mov	fp, r5
 800d2f6:	784a      	ldrb	r2, [r1, #1]
 800d2f8:	1c4b      	adds	r3, r1, #1
 800d2fa:	9303      	str	r3, [sp, #12]
 800d2fc:	b342      	cbz	r2, 800d350 <__hexnan+0x88>
 800d2fe:	4610      	mov	r0, r2
 800d300:	9105      	str	r1, [sp, #20]
 800d302:	9204      	str	r2, [sp, #16]
 800d304:	f7ff fd94 	bl	800ce30 <__hexdig_fun>
 800d308:	2800      	cmp	r0, #0
 800d30a:	d151      	bne.n	800d3b0 <__hexnan+0xe8>
 800d30c:	9a04      	ldr	r2, [sp, #16]
 800d30e:	9905      	ldr	r1, [sp, #20]
 800d310:	2a20      	cmp	r2, #32
 800d312:	d818      	bhi.n	800d346 <__hexnan+0x7e>
 800d314:	9b02      	ldr	r3, [sp, #8]
 800d316:	459b      	cmp	fp, r3
 800d318:	dd13      	ble.n	800d342 <__hexnan+0x7a>
 800d31a:	454c      	cmp	r4, r9
 800d31c:	d206      	bcs.n	800d32c <__hexnan+0x64>
 800d31e:	2d07      	cmp	r5, #7
 800d320:	dc04      	bgt.n	800d32c <__hexnan+0x64>
 800d322:	462a      	mov	r2, r5
 800d324:	4649      	mov	r1, r9
 800d326:	4620      	mov	r0, r4
 800d328:	f7ff ffa8 	bl	800d27c <L_shift>
 800d32c:	4544      	cmp	r4, r8
 800d32e:	d952      	bls.n	800d3d6 <__hexnan+0x10e>
 800d330:	2300      	movs	r3, #0
 800d332:	f1a4 0904 	sub.w	r9, r4, #4
 800d336:	f844 3c04 	str.w	r3, [r4, #-4]
 800d33a:	f8cd b008 	str.w	fp, [sp, #8]
 800d33e:	464c      	mov	r4, r9
 800d340:	461d      	mov	r5, r3
 800d342:	9903      	ldr	r1, [sp, #12]
 800d344:	e7d7      	b.n	800d2f6 <__hexnan+0x2e>
 800d346:	2a29      	cmp	r2, #41	@ 0x29
 800d348:	d157      	bne.n	800d3fa <__hexnan+0x132>
 800d34a:	3102      	adds	r1, #2
 800d34c:	f8ca 1000 	str.w	r1, [sl]
 800d350:	f1bb 0f00 	cmp.w	fp, #0
 800d354:	d051      	beq.n	800d3fa <__hexnan+0x132>
 800d356:	454c      	cmp	r4, r9
 800d358:	d206      	bcs.n	800d368 <__hexnan+0xa0>
 800d35a:	2d07      	cmp	r5, #7
 800d35c:	dc04      	bgt.n	800d368 <__hexnan+0xa0>
 800d35e:	462a      	mov	r2, r5
 800d360:	4649      	mov	r1, r9
 800d362:	4620      	mov	r0, r4
 800d364:	f7ff ff8a 	bl	800d27c <L_shift>
 800d368:	4544      	cmp	r4, r8
 800d36a:	d936      	bls.n	800d3da <__hexnan+0x112>
 800d36c:	f1a8 0204 	sub.w	r2, r8, #4
 800d370:	4623      	mov	r3, r4
 800d372:	f853 1b04 	ldr.w	r1, [r3], #4
 800d376:	f842 1f04 	str.w	r1, [r2, #4]!
 800d37a:	429f      	cmp	r7, r3
 800d37c:	d2f9      	bcs.n	800d372 <__hexnan+0xaa>
 800d37e:	1b3b      	subs	r3, r7, r4
 800d380:	f023 0303 	bic.w	r3, r3, #3
 800d384:	3304      	adds	r3, #4
 800d386:	3401      	adds	r4, #1
 800d388:	3e03      	subs	r6, #3
 800d38a:	42b4      	cmp	r4, r6
 800d38c:	bf88      	it	hi
 800d38e:	2304      	movhi	r3, #4
 800d390:	4443      	add	r3, r8
 800d392:	2200      	movs	r2, #0
 800d394:	f843 2b04 	str.w	r2, [r3], #4
 800d398:	429f      	cmp	r7, r3
 800d39a:	d2fb      	bcs.n	800d394 <__hexnan+0xcc>
 800d39c:	683b      	ldr	r3, [r7, #0]
 800d39e:	b91b      	cbnz	r3, 800d3a8 <__hexnan+0xe0>
 800d3a0:	4547      	cmp	r7, r8
 800d3a2:	d128      	bne.n	800d3f6 <__hexnan+0x12e>
 800d3a4:	2301      	movs	r3, #1
 800d3a6:	603b      	str	r3, [r7, #0]
 800d3a8:	2005      	movs	r0, #5
 800d3aa:	b007      	add	sp, #28
 800d3ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3b0:	3501      	adds	r5, #1
 800d3b2:	2d08      	cmp	r5, #8
 800d3b4:	f10b 0b01 	add.w	fp, fp, #1
 800d3b8:	dd06      	ble.n	800d3c8 <__hexnan+0x100>
 800d3ba:	4544      	cmp	r4, r8
 800d3bc:	d9c1      	bls.n	800d342 <__hexnan+0x7a>
 800d3be:	2300      	movs	r3, #0
 800d3c0:	f844 3c04 	str.w	r3, [r4, #-4]
 800d3c4:	2501      	movs	r5, #1
 800d3c6:	3c04      	subs	r4, #4
 800d3c8:	6822      	ldr	r2, [r4, #0]
 800d3ca:	f000 000f 	and.w	r0, r0, #15
 800d3ce:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800d3d2:	6020      	str	r0, [r4, #0]
 800d3d4:	e7b5      	b.n	800d342 <__hexnan+0x7a>
 800d3d6:	2508      	movs	r5, #8
 800d3d8:	e7b3      	b.n	800d342 <__hexnan+0x7a>
 800d3da:	9b01      	ldr	r3, [sp, #4]
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d0dd      	beq.n	800d39c <__hexnan+0xd4>
 800d3e0:	f1c3 0320 	rsb	r3, r3, #32
 800d3e4:	f04f 32ff 	mov.w	r2, #4294967295
 800d3e8:	40da      	lsrs	r2, r3
 800d3ea:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800d3ee:	4013      	ands	r3, r2
 800d3f0:	f846 3c04 	str.w	r3, [r6, #-4]
 800d3f4:	e7d2      	b.n	800d39c <__hexnan+0xd4>
 800d3f6:	3f04      	subs	r7, #4
 800d3f8:	e7d0      	b.n	800d39c <__hexnan+0xd4>
 800d3fa:	2004      	movs	r0, #4
 800d3fc:	e7d5      	b.n	800d3aa <__hexnan+0xe2>

0800d3fe <__ascii_mbtowc>:
 800d3fe:	b082      	sub	sp, #8
 800d400:	b901      	cbnz	r1, 800d404 <__ascii_mbtowc+0x6>
 800d402:	a901      	add	r1, sp, #4
 800d404:	b142      	cbz	r2, 800d418 <__ascii_mbtowc+0x1a>
 800d406:	b14b      	cbz	r3, 800d41c <__ascii_mbtowc+0x1e>
 800d408:	7813      	ldrb	r3, [r2, #0]
 800d40a:	600b      	str	r3, [r1, #0]
 800d40c:	7812      	ldrb	r2, [r2, #0]
 800d40e:	1e10      	subs	r0, r2, #0
 800d410:	bf18      	it	ne
 800d412:	2001      	movne	r0, #1
 800d414:	b002      	add	sp, #8
 800d416:	4770      	bx	lr
 800d418:	4610      	mov	r0, r2
 800d41a:	e7fb      	b.n	800d414 <__ascii_mbtowc+0x16>
 800d41c:	f06f 0001 	mvn.w	r0, #1
 800d420:	e7f8      	b.n	800d414 <__ascii_mbtowc+0x16>

0800d422 <_realloc_r>:
 800d422:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d426:	4607      	mov	r7, r0
 800d428:	4614      	mov	r4, r2
 800d42a:	460d      	mov	r5, r1
 800d42c:	b921      	cbnz	r1, 800d438 <_realloc_r+0x16>
 800d42e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d432:	4611      	mov	r1, r2
 800d434:	f7fd bec6 	b.w	800b1c4 <_malloc_r>
 800d438:	b92a      	cbnz	r2, 800d446 <_realloc_r+0x24>
 800d43a:	f7fd fe4f 	bl	800b0dc <_free_r>
 800d43e:	4625      	mov	r5, r4
 800d440:	4628      	mov	r0, r5
 800d442:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d446:	f000 f840 	bl	800d4ca <_malloc_usable_size_r>
 800d44a:	4284      	cmp	r4, r0
 800d44c:	4606      	mov	r6, r0
 800d44e:	d802      	bhi.n	800d456 <_realloc_r+0x34>
 800d450:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d454:	d8f4      	bhi.n	800d440 <_realloc_r+0x1e>
 800d456:	4621      	mov	r1, r4
 800d458:	4638      	mov	r0, r7
 800d45a:	f7fd feb3 	bl	800b1c4 <_malloc_r>
 800d45e:	4680      	mov	r8, r0
 800d460:	b908      	cbnz	r0, 800d466 <_realloc_r+0x44>
 800d462:	4645      	mov	r5, r8
 800d464:	e7ec      	b.n	800d440 <_realloc_r+0x1e>
 800d466:	42b4      	cmp	r4, r6
 800d468:	4622      	mov	r2, r4
 800d46a:	4629      	mov	r1, r5
 800d46c:	bf28      	it	cs
 800d46e:	4632      	movcs	r2, r6
 800d470:	f7fd f839 	bl	800a4e6 <memcpy>
 800d474:	4629      	mov	r1, r5
 800d476:	4638      	mov	r0, r7
 800d478:	f7fd fe30 	bl	800b0dc <_free_r>
 800d47c:	e7f1      	b.n	800d462 <_realloc_r+0x40>

0800d47e <__ascii_wctomb>:
 800d47e:	4603      	mov	r3, r0
 800d480:	4608      	mov	r0, r1
 800d482:	b141      	cbz	r1, 800d496 <__ascii_wctomb+0x18>
 800d484:	2aff      	cmp	r2, #255	@ 0xff
 800d486:	d904      	bls.n	800d492 <__ascii_wctomb+0x14>
 800d488:	228a      	movs	r2, #138	@ 0x8a
 800d48a:	601a      	str	r2, [r3, #0]
 800d48c:	f04f 30ff 	mov.w	r0, #4294967295
 800d490:	4770      	bx	lr
 800d492:	700a      	strb	r2, [r1, #0]
 800d494:	2001      	movs	r0, #1
 800d496:	4770      	bx	lr

0800d498 <fiprintf>:
 800d498:	b40e      	push	{r1, r2, r3}
 800d49a:	b503      	push	{r0, r1, lr}
 800d49c:	4601      	mov	r1, r0
 800d49e:	ab03      	add	r3, sp, #12
 800d4a0:	4805      	ldr	r0, [pc, #20]	@ (800d4b8 <fiprintf+0x20>)
 800d4a2:	f853 2b04 	ldr.w	r2, [r3], #4
 800d4a6:	6800      	ldr	r0, [r0, #0]
 800d4a8:	9301      	str	r3, [sp, #4]
 800d4aa:	f000 f83f 	bl	800d52c <_vfiprintf_r>
 800d4ae:	b002      	add	sp, #8
 800d4b0:	f85d eb04 	ldr.w	lr, [sp], #4
 800d4b4:	b003      	add	sp, #12
 800d4b6:	4770      	bx	lr
 800d4b8:	2000001c 	.word	0x2000001c

0800d4bc <abort>:
 800d4bc:	b508      	push	{r3, lr}
 800d4be:	2006      	movs	r0, #6
 800d4c0:	f000 fa08 	bl	800d8d4 <raise>
 800d4c4:	2001      	movs	r0, #1
 800d4c6:	f7f4 f8e5 	bl	8001694 <_exit>

0800d4ca <_malloc_usable_size_r>:
 800d4ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d4ce:	1f18      	subs	r0, r3, #4
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	bfbc      	itt	lt
 800d4d4:	580b      	ldrlt	r3, [r1, r0]
 800d4d6:	18c0      	addlt	r0, r0, r3
 800d4d8:	4770      	bx	lr

0800d4da <__sfputc_r>:
 800d4da:	6893      	ldr	r3, [r2, #8]
 800d4dc:	3b01      	subs	r3, #1
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	b410      	push	{r4}
 800d4e2:	6093      	str	r3, [r2, #8]
 800d4e4:	da08      	bge.n	800d4f8 <__sfputc_r+0x1e>
 800d4e6:	6994      	ldr	r4, [r2, #24]
 800d4e8:	42a3      	cmp	r3, r4
 800d4ea:	db01      	blt.n	800d4f0 <__sfputc_r+0x16>
 800d4ec:	290a      	cmp	r1, #10
 800d4ee:	d103      	bne.n	800d4f8 <__sfputc_r+0x1e>
 800d4f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d4f4:	f000 b932 	b.w	800d75c <__swbuf_r>
 800d4f8:	6813      	ldr	r3, [r2, #0]
 800d4fa:	1c58      	adds	r0, r3, #1
 800d4fc:	6010      	str	r0, [r2, #0]
 800d4fe:	7019      	strb	r1, [r3, #0]
 800d500:	4608      	mov	r0, r1
 800d502:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d506:	4770      	bx	lr

0800d508 <__sfputs_r>:
 800d508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d50a:	4606      	mov	r6, r0
 800d50c:	460f      	mov	r7, r1
 800d50e:	4614      	mov	r4, r2
 800d510:	18d5      	adds	r5, r2, r3
 800d512:	42ac      	cmp	r4, r5
 800d514:	d101      	bne.n	800d51a <__sfputs_r+0x12>
 800d516:	2000      	movs	r0, #0
 800d518:	e007      	b.n	800d52a <__sfputs_r+0x22>
 800d51a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d51e:	463a      	mov	r2, r7
 800d520:	4630      	mov	r0, r6
 800d522:	f7ff ffda 	bl	800d4da <__sfputc_r>
 800d526:	1c43      	adds	r3, r0, #1
 800d528:	d1f3      	bne.n	800d512 <__sfputs_r+0xa>
 800d52a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d52c <_vfiprintf_r>:
 800d52c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d530:	460d      	mov	r5, r1
 800d532:	b09d      	sub	sp, #116	@ 0x74
 800d534:	4614      	mov	r4, r2
 800d536:	4698      	mov	r8, r3
 800d538:	4606      	mov	r6, r0
 800d53a:	b118      	cbz	r0, 800d544 <_vfiprintf_r+0x18>
 800d53c:	6a03      	ldr	r3, [r0, #32]
 800d53e:	b90b      	cbnz	r3, 800d544 <_vfiprintf_r+0x18>
 800d540:	f7fc fe22 	bl	800a188 <__sinit>
 800d544:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d546:	07d9      	lsls	r1, r3, #31
 800d548:	d405      	bmi.n	800d556 <_vfiprintf_r+0x2a>
 800d54a:	89ab      	ldrh	r3, [r5, #12]
 800d54c:	059a      	lsls	r2, r3, #22
 800d54e:	d402      	bmi.n	800d556 <_vfiprintf_r+0x2a>
 800d550:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d552:	f7fc ffc6 	bl	800a4e2 <__retarget_lock_acquire_recursive>
 800d556:	89ab      	ldrh	r3, [r5, #12]
 800d558:	071b      	lsls	r3, r3, #28
 800d55a:	d501      	bpl.n	800d560 <_vfiprintf_r+0x34>
 800d55c:	692b      	ldr	r3, [r5, #16]
 800d55e:	b99b      	cbnz	r3, 800d588 <_vfiprintf_r+0x5c>
 800d560:	4629      	mov	r1, r5
 800d562:	4630      	mov	r0, r6
 800d564:	f000 f938 	bl	800d7d8 <__swsetup_r>
 800d568:	b170      	cbz	r0, 800d588 <_vfiprintf_r+0x5c>
 800d56a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d56c:	07dc      	lsls	r4, r3, #31
 800d56e:	d504      	bpl.n	800d57a <_vfiprintf_r+0x4e>
 800d570:	f04f 30ff 	mov.w	r0, #4294967295
 800d574:	b01d      	add	sp, #116	@ 0x74
 800d576:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d57a:	89ab      	ldrh	r3, [r5, #12]
 800d57c:	0598      	lsls	r0, r3, #22
 800d57e:	d4f7      	bmi.n	800d570 <_vfiprintf_r+0x44>
 800d580:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d582:	f7fc ffaf 	bl	800a4e4 <__retarget_lock_release_recursive>
 800d586:	e7f3      	b.n	800d570 <_vfiprintf_r+0x44>
 800d588:	2300      	movs	r3, #0
 800d58a:	9309      	str	r3, [sp, #36]	@ 0x24
 800d58c:	2320      	movs	r3, #32
 800d58e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d592:	f8cd 800c 	str.w	r8, [sp, #12]
 800d596:	2330      	movs	r3, #48	@ 0x30
 800d598:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d748 <_vfiprintf_r+0x21c>
 800d59c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d5a0:	f04f 0901 	mov.w	r9, #1
 800d5a4:	4623      	mov	r3, r4
 800d5a6:	469a      	mov	sl, r3
 800d5a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d5ac:	b10a      	cbz	r2, 800d5b2 <_vfiprintf_r+0x86>
 800d5ae:	2a25      	cmp	r2, #37	@ 0x25
 800d5b0:	d1f9      	bne.n	800d5a6 <_vfiprintf_r+0x7a>
 800d5b2:	ebba 0b04 	subs.w	fp, sl, r4
 800d5b6:	d00b      	beq.n	800d5d0 <_vfiprintf_r+0xa4>
 800d5b8:	465b      	mov	r3, fp
 800d5ba:	4622      	mov	r2, r4
 800d5bc:	4629      	mov	r1, r5
 800d5be:	4630      	mov	r0, r6
 800d5c0:	f7ff ffa2 	bl	800d508 <__sfputs_r>
 800d5c4:	3001      	adds	r0, #1
 800d5c6:	f000 80a7 	beq.w	800d718 <_vfiprintf_r+0x1ec>
 800d5ca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d5cc:	445a      	add	r2, fp
 800d5ce:	9209      	str	r2, [sp, #36]	@ 0x24
 800d5d0:	f89a 3000 	ldrb.w	r3, [sl]
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	f000 809f 	beq.w	800d718 <_vfiprintf_r+0x1ec>
 800d5da:	2300      	movs	r3, #0
 800d5dc:	f04f 32ff 	mov.w	r2, #4294967295
 800d5e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d5e4:	f10a 0a01 	add.w	sl, sl, #1
 800d5e8:	9304      	str	r3, [sp, #16]
 800d5ea:	9307      	str	r3, [sp, #28]
 800d5ec:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d5f0:	931a      	str	r3, [sp, #104]	@ 0x68
 800d5f2:	4654      	mov	r4, sl
 800d5f4:	2205      	movs	r2, #5
 800d5f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d5fa:	4853      	ldr	r0, [pc, #332]	@ (800d748 <_vfiprintf_r+0x21c>)
 800d5fc:	f7f2 fe20 	bl	8000240 <memchr>
 800d600:	9a04      	ldr	r2, [sp, #16]
 800d602:	b9d8      	cbnz	r0, 800d63c <_vfiprintf_r+0x110>
 800d604:	06d1      	lsls	r1, r2, #27
 800d606:	bf44      	itt	mi
 800d608:	2320      	movmi	r3, #32
 800d60a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d60e:	0713      	lsls	r3, r2, #28
 800d610:	bf44      	itt	mi
 800d612:	232b      	movmi	r3, #43	@ 0x2b
 800d614:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d618:	f89a 3000 	ldrb.w	r3, [sl]
 800d61c:	2b2a      	cmp	r3, #42	@ 0x2a
 800d61e:	d015      	beq.n	800d64c <_vfiprintf_r+0x120>
 800d620:	9a07      	ldr	r2, [sp, #28]
 800d622:	4654      	mov	r4, sl
 800d624:	2000      	movs	r0, #0
 800d626:	f04f 0c0a 	mov.w	ip, #10
 800d62a:	4621      	mov	r1, r4
 800d62c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d630:	3b30      	subs	r3, #48	@ 0x30
 800d632:	2b09      	cmp	r3, #9
 800d634:	d94b      	bls.n	800d6ce <_vfiprintf_r+0x1a2>
 800d636:	b1b0      	cbz	r0, 800d666 <_vfiprintf_r+0x13a>
 800d638:	9207      	str	r2, [sp, #28]
 800d63a:	e014      	b.n	800d666 <_vfiprintf_r+0x13a>
 800d63c:	eba0 0308 	sub.w	r3, r0, r8
 800d640:	fa09 f303 	lsl.w	r3, r9, r3
 800d644:	4313      	orrs	r3, r2
 800d646:	9304      	str	r3, [sp, #16]
 800d648:	46a2      	mov	sl, r4
 800d64a:	e7d2      	b.n	800d5f2 <_vfiprintf_r+0xc6>
 800d64c:	9b03      	ldr	r3, [sp, #12]
 800d64e:	1d19      	adds	r1, r3, #4
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	9103      	str	r1, [sp, #12]
 800d654:	2b00      	cmp	r3, #0
 800d656:	bfbb      	ittet	lt
 800d658:	425b      	neglt	r3, r3
 800d65a:	f042 0202 	orrlt.w	r2, r2, #2
 800d65e:	9307      	strge	r3, [sp, #28]
 800d660:	9307      	strlt	r3, [sp, #28]
 800d662:	bfb8      	it	lt
 800d664:	9204      	strlt	r2, [sp, #16]
 800d666:	7823      	ldrb	r3, [r4, #0]
 800d668:	2b2e      	cmp	r3, #46	@ 0x2e
 800d66a:	d10a      	bne.n	800d682 <_vfiprintf_r+0x156>
 800d66c:	7863      	ldrb	r3, [r4, #1]
 800d66e:	2b2a      	cmp	r3, #42	@ 0x2a
 800d670:	d132      	bne.n	800d6d8 <_vfiprintf_r+0x1ac>
 800d672:	9b03      	ldr	r3, [sp, #12]
 800d674:	1d1a      	adds	r2, r3, #4
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	9203      	str	r2, [sp, #12]
 800d67a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d67e:	3402      	adds	r4, #2
 800d680:	9305      	str	r3, [sp, #20]
 800d682:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d758 <_vfiprintf_r+0x22c>
 800d686:	7821      	ldrb	r1, [r4, #0]
 800d688:	2203      	movs	r2, #3
 800d68a:	4650      	mov	r0, sl
 800d68c:	f7f2 fdd8 	bl	8000240 <memchr>
 800d690:	b138      	cbz	r0, 800d6a2 <_vfiprintf_r+0x176>
 800d692:	9b04      	ldr	r3, [sp, #16]
 800d694:	eba0 000a 	sub.w	r0, r0, sl
 800d698:	2240      	movs	r2, #64	@ 0x40
 800d69a:	4082      	lsls	r2, r0
 800d69c:	4313      	orrs	r3, r2
 800d69e:	3401      	adds	r4, #1
 800d6a0:	9304      	str	r3, [sp, #16]
 800d6a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d6a6:	4829      	ldr	r0, [pc, #164]	@ (800d74c <_vfiprintf_r+0x220>)
 800d6a8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d6ac:	2206      	movs	r2, #6
 800d6ae:	f7f2 fdc7 	bl	8000240 <memchr>
 800d6b2:	2800      	cmp	r0, #0
 800d6b4:	d03f      	beq.n	800d736 <_vfiprintf_r+0x20a>
 800d6b6:	4b26      	ldr	r3, [pc, #152]	@ (800d750 <_vfiprintf_r+0x224>)
 800d6b8:	bb1b      	cbnz	r3, 800d702 <_vfiprintf_r+0x1d6>
 800d6ba:	9b03      	ldr	r3, [sp, #12]
 800d6bc:	3307      	adds	r3, #7
 800d6be:	f023 0307 	bic.w	r3, r3, #7
 800d6c2:	3308      	adds	r3, #8
 800d6c4:	9303      	str	r3, [sp, #12]
 800d6c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d6c8:	443b      	add	r3, r7
 800d6ca:	9309      	str	r3, [sp, #36]	@ 0x24
 800d6cc:	e76a      	b.n	800d5a4 <_vfiprintf_r+0x78>
 800d6ce:	fb0c 3202 	mla	r2, ip, r2, r3
 800d6d2:	460c      	mov	r4, r1
 800d6d4:	2001      	movs	r0, #1
 800d6d6:	e7a8      	b.n	800d62a <_vfiprintf_r+0xfe>
 800d6d8:	2300      	movs	r3, #0
 800d6da:	3401      	adds	r4, #1
 800d6dc:	9305      	str	r3, [sp, #20]
 800d6de:	4619      	mov	r1, r3
 800d6e0:	f04f 0c0a 	mov.w	ip, #10
 800d6e4:	4620      	mov	r0, r4
 800d6e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d6ea:	3a30      	subs	r2, #48	@ 0x30
 800d6ec:	2a09      	cmp	r2, #9
 800d6ee:	d903      	bls.n	800d6f8 <_vfiprintf_r+0x1cc>
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d0c6      	beq.n	800d682 <_vfiprintf_r+0x156>
 800d6f4:	9105      	str	r1, [sp, #20]
 800d6f6:	e7c4      	b.n	800d682 <_vfiprintf_r+0x156>
 800d6f8:	fb0c 2101 	mla	r1, ip, r1, r2
 800d6fc:	4604      	mov	r4, r0
 800d6fe:	2301      	movs	r3, #1
 800d700:	e7f0      	b.n	800d6e4 <_vfiprintf_r+0x1b8>
 800d702:	ab03      	add	r3, sp, #12
 800d704:	9300      	str	r3, [sp, #0]
 800d706:	462a      	mov	r2, r5
 800d708:	4b12      	ldr	r3, [pc, #72]	@ (800d754 <_vfiprintf_r+0x228>)
 800d70a:	a904      	add	r1, sp, #16
 800d70c:	4630      	mov	r0, r6
 800d70e:	f7fb ff03 	bl	8009518 <_printf_float>
 800d712:	4607      	mov	r7, r0
 800d714:	1c78      	adds	r0, r7, #1
 800d716:	d1d6      	bne.n	800d6c6 <_vfiprintf_r+0x19a>
 800d718:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d71a:	07d9      	lsls	r1, r3, #31
 800d71c:	d405      	bmi.n	800d72a <_vfiprintf_r+0x1fe>
 800d71e:	89ab      	ldrh	r3, [r5, #12]
 800d720:	059a      	lsls	r2, r3, #22
 800d722:	d402      	bmi.n	800d72a <_vfiprintf_r+0x1fe>
 800d724:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d726:	f7fc fedd 	bl	800a4e4 <__retarget_lock_release_recursive>
 800d72a:	89ab      	ldrh	r3, [r5, #12]
 800d72c:	065b      	lsls	r3, r3, #25
 800d72e:	f53f af1f 	bmi.w	800d570 <_vfiprintf_r+0x44>
 800d732:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d734:	e71e      	b.n	800d574 <_vfiprintf_r+0x48>
 800d736:	ab03      	add	r3, sp, #12
 800d738:	9300      	str	r3, [sp, #0]
 800d73a:	462a      	mov	r2, r5
 800d73c:	4b05      	ldr	r3, [pc, #20]	@ (800d754 <_vfiprintf_r+0x228>)
 800d73e:	a904      	add	r1, sp, #16
 800d740:	4630      	mov	r0, r6
 800d742:	f7fc f971 	bl	8009a28 <_printf_i>
 800d746:	e7e4      	b.n	800d712 <_vfiprintf_r+0x1e6>
 800d748:	0800dd0d 	.word	0x0800dd0d
 800d74c:	0800dd17 	.word	0x0800dd17
 800d750:	08009519 	.word	0x08009519
 800d754:	0800d509 	.word	0x0800d509
 800d758:	0800dd13 	.word	0x0800dd13

0800d75c <__swbuf_r>:
 800d75c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d75e:	460e      	mov	r6, r1
 800d760:	4614      	mov	r4, r2
 800d762:	4605      	mov	r5, r0
 800d764:	b118      	cbz	r0, 800d76e <__swbuf_r+0x12>
 800d766:	6a03      	ldr	r3, [r0, #32]
 800d768:	b90b      	cbnz	r3, 800d76e <__swbuf_r+0x12>
 800d76a:	f7fc fd0d 	bl	800a188 <__sinit>
 800d76e:	69a3      	ldr	r3, [r4, #24]
 800d770:	60a3      	str	r3, [r4, #8]
 800d772:	89a3      	ldrh	r3, [r4, #12]
 800d774:	071a      	lsls	r2, r3, #28
 800d776:	d501      	bpl.n	800d77c <__swbuf_r+0x20>
 800d778:	6923      	ldr	r3, [r4, #16]
 800d77a:	b943      	cbnz	r3, 800d78e <__swbuf_r+0x32>
 800d77c:	4621      	mov	r1, r4
 800d77e:	4628      	mov	r0, r5
 800d780:	f000 f82a 	bl	800d7d8 <__swsetup_r>
 800d784:	b118      	cbz	r0, 800d78e <__swbuf_r+0x32>
 800d786:	f04f 37ff 	mov.w	r7, #4294967295
 800d78a:	4638      	mov	r0, r7
 800d78c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d78e:	6823      	ldr	r3, [r4, #0]
 800d790:	6922      	ldr	r2, [r4, #16]
 800d792:	1a98      	subs	r0, r3, r2
 800d794:	6963      	ldr	r3, [r4, #20]
 800d796:	b2f6      	uxtb	r6, r6
 800d798:	4283      	cmp	r3, r0
 800d79a:	4637      	mov	r7, r6
 800d79c:	dc05      	bgt.n	800d7aa <__swbuf_r+0x4e>
 800d79e:	4621      	mov	r1, r4
 800d7a0:	4628      	mov	r0, r5
 800d7a2:	f7ff fa55 	bl	800cc50 <_fflush_r>
 800d7a6:	2800      	cmp	r0, #0
 800d7a8:	d1ed      	bne.n	800d786 <__swbuf_r+0x2a>
 800d7aa:	68a3      	ldr	r3, [r4, #8]
 800d7ac:	3b01      	subs	r3, #1
 800d7ae:	60a3      	str	r3, [r4, #8]
 800d7b0:	6823      	ldr	r3, [r4, #0]
 800d7b2:	1c5a      	adds	r2, r3, #1
 800d7b4:	6022      	str	r2, [r4, #0]
 800d7b6:	701e      	strb	r6, [r3, #0]
 800d7b8:	6962      	ldr	r2, [r4, #20]
 800d7ba:	1c43      	adds	r3, r0, #1
 800d7bc:	429a      	cmp	r2, r3
 800d7be:	d004      	beq.n	800d7ca <__swbuf_r+0x6e>
 800d7c0:	89a3      	ldrh	r3, [r4, #12]
 800d7c2:	07db      	lsls	r3, r3, #31
 800d7c4:	d5e1      	bpl.n	800d78a <__swbuf_r+0x2e>
 800d7c6:	2e0a      	cmp	r6, #10
 800d7c8:	d1df      	bne.n	800d78a <__swbuf_r+0x2e>
 800d7ca:	4621      	mov	r1, r4
 800d7cc:	4628      	mov	r0, r5
 800d7ce:	f7ff fa3f 	bl	800cc50 <_fflush_r>
 800d7d2:	2800      	cmp	r0, #0
 800d7d4:	d0d9      	beq.n	800d78a <__swbuf_r+0x2e>
 800d7d6:	e7d6      	b.n	800d786 <__swbuf_r+0x2a>

0800d7d8 <__swsetup_r>:
 800d7d8:	b538      	push	{r3, r4, r5, lr}
 800d7da:	4b29      	ldr	r3, [pc, #164]	@ (800d880 <__swsetup_r+0xa8>)
 800d7dc:	4605      	mov	r5, r0
 800d7de:	6818      	ldr	r0, [r3, #0]
 800d7e0:	460c      	mov	r4, r1
 800d7e2:	b118      	cbz	r0, 800d7ec <__swsetup_r+0x14>
 800d7e4:	6a03      	ldr	r3, [r0, #32]
 800d7e6:	b90b      	cbnz	r3, 800d7ec <__swsetup_r+0x14>
 800d7e8:	f7fc fcce 	bl	800a188 <__sinit>
 800d7ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d7f0:	0719      	lsls	r1, r3, #28
 800d7f2:	d422      	bmi.n	800d83a <__swsetup_r+0x62>
 800d7f4:	06da      	lsls	r2, r3, #27
 800d7f6:	d407      	bmi.n	800d808 <__swsetup_r+0x30>
 800d7f8:	2209      	movs	r2, #9
 800d7fa:	602a      	str	r2, [r5, #0]
 800d7fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d800:	81a3      	strh	r3, [r4, #12]
 800d802:	f04f 30ff 	mov.w	r0, #4294967295
 800d806:	e033      	b.n	800d870 <__swsetup_r+0x98>
 800d808:	0758      	lsls	r0, r3, #29
 800d80a:	d512      	bpl.n	800d832 <__swsetup_r+0x5a>
 800d80c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d80e:	b141      	cbz	r1, 800d822 <__swsetup_r+0x4a>
 800d810:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d814:	4299      	cmp	r1, r3
 800d816:	d002      	beq.n	800d81e <__swsetup_r+0x46>
 800d818:	4628      	mov	r0, r5
 800d81a:	f7fd fc5f 	bl	800b0dc <_free_r>
 800d81e:	2300      	movs	r3, #0
 800d820:	6363      	str	r3, [r4, #52]	@ 0x34
 800d822:	89a3      	ldrh	r3, [r4, #12]
 800d824:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d828:	81a3      	strh	r3, [r4, #12]
 800d82a:	2300      	movs	r3, #0
 800d82c:	6063      	str	r3, [r4, #4]
 800d82e:	6923      	ldr	r3, [r4, #16]
 800d830:	6023      	str	r3, [r4, #0]
 800d832:	89a3      	ldrh	r3, [r4, #12]
 800d834:	f043 0308 	orr.w	r3, r3, #8
 800d838:	81a3      	strh	r3, [r4, #12]
 800d83a:	6923      	ldr	r3, [r4, #16]
 800d83c:	b94b      	cbnz	r3, 800d852 <__swsetup_r+0x7a>
 800d83e:	89a3      	ldrh	r3, [r4, #12]
 800d840:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d844:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d848:	d003      	beq.n	800d852 <__swsetup_r+0x7a>
 800d84a:	4621      	mov	r1, r4
 800d84c:	4628      	mov	r0, r5
 800d84e:	f000 f883 	bl	800d958 <__smakebuf_r>
 800d852:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d856:	f013 0201 	ands.w	r2, r3, #1
 800d85a:	d00a      	beq.n	800d872 <__swsetup_r+0x9a>
 800d85c:	2200      	movs	r2, #0
 800d85e:	60a2      	str	r2, [r4, #8]
 800d860:	6962      	ldr	r2, [r4, #20]
 800d862:	4252      	negs	r2, r2
 800d864:	61a2      	str	r2, [r4, #24]
 800d866:	6922      	ldr	r2, [r4, #16]
 800d868:	b942      	cbnz	r2, 800d87c <__swsetup_r+0xa4>
 800d86a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d86e:	d1c5      	bne.n	800d7fc <__swsetup_r+0x24>
 800d870:	bd38      	pop	{r3, r4, r5, pc}
 800d872:	0799      	lsls	r1, r3, #30
 800d874:	bf58      	it	pl
 800d876:	6962      	ldrpl	r2, [r4, #20]
 800d878:	60a2      	str	r2, [r4, #8]
 800d87a:	e7f4      	b.n	800d866 <__swsetup_r+0x8e>
 800d87c:	2000      	movs	r0, #0
 800d87e:	e7f7      	b.n	800d870 <__swsetup_r+0x98>
 800d880:	2000001c 	.word	0x2000001c

0800d884 <_raise_r>:
 800d884:	291f      	cmp	r1, #31
 800d886:	b538      	push	{r3, r4, r5, lr}
 800d888:	4605      	mov	r5, r0
 800d88a:	460c      	mov	r4, r1
 800d88c:	d904      	bls.n	800d898 <_raise_r+0x14>
 800d88e:	2316      	movs	r3, #22
 800d890:	6003      	str	r3, [r0, #0]
 800d892:	f04f 30ff 	mov.w	r0, #4294967295
 800d896:	bd38      	pop	{r3, r4, r5, pc}
 800d898:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d89a:	b112      	cbz	r2, 800d8a2 <_raise_r+0x1e>
 800d89c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d8a0:	b94b      	cbnz	r3, 800d8b6 <_raise_r+0x32>
 800d8a2:	4628      	mov	r0, r5
 800d8a4:	f000 f830 	bl	800d908 <_getpid_r>
 800d8a8:	4622      	mov	r2, r4
 800d8aa:	4601      	mov	r1, r0
 800d8ac:	4628      	mov	r0, r5
 800d8ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d8b2:	f000 b817 	b.w	800d8e4 <_kill_r>
 800d8b6:	2b01      	cmp	r3, #1
 800d8b8:	d00a      	beq.n	800d8d0 <_raise_r+0x4c>
 800d8ba:	1c59      	adds	r1, r3, #1
 800d8bc:	d103      	bne.n	800d8c6 <_raise_r+0x42>
 800d8be:	2316      	movs	r3, #22
 800d8c0:	6003      	str	r3, [r0, #0]
 800d8c2:	2001      	movs	r0, #1
 800d8c4:	e7e7      	b.n	800d896 <_raise_r+0x12>
 800d8c6:	2100      	movs	r1, #0
 800d8c8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d8cc:	4620      	mov	r0, r4
 800d8ce:	4798      	blx	r3
 800d8d0:	2000      	movs	r0, #0
 800d8d2:	e7e0      	b.n	800d896 <_raise_r+0x12>

0800d8d4 <raise>:
 800d8d4:	4b02      	ldr	r3, [pc, #8]	@ (800d8e0 <raise+0xc>)
 800d8d6:	4601      	mov	r1, r0
 800d8d8:	6818      	ldr	r0, [r3, #0]
 800d8da:	f7ff bfd3 	b.w	800d884 <_raise_r>
 800d8de:	bf00      	nop
 800d8e0:	2000001c 	.word	0x2000001c

0800d8e4 <_kill_r>:
 800d8e4:	b538      	push	{r3, r4, r5, lr}
 800d8e6:	4d07      	ldr	r5, [pc, #28]	@ (800d904 <_kill_r+0x20>)
 800d8e8:	2300      	movs	r3, #0
 800d8ea:	4604      	mov	r4, r0
 800d8ec:	4608      	mov	r0, r1
 800d8ee:	4611      	mov	r1, r2
 800d8f0:	602b      	str	r3, [r5, #0]
 800d8f2:	f7f3 febf 	bl	8001674 <_kill>
 800d8f6:	1c43      	adds	r3, r0, #1
 800d8f8:	d102      	bne.n	800d900 <_kill_r+0x1c>
 800d8fa:	682b      	ldr	r3, [r5, #0]
 800d8fc:	b103      	cbz	r3, 800d900 <_kill_r+0x1c>
 800d8fe:	6023      	str	r3, [r4, #0]
 800d900:	bd38      	pop	{r3, r4, r5, pc}
 800d902:	bf00      	nop
 800d904:	20005558 	.word	0x20005558

0800d908 <_getpid_r>:
 800d908:	f7f3 beac 	b.w	8001664 <_getpid>

0800d90c <__swhatbuf_r>:
 800d90c:	b570      	push	{r4, r5, r6, lr}
 800d90e:	460c      	mov	r4, r1
 800d910:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d914:	2900      	cmp	r1, #0
 800d916:	b096      	sub	sp, #88	@ 0x58
 800d918:	4615      	mov	r5, r2
 800d91a:	461e      	mov	r6, r3
 800d91c:	da0d      	bge.n	800d93a <__swhatbuf_r+0x2e>
 800d91e:	89a3      	ldrh	r3, [r4, #12]
 800d920:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d924:	f04f 0100 	mov.w	r1, #0
 800d928:	bf14      	ite	ne
 800d92a:	2340      	movne	r3, #64	@ 0x40
 800d92c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d930:	2000      	movs	r0, #0
 800d932:	6031      	str	r1, [r6, #0]
 800d934:	602b      	str	r3, [r5, #0]
 800d936:	b016      	add	sp, #88	@ 0x58
 800d938:	bd70      	pop	{r4, r5, r6, pc}
 800d93a:	466a      	mov	r2, sp
 800d93c:	f000 f848 	bl	800d9d0 <_fstat_r>
 800d940:	2800      	cmp	r0, #0
 800d942:	dbec      	blt.n	800d91e <__swhatbuf_r+0x12>
 800d944:	9901      	ldr	r1, [sp, #4]
 800d946:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d94a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d94e:	4259      	negs	r1, r3
 800d950:	4159      	adcs	r1, r3
 800d952:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d956:	e7eb      	b.n	800d930 <__swhatbuf_r+0x24>

0800d958 <__smakebuf_r>:
 800d958:	898b      	ldrh	r3, [r1, #12]
 800d95a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d95c:	079d      	lsls	r5, r3, #30
 800d95e:	4606      	mov	r6, r0
 800d960:	460c      	mov	r4, r1
 800d962:	d507      	bpl.n	800d974 <__smakebuf_r+0x1c>
 800d964:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d968:	6023      	str	r3, [r4, #0]
 800d96a:	6123      	str	r3, [r4, #16]
 800d96c:	2301      	movs	r3, #1
 800d96e:	6163      	str	r3, [r4, #20]
 800d970:	b003      	add	sp, #12
 800d972:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d974:	ab01      	add	r3, sp, #4
 800d976:	466a      	mov	r2, sp
 800d978:	f7ff ffc8 	bl	800d90c <__swhatbuf_r>
 800d97c:	9f00      	ldr	r7, [sp, #0]
 800d97e:	4605      	mov	r5, r0
 800d980:	4639      	mov	r1, r7
 800d982:	4630      	mov	r0, r6
 800d984:	f7fd fc1e 	bl	800b1c4 <_malloc_r>
 800d988:	b948      	cbnz	r0, 800d99e <__smakebuf_r+0x46>
 800d98a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d98e:	059a      	lsls	r2, r3, #22
 800d990:	d4ee      	bmi.n	800d970 <__smakebuf_r+0x18>
 800d992:	f023 0303 	bic.w	r3, r3, #3
 800d996:	f043 0302 	orr.w	r3, r3, #2
 800d99a:	81a3      	strh	r3, [r4, #12]
 800d99c:	e7e2      	b.n	800d964 <__smakebuf_r+0xc>
 800d99e:	89a3      	ldrh	r3, [r4, #12]
 800d9a0:	6020      	str	r0, [r4, #0]
 800d9a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d9a6:	81a3      	strh	r3, [r4, #12]
 800d9a8:	9b01      	ldr	r3, [sp, #4]
 800d9aa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d9ae:	b15b      	cbz	r3, 800d9c8 <__smakebuf_r+0x70>
 800d9b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d9b4:	4630      	mov	r0, r6
 800d9b6:	f000 f81d 	bl	800d9f4 <_isatty_r>
 800d9ba:	b128      	cbz	r0, 800d9c8 <__smakebuf_r+0x70>
 800d9bc:	89a3      	ldrh	r3, [r4, #12]
 800d9be:	f023 0303 	bic.w	r3, r3, #3
 800d9c2:	f043 0301 	orr.w	r3, r3, #1
 800d9c6:	81a3      	strh	r3, [r4, #12]
 800d9c8:	89a3      	ldrh	r3, [r4, #12]
 800d9ca:	431d      	orrs	r5, r3
 800d9cc:	81a5      	strh	r5, [r4, #12]
 800d9ce:	e7cf      	b.n	800d970 <__smakebuf_r+0x18>

0800d9d0 <_fstat_r>:
 800d9d0:	b538      	push	{r3, r4, r5, lr}
 800d9d2:	4d07      	ldr	r5, [pc, #28]	@ (800d9f0 <_fstat_r+0x20>)
 800d9d4:	2300      	movs	r3, #0
 800d9d6:	4604      	mov	r4, r0
 800d9d8:	4608      	mov	r0, r1
 800d9da:	4611      	mov	r1, r2
 800d9dc:	602b      	str	r3, [r5, #0]
 800d9de:	f7f3 fea9 	bl	8001734 <_fstat>
 800d9e2:	1c43      	adds	r3, r0, #1
 800d9e4:	d102      	bne.n	800d9ec <_fstat_r+0x1c>
 800d9e6:	682b      	ldr	r3, [r5, #0]
 800d9e8:	b103      	cbz	r3, 800d9ec <_fstat_r+0x1c>
 800d9ea:	6023      	str	r3, [r4, #0]
 800d9ec:	bd38      	pop	{r3, r4, r5, pc}
 800d9ee:	bf00      	nop
 800d9f0:	20005558 	.word	0x20005558

0800d9f4 <_isatty_r>:
 800d9f4:	b538      	push	{r3, r4, r5, lr}
 800d9f6:	4d06      	ldr	r5, [pc, #24]	@ (800da10 <_isatty_r+0x1c>)
 800d9f8:	2300      	movs	r3, #0
 800d9fa:	4604      	mov	r4, r0
 800d9fc:	4608      	mov	r0, r1
 800d9fe:	602b      	str	r3, [r5, #0]
 800da00:	f7f3 fea8 	bl	8001754 <_isatty>
 800da04:	1c43      	adds	r3, r0, #1
 800da06:	d102      	bne.n	800da0e <_isatty_r+0x1a>
 800da08:	682b      	ldr	r3, [r5, #0]
 800da0a:	b103      	cbz	r3, 800da0e <_isatty_r+0x1a>
 800da0c:	6023      	str	r3, [r4, #0]
 800da0e:	bd38      	pop	{r3, r4, r5, pc}
 800da10:	20005558 	.word	0x20005558

0800da14 <_init>:
 800da14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da16:	bf00      	nop
 800da18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da1a:	bc08      	pop	{r3}
 800da1c:	469e      	mov	lr, r3
 800da1e:	4770      	bx	lr

0800da20 <_fini>:
 800da20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da22:	bf00      	nop
 800da24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da26:	bc08      	pop	{r3}
 800da28:	469e      	mov	lr, r3
 800da2a:	4770      	bx	lr
